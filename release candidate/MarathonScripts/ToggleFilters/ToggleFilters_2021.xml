<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>ToggleFilters_2021</name>
    </assembly>
    <members>
        <member name="T:MoreLinq.MoreEnumerable">
            <summary>
            Provides a set of static methods for querying objects that
            implement <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Acquire``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Ensures that a source sequence of <see cref="T:System.IDisposable" />
            objects are all acquired successfully. If the acquisition of any
            one <see cref="T:System.IDisposable" /> fails then those successfully
            acquired till that point are disposed.
            </summary>
            <typeparam name="TSource">Type of elements in <paramref name="source" /> sequence.</typeparam>
            <param name="source">Source sequence of <see cref="T:System.IDisposable" /> objects.</param>
            <returns>
            Returns an array of all the acquired <see cref="T:System.IDisposable" />
            objects in source order.
            </returns>
            <remarks>
            This operator executes immediately.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Aggregate``4(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},``2,System.Func{``2,``0,``2},System.Func{``1,``2,``3})">
            <summary>
            Applies two accumulators sequentially in a single pass over a
            sequence.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source" />.</typeparam>
            <typeparam name="TAccumulate1">The type of first accumulator value.</typeparam>
            <typeparam name="TAccumulate2">The type of second accumulator value.</typeparam>
            <typeparam name="TResult">The type of the accumulated result.</typeparam>
            <param name="source">The source sequence</param>
            <param name="seed1">The seed value for the first accumulator.</param>
            <param name="accumulator1">The first accumulator.</param>
            <param name="seed2">The seed value for the second accumulator.</param>
            <param name="accumulator2">The second accumulator.</param>
            <param name="resultSelector">
            A function that projects a single result given the result of each
            accumulator.</param>
            <returns>The value returned by <paramref name="resultSelector" />.</returns>
            <remarks>
            This operator executes immediately.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Aggregate``5(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},``2,System.Func{``2,``0,``2},``3,System.Func{``3,``0,``3},System.Func{``1,``2,``3,``4})">
            <summary>
            Applies three accumulators sequentially in a single pass over a
            sequence.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source" />.</typeparam>
            <typeparam name="TAccumulate1">The type of first accumulator value.</typeparam>
            <typeparam name="TAccumulate2">The type of second accumulator value.</typeparam>
            <typeparam name="TAccumulate3">The type of third accumulator value.</typeparam>
            <typeparam name="TResult">The type of the accumulated result.</typeparam>
            <param name="source">The source sequence</param>
            <param name="seed1">The seed value for the first accumulator.</param>
            <param name="accumulator1">The first accumulator.</param>
            <param name="seed2">The seed value for the second accumulator.</param>
            <param name="accumulator2">The second accumulator.</param>
            <param name="seed3">The seed value for the third accumulator.</param>
            <param name="accumulator3">The third accumulator.</param>
            <param name="resultSelector">
            A function that projects a single result given the result of each
            accumulator.</param>
            <returns>The value returned by <paramref name="resultSelector" />.</returns>
            <remarks>
            This operator executes immediately.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Aggregate``6(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},``2,System.Func{``2,``0,``2},``3,System.Func{``3,``0,``3},``4,System.Func{``4,``0,``4},System.Func{``1,``2,``3,``4,``5})">
            <summary>
            Applies four accumulators sequentially in a single pass over a
            sequence.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source" />.</typeparam>
            <typeparam name="TAccumulate1">The type of first accumulator value.</typeparam>
            <typeparam name="TAccumulate2">The type of second accumulator value.</typeparam>
            <typeparam name="TAccumulate3">The type of third accumulator value.</typeparam>
            <typeparam name="TAccumulate4">The type of fourth accumulator value.</typeparam>
            <typeparam name="TResult">The type of the accumulated result.</typeparam>
            <param name="source">The source sequence</param>
            <param name="seed1">The seed value for the first accumulator.</param>
            <param name="accumulator1">The first accumulator.</param>
            <param name="seed2">The seed value for the second accumulator.</param>
            <param name="accumulator2">The second accumulator.</param>
            <param name="seed3">The seed value for the third accumulator.</param>
            <param name="accumulator3">The third accumulator.</param>
            <param name="seed4">The seed value for the fourth accumulator.</param>
            <param name="accumulator4">The fourth accumulator.</param>
            <param name="resultSelector">
            A function that projects a single result given the result of each
            accumulator.</param>
            <returns>The value returned by <paramref name="resultSelector" />.</returns>
            <remarks>
            This operator executes immediately.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Aggregate``7(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},``2,System.Func{``2,``0,``2},``3,System.Func{``3,``0,``3},``4,System.Func{``4,``0,``4},``5,System.Func{``5,``0,``5},System.Func{``1,``2,``3,``4,``5,``6})">
            <summary>
            Applies five accumulators sequentially in a single pass over a
            sequence.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source" />.</typeparam>
            <typeparam name="TAccumulate1">The type of first accumulator value.</typeparam>
            <typeparam name="TAccumulate2">The type of second accumulator value.</typeparam>
            <typeparam name="TAccumulate3">The type of third accumulator value.</typeparam>
            <typeparam name="TAccumulate4">The type of fourth accumulator value.</typeparam>
            <typeparam name="TAccumulate5">The type of fifth accumulator value.</typeparam>
            <typeparam name="TResult">The type of the accumulated result.</typeparam>
            <param name="source">The source sequence</param>
            <param name="seed1">The seed value for the first accumulator.</param>
            <param name="accumulator1">The first accumulator.</param>
            <param name="seed2">The seed value for the second accumulator.</param>
            <param name="accumulator2">The second accumulator.</param>
            <param name="seed3">The seed value for the third accumulator.</param>
            <param name="accumulator3">The third accumulator.</param>
            <param name="seed4">The seed value for the fourth accumulator.</param>
            <param name="accumulator4">The fourth accumulator.</param>
            <param name="seed5">The seed value for the fifth accumulator.</param>
            <param name="accumulator5">The fifth accumulator.</param>
            <param name="resultSelector">
            A function that projects a single result given the result of each
            accumulator.</param>
            <returns>The value returned by <paramref name="resultSelector" />.</returns>
            <remarks>
            This operator executes immediately.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Aggregate``8(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},``2,System.Func{``2,``0,``2},``3,System.Func{``3,``0,``3},``4,System.Func{``4,``0,``4},``5,System.Func{``5,``0,``5},``6,System.Func{``6,``0,``6},System.Func{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Applies six accumulators sequentially in a single pass over a
            sequence.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source" />.</typeparam>
            <typeparam name="TAccumulate1">The type of first accumulator value.</typeparam>
            <typeparam name="TAccumulate2">The type of second accumulator value.</typeparam>
            <typeparam name="TAccumulate3">The type of third accumulator value.</typeparam>
            <typeparam name="TAccumulate4">The type of fourth accumulator value.</typeparam>
            <typeparam name="TAccumulate5">The type of fifth accumulator value.</typeparam>
            <typeparam name="TAccumulate6">The type of sixth accumulator value.</typeparam>
            <typeparam name="TResult">The type of the accumulated result.</typeparam>
            <param name="source">The source sequence</param>
            <param name="seed1">The seed value for the first accumulator.</param>
            <param name="accumulator1">The first accumulator.</param>
            <param name="seed2">The seed value for the second accumulator.</param>
            <param name="accumulator2">The second accumulator.</param>
            <param name="seed3">The seed value for the third accumulator.</param>
            <param name="accumulator3">The third accumulator.</param>
            <param name="seed4">The seed value for the fourth accumulator.</param>
            <param name="accumulator4">The fourth accumulator.</param>
            <param name="seed5">The seed value for the fifth accumulator.</param>
            <param name="accumulator5">The fifth accumulator.</param>
            <param name="seed6">The seed value for the sixth accumulator.</param>
            <param name="accumulator6">The sixth accumulator.</param>
            <param name="resultSelector">
            A function that projects a single result given the result of each
            accumulator.</param>
            <returns>The value returned by <paramref name="resultSelector" />.</returns>
            <remarks>
            This operator executes immediately.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Aggregate``9(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},``2,System.Func{``2,``0,``2},``3,System.Func{``3,``0,``3},``4,System.Func{``4,``0,``4},``5,System.Func{``5,``0,``5},``6,System.Func{``6,``0,``6},``7,System.Func{``7,``0,``7},System.Func{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Applies seven accumulators sequentially in a single pass over a
            sequence.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source" />.</typeparam>
            <typeparam name="TAccumulate1">The type of first accumulator value.</typeparam>
            <typeparam name="TAccumulate2">The type of second accumulator value.</typeparam>
            <typeparam name="TAccumulate3">The type of third accumulator value.</typeparam>
            <typeparam name="TAccumulate4">The type of fourth accumulator value.</typeparam>
            <typeparam name="TAccumulate5">The type of fifth accumulator value.</typeparam>
            <typeparam name="TAccumulate6">The type of sixth accumulator value.</typeparam>
            <typeparam name="TAccumulate7">The type of seventh accumulator value.</typeparam>
            <typeparam name="TResult">The type of the accumulated result.</typeparam>
            <param name="source">The source sequence</param>
            <param name="seed1">The seed value for the first accumulator.</param>
            <param name="accumulator1">The first accumulator.</param>
            <param name="seed2">The seed value for the second accumulator.</param>
            <param name="accumulator2">The second accumulator.</param>
            <param name="seed3">The seed value for the third accumulator.</param>
            <param name="accumulator3">The third accumulator.</param>
            <param name="seed4">The seed value for the fourth accumulator.</param>
            <param name="accumulator4">The fourth accumulator.</param>
            <param name="seed5">The seed value for the fifth accumulator.</param>
            <param name="accumulator5">The fifth accumulator.</param>
            <param name="seed6">The seed value for the sixth accumulator.</param>
            <param name="accumulator6">The sixth accumulator.</param>
            <param name="seed7">The seed value for the seventh accumulator.</param>
            <param name="accumulator7">The seventh accumulator.</param>
            <param name="resultSelector">
            A function that projects a single result given the result of each
            accumulator.</param>
            <returns>The value returned by <paramref name="resultSelector" />.</returns>
            <remarks>
            This operator executes immediately.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Aggregate``10(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},``2,System.Func{``2,``0,``2},``3,System.Func{``3,``0,``3},``4,System.Func{``4,``0,``4},``5,System.Func{``5,``0,``5},``6,System.Func{``6,``0,``6},``7,System.Func{``7,``0,``7},``8,System.Func{``8,``0,``8},System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Applies eight accumulators sequentially in a single pass over a
            sequence.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source" />.</typeparam>
            <typeparam name="TAccumulate1">The type of first accumulator value.</typeparam>
            <typeparam name="TAccumulate2">The type of second accumulator value.</typeparam>
            <typeparam name="TAccumulate3">The type of third accumulator value.</typeparam>
            <typeparam name="TAccumulate4">The type of fourth accumulator value.</typeparam>
            <typeparam name="TAccumulate5">The type of fifth accumulator value.</typeparam>
            <typeparam name="TAccumulate6">The type of sixth accumulator value.</typeparam>
            <typeparam name="TAccumulate7">The type of seventh accumulator value.</typeparam>
            <typeparam name="TAccumulate8">The type of eighth accumulator value.</typeparam>
            <typeparam name="TResult">The type of the accumulated result.</typeparam>
            <param name="source">The source sequence</param>
            <param name="seed1">The seed value for the first accumulator.</param>
            <param name="accumulator1">The first accumulator.</param>
            <param name="seed2">The seed value for the second accumulator.</param>
            <param name="accumulator2">The second accumulator.</param>
            <param name="seed3">The seed value for the third accumulator.</param>
            <param name="accumulator3">The third accumulator.</param>
            <param name="seed4">The seed value for the fourth accumulator.</param>
            <param name="accumulator4">The fourth accumulator.</param>
            <param name="seed5">The seed value for the fifth accumulator.</param>
            <param name="accumulator5">The fifth accumulator.</param>
            <param name="seed6">The seed value for the sixth accumulator.</param>
            <param name="accumulator6">The sixth accumulator.</param>
            <param name="seed7">The seed value for the seventh accumulator.</param>
            <param name="accumulator7">The seventh accumulator.</param>
            <param name="seed8">The seed value for the eighth accumulator.</param>
            <param name="accumulator8">The eighth accumulator.</param>
            <param name="resultSelector">
            A function that projects a single result given the result of each
            accumulator.</param>
            <returns>The value returned by <paramref name="resultSelector" />.</returns>
            <remarks>
            This operator executes immediately.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.AggregateRight``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
            <summary>
            Applies a right-associative accumulator function over a sequence.
            This operator is the right-associative version of the
            <see cref="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" /> LINQ operator.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="func">A right-associative accumulator function to be invoked on each element.</param>
            <returns>The final accumulator value.</returns>
            <example>
                <code><![CDATA[
            string result = Enumerable.Range(1, 5).Select(i => i.ToString()).AggregateRight((a, b) => string.Format("({0}/{1})", a, b));
            ]]></code>
            The <c>result</c> variable will contain <c>"(1/(2/(3/(4/5))))"</c>.
            </example>
            <remarks>
            This operator executes immediately.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.AggregateRight``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``0,``1,``1})">
            <summary>
            Applies a right-associative accumulator function over a sequence.
            The specified seed value is used as the initial accumulator value.
            This operator is the right-associative version of the
            <see cref="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" /> LINQ operator.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="seed">The initial accumulator value.</param>
            <param name="func">A right-associative accumulator function to be invoked on each element.</param>
            <returns>The final accumulator value.</returns>
            <example>
                <code><![CDATA[
            var numbers = Enumerable.Range(1, 5);
            string result = numbers.AggregateRight("6", (a, b) => string.Format("({0}/{1})", a, b));
            ]]></code>
            The <c>result</c> variable will contain <c>"(1/(2/(3/(4/(5/6)))))"</c>.
            </example>
            <remarks>
            This operator executes immediately.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.AggregateRight``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``0,``1,``1},System.Func{``1,``2})">
            <summary>
            Applies a right-associative accumulator function over a sequence.
            The specified seed value is used as the initial accumulator value,
            and the specified function is used to select the result value.
            This operator is the right-associative version of the
            <see cref="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" /> LINQ operator.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
            <typeparam name="TResult">The type of the resulting value.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="seed">The initial accumulator value.</param>
            <param name="func">A right-associative accumulator function to be invoked on each element.</param>
            <param name="resultSelector">A function to transform the final accumulator value into the result value.</param>
            <returns>The transformed final accumulator value.</returns>
            <example>
                <code><![CDATA[
            var numbers = Enumerable.Range(1, 5);
            int result = numbers.AggregateRight("6", (a, b) => string.Format("({0}/{1})", a, b), str => str.Length);
            ]]></code>
            The <c>result</c> variable will contain <c>21</c>.
            </example>
            <remarks>
            This operator executes immediately.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns a sequence consisting of the head elements and the given tail element.
            </summary>
            <typeparam name="T">Type of sequence</typeparam>
            <param name="head">All elements of the head. Must not be null.</param>
            <param name="tail">Tail element of the new sequence.</param>
            <returns>A sequence consisting of the head elements and the given tail element.</returns>
            <remarks>This operator uses deferred execution and streams its results.</remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns a sequence consisting of the head elements and the given tail element.
            </summary>
            <typeparam name="T">Type of sequence</typeparam>
            <param name="head">All elements of the head. Must not be null.</param>
            <param name="tail">Tail element of the new sequence.</param>
            <returns>A sequence consisting of the head elements and the given tail element.</returns>
            <remarks>This operator uses deferred execution and streams its results.</remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Assert``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Asserts that all elements of a sequence meet a given condition
            otherwise throws an <see cref="T:System.Exception" /> object.
            </summary>
            <typeparam name="TSource">Type of elements in <paramref name="source" /> sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="predicate">Function that asserts an element of the <paramref name="source" /> sequence for a condition.</param>
            <returns>
            Returns the original sequence.
            </returns>
            <exception cref="T:System.InvalidOperationException">The input sequence
            contains an element that does not meet the condition being
            asserted.</exception>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Assert``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Exception})">
            <summary>
            Asserts that all elements of a sequence meet a given condition
            otherwise throws an <see cref="T:System.Exception" /> object.
            </summary>
            <typeparam name="TSource">Type of elements in <paramref name="source" /> sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="predicate">Function that asserts an element of the input sequence for a condition.</param>
            <param name="errorSelector">Function that returns the <see cref="T:System.Exception" /> object to throw.</param>
            <returns>
            Returns the original sequence.
            </returns>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.AssertCount``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Asserts that a source sequence contains a given count of elements.
            </summary>
            <typeparam name="TSource">Type of elements in <paramref name="source" /> sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="count">Count to assert.</param>
            <returns>
            Returns the original sequence as long it is contains the
            number of elements specified by <paramref name="count" />.
            Otherwise it throws <see cref="T:System.Exception" />.
            </returns>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.AssertCount``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Int32,System.Int32,System.Exception})">
            <summary>
            Asserts that a source sequence contains a given count of elements.
            A parameter specifies the exception to be thrown.
            </summary>
            <typeparam name="TSource">Type of elements in <paramref name="source" /> sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="count">Count to assert.</param>
            <param name="errorSelector">
            Function that receives a comparison (a negative integer if actual
            count is less than <paramref name="count" /> and a positive integer
            if actual count is greater than <paramref name="count" />) and
            <paramref name="count" /> as arguments and which returns the
            <see cref="T:System.Exception" /> object to throw.</param>
            <returns>
            Returns the original sequence as long it is contains the
            number of elements specified by <paramref name="count" />.
            Otherwise it throws the <see cref="T:System.Exception" /> object
            returned by calling <paramref name="errorSelector" />.
            </returns>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Backsert``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Inserts the elements of a sequence into another sequence at a
            specified index from the tail of the sequence, where zero always
            represents the last position, one represents the second-last
            element, two represents the third-last element and so on.
            </summary>
            <typeparam name="T">
            Type of elements in all sequences.</typeparam>
            <param name="first">The source sequence.</param>
            <param name="second">The sequence that will be inserted.</param>
            <param name="index">
            The zero-based index from the end of <paramref name="first" /> where
            elements from <paramref name="second" /> should be inserted.
            <paramref name="second" />.</param>
            <returns>
            A sequence that contains the elements of <paramref name="first" />
            plus the elements of <paramref name="second" /> inserted at
            the given index from the end of <paramref name="first" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="first" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="second" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="index" /> is negative.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown lazily if <paramref name="index" /> is greater than the
            length of <paramref name="first" />. The validation occurs when
            the resulting sequence is iterated.
            </exception>
            <remarks>
            This method uses deferred execution and streams its results.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Batch``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Batches the source sequence into sized buckets.
            </summary>
            <typeparam name="TSource">Type of elements in <paramref name="source" /> sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="size">Size of buckets.</param>
            <returns>A sequence of equally sized buckets containing elements of the source collection.</returns>
            <remarks>
                <para>
            This operator uses deferred execution and streams its results
            (buckets are streamed but their content buffered).</para>
                <para>
            When more than one bucket is streamed, all buckets except the last
            is guaranteed to have <paramref name="size" /> elements. The last
            bucket may be smaller depending on the remaining elements in the
            <paramref name="source" /> sequence.</para>
                <para>
            Each bucket is pre-allocated to <paramref name="size" /> elements.
            If <paramref name="size" /> is set to a very large value, e.g.
            <see cref="F:System.Int32.MaxValue" /> to effectively disable batching by just
            hoping for a single bucket, then it can lead to memory exhaustion
            (<see cref="T:System.OutOfMemoryException" />).
            </para>
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Batch``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            Batches the source sequence into sized buckets and applies a projection to each bucket.
            </summary>
            <typeparam name="TSource">Type of elements in <paramref name="source" /> sequence.</typeparam>
            <typeparam name="TResult">Type of result returned by <paramref name="resultSelector" />.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="size">Size of buckets.</param>
            <param name="resultSelector">The projection to apply to each bucket.</param>
            <returns>A sequence of projections on equally sized buckets containing elements of the source collection.</returns>
            <para>
            This operator uses deferred execution and streams its results
            (buckets are streamed but their content buffered).</para>
            <para>
                <para>
            When more than one bucket is streamed, all buckets except the last
            is guaranteed to have <paramref name="size" /> elements. The last
            bucket may be smaller depending on the remaining elements in the
            <paramref name="source" /> sequence.</para>
            Each bucket is pre-allocated to <paramref name="size" /> elements.
            If <paramref name="size" /> is set to a very large value, e.g.
            <see cref="F:System.Int32.MaxValue" /> to effectively disable batching by just
            hoping for a single bucket, then it can lead to memory exhaustion
            (<see cref="T:System.OutOfMemoryException" />).
            </para>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Cartesian``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Returns the Cartesian product of two sequences by enumerating all
            possible combinations of one item from each sequence, and applying
            a user-defined projection to the items in a given combination.
            </summary>
            <typeparam name="T1">
            The type of the elements of <paramref name="first" />.</typeparam>
            <typeparam name="T2">
            The type of the elements of <paramref name="second" />.</typeparam>
            <typeparam name="TResult">
            The type of the elements of the result sequence.</typeparam>
            <param name="first">The first sequence of elements.</param>
            <param name="second">The second sequence of elements.</param>
            <param name="resultSelector">A projection function that combines
            elements from all of the sequences.</param>
            <returns>A sequence of elements returned by
            <paramref name="resultSelector" />.</returns>
            <remarks>
                <para>
            The method returns items in the same order as a nested foreach
            loop, but all sequences except for <paramref name="first" /> are
            cached when iterated over. The cache is then re-used for any
            subsequent iterations.</para>
                <para>
            This method uses deferred execution and stream its results.</para>
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Cartesian``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Func{``0,``1,``2,``3})">
            <summary>
            Returns the Cartesian product of three sequences by enumerating all
            possible combinations of one item from each sequence, and applying
            a user-defined projection to the items in a given combination.
            </summary>
            <typeparam name="T1">
            The type of the elements of <paramref name="first" />.</typeparam>
            <typeparam name="T2">
            The type of the elements of <paramref name="second" />.</typeparam>
            <typeparam name="T3">
            The type of the elements of <paramref name="third" />.</typeparam>
            <typeparam name="TResult">
            The type of the elements of the result sequence.</typeparam>
            <param name="first">The first sequence of elements.</param>
            <param name="second">The second sequence of elements.</param>
            <param name="third">The third sequence of elements.</param>
            <param name="resultSelector">A projection function that combines
            elements from all of the sequences.</param>
            <returns>A sequence of elements returned by
            <paramref name="resultSelector" />.</returns>
            <remarks>
                <para>
            The method returns items in the same order as a nested foreach
            loop, but all sequences except for <paramref name="first" /> are
            cached when iterated over. The cache is then re-used for any
            subsequent iterations.</para>
                <para>
            This method uses deferred execution and stream its results.</para>
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Cartesian``5(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Returns the Cartesian product of four sequences by enumerating all
            possible combinations of one item from each sequence, and applying
            a user-defined projection to the items in a given combination.
            </summary>
            <typeparam name="T1">
            The type of the elements of <paramref name="first" />.</typeparam>
            <typeparam name="T2">
            The type of the elements of <paramref name="second" />.</typeparam>
            <typeparam name="T3">
            The type of the elements of <paramref name="third" />.</typeparam>
            <typeparam name="T4">
            The type of the elements of <paramref name="fourth" />.</typeparam>
            <typeparam name="TResult">
            The type of the elements of the result sequence.</typeparam>
            <param name="first">The first sequence of elements.</param>
            <param name="second">The second sequence of elements.</param>
            <param name="third">The third sequence of elements.</param>
            <param name="fourth">The fourth sequence of elements.</param>
            <param name="resultSelector">A projection function that combines
            elements from all of the sequences.</param>
            <returns>A sequence of elements returned by
            <paramref name="resultSelector" />.</returns>
            <remarks>
                <para>
            The method returns items in the same order as a nested foreach
            loop, but all sequences except for <paramref name="first" /> are
            cached when iterated over. The cache is then re-used for any
            subsequent iterations.</para>
                <para>
            This method uses deferred execution and stream its results.</para>
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Cartesian``6(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            Returns the Cartesian product of five sequences by enumerating all
            possible combinations of one item from each sequence, and applying
            a user-defined projection to the items in a given combination.
            </summary>
            <typeparam name="T1">
            The type of the elements of <paramref name="first" />.</typeparam>
            <typeparam name="T2">
            The type of the elements of <paramref name="second" />.</typeparam>
            <typeparam name="T3">
            The type of the elements of <paramref name="third" />.</typeparam>
            <typeparam name="T4">
            The type of the elements of <paramref name="fourth" />.</typeparam>
            <typeparam name="T5">
            The type of the elements of <paramref name="fifth" />.</typeparam>
            <typeparam name="TResult">
            The type of the elements of the result sequence.</typeparam>
            <param name="first">The first sequence of elements.</param>
            <param name="second">The second sequence of elements.</param>
            <param name="third">The third sequence of elements.</param>
            <param name="fourth">The fourth sequence of elements.</param>
            <param name="fifth">The fifth sequence of elements.</param>
            <param name="resultSelector">A projection function that combines
            elements from all of the sequences.</param>
            <returns>A sequence of elements returned by
            <paramref name="resultSelector" />.</returns>
            <remarks>
                <para>
            The method returns items in the same order as a nested foreach
            loop, but all sequences except for <paramref name="first" /> are
            cached when iterated over. The cache is then re-used for any
            subsequent iterations.</para>
                <para>
            This method uses deferred execution and stream its results.</para>
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Cartesian``7(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Returns the Cartesian product of six sequences by enumerating all
            possible combinations of one item from each sequence, and applying
            a user-defined projection to the items in a given combination.
            </summary>
            <typeparam name="T1">
            The type of the elements of <paramref name="first" />.</typeparam>
            <typeparam name="T2">
            The type of the elements of <paramref name="second" />.</typeparam>
            <typeparam name="T3">
            The type of the elements of <paramref name="third" />.</typeparam>
            <typeparam name="T4">
            The type of the elements of <paramref name="fourth" />.</typeparam>
            <typeparam name="T5">
            The type of the elements of <paramref name="fifth" />.</typeparam>
            <typeparam name="T6">
            The type of the elements of <paramref name="sixth" />.</typeparam>
            <typeparam name="TResult">
            The type of the elements of the result sequence.</typeparam>
            <param name="first">The first sequence of elements.</param>
            <param name="second">The second sequence of elements.</param>
            <param name="third">The third sequence of elements.</param>
            <param name="fourth">The fourth sequence of elements.</param>
            <param name="fifth">The fifth sequence of elements.</param>
            <param name="sixth">The sixth sequence of elements.</param>
            <param name="resultSelector">A projection function that combines
            elements from all of the sequences.</param>
            <returns>A sequence of elements returned by
            <paramref name="resultSelector" />.</returns>
            <remarks>
                <para>
            The method returns items in the same order as a nested foreach
            loop, but all sequences except for <paramref name="first" /> are
            cached when iterated over. The cache is then re-used for any
            subsequent iterations.</para>
                <para>
            This method uses deferred execution and stream its results.</para>
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Cartesian``8(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Returns the Cartesian product of seven sequences by enumerating all
            possible combinations of one item from each sequence, and applying
            a user-defined projection to the items in a given combination.
            </summary>
            <typeparam name="T1">
            The type of the elements of <paramref name="first" />.</typeparam>
            <typeparam name="T2">
            The type of the elements of <paramref name="second" />.</typeparam>
            <typeparam name="T3">
            The type of the elements of <paramref name="third" />.</typeparam>
            <typeparam name="T4">
            The type of the elements of <paramref name="fourth" />.</typeparam>
            <typeparam name="T5">
            The type of the elements of <paramref name="fifth" />.</typeparam>
            <typeparam name="T6">
            The type of the elements of <paramref name="sixth" />.</typeparam>
            <typeparam name="T7">
            The type of the elements of <paramref name="seventh" />.</typeparam>
            <typeparam name="TResult">
            The type of the elements of the result sequence.</typeparam>
            <param name="first">The first sequence of elements.</param>
            <param name="second">The second sequence of elements.</param>
            <param name="third">The third sequence of elements.</param>
            <param name="fourth">The fourth sequence of elements.</param>
            <param name="fifth">The fifth sequence of elements.</param>
            <param name="sixth">The sixth sequence of elements.</param>
            <param name="seventh">The seventh sequence of elements.</param>
            <param name="resultSelector">A projection function that combines
            elements from all of the sequences.</param>
            <returns>A sequence of elements returned by
            <paramref name="resultSelector" />.</returns>
            <remarks>
                <para>
            The method returns items in the same order as a nested foreach
            loop, but all sequences except for <paramref name="first" /> are
            cached when iterated over. The cache is then re-used for any
            subsequent iterations.</para>
                <para>
            This method uses deferred execution and stream its results.</para>
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Cartesian``9(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Returns the Cartesian product of eight sequences by enumerating all
            possible combinations of one item from each sequence, and applying
            a user-defined projection to the items in a given combination.
            </summary>
            <typeparam name="T1">
            The type of the elements of <paramref name="first" />.</typeparam>
            <typeparam name="T2">
            The type of the elements of <paramref name="second" />.</typeparam>
            <typeparam name="T3">
            The type of the elements of <paramref name="third" />.</typeparam>
            <typeparam name="T4">
            The type of the elements of <paramref name="fourth" />.</typeparam>
            <typeparam name="T5">
            The type of the elements of <paramref name="fifth" />.</typeparam>
            <typeparam name="T6">
            The type of the elements of <paramref name="sixth" />.</typeparam>
            <typeparam name="T7">
            The type of the elements of <paramref name="seventh" />.</typeparam>
            <typeparam name="T8">
            The type of the elements of <paramref name="eighth" />.</typeparam>
            <typeparam name="TResult">
            The type of the elements of the result sequence.</typeparam>
            <param name="first">The first sequence of elements.</param>
            <param name="second">The second sequence of elements.</param>
            <param name="third">The third sequence of elements.</param>
            <param name="fourth">The fourth sequence of elements.</param>
            <param name="fifth">The fifth sequence of elements.</param>
            <param name="sixth">The sixth sequence of elements.</param>
            <param name="seventh">The seventh sequence of elements.</param>
            <param name="eighth">The eighth sequence of elements.</param>
            <param name="resultSelector">A projection function that combines
            elements from all of the sequences.</param>
            <returns>A sequence of elements returned by
            <paramref name="resultSelector" />.</returns>
            <remarks>
                <para>
            The method returns items in the same order as a nested foreach
            loop, but all sequences except for <paramref name="first" /> are
            cached when iterated over. The cache is then re-used for any
            subsequent iterations.</para>
                <para>
            This method uses deferred execution and stream its results.</para>
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Choose``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.ValueTuple{System.Boolean,``1}})">
            <summary>
            Applies a function to each element of the source sequence and
            returns a new sequence of result elements for source elements
            where the function returns a couple (2-tuple) having a <c>true</c>
            as its first element and result as the second.
            </summary>
            <typeparam name="T">
            The type of the elements in <paramref name="source" />.</typeparam>
            <typeparam name="TResult">
            The type of the elements in the returned sequence.</typeparam>
            <param name="source"> The source sequence.</param>
            <param name="chooser">The function that is applied to each source
            element.</param>
            <returns>A sequence <typeparamref name="TResult" /> elements.</returns>
            <remarks>
            This method uses deferred execution semantics and streams its
            results.
            </remarks>
            <example>
                <code><![CDATA[
            var str = "O,l,2,3,4,S,6,7,B,9";
            var xs = str.Split(',').Choose(s => (int.TryParse(s, out var n), n));
            ]]></code>
            The <c>xs</c> variable will be a sequence of the integers 2, 3, 4,
            6, 7 and 9.
            </example>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Consume``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Completely consumes the given sequence. This method uses immediate execution,
            and doesn't store any data during execution.
            </summary>
            <typeparam name="T">Element type of the sequence</typeparam>
            <param name="source">Source to consume</param>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.CountBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Applies a key-generating function to each element of a sequence and returns a sequence of
            unique keys and their number of occurrences in the original sequence.
            </summary>
            <typeparam name="TSource">Type of the elements of the source sequence.</typeparam>
            <typeparam name="TKey">Type of the projected element.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="keySelector">Function that transforms each item of source sequence into a key to be compared against the others.</param>
            <returns>A sequence of unique keys and their number of occurrences in the original sequence.</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.CountBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Applies a key-generating function to each element of a sequence and returns a sequence of
            unique keys and their number of occurrences in the original sequence.
            An additional argument specifies a comparer to use for testing equivalence of keys.
            </summary>
            <typeparam name="TSource">Type of the elements of the source sequence.</typeparam>
            <typeparam name="TKey">Type of the projected element.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="keySelector">Function that transforms each item of source sequence into a key to be compared against the others.</param>
            <param name="comparer">The equality comparer to use to determine whether or not keys are equal.
            If null, the default equality comparer for <typeparamref name="TSource" /> is used.</param>
            <returns>A sequence of unique keys and their number of occurrences in the original sequence.</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.CountDown``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Int32},``1})">
            <summary>
            Provides a countdown counter for a given count of elements at the
            tail of the sequence where zero always represents the last element,
            one represents the second-last element, two represents the
            third-last element and so on.
            </summary>
            <typeparam name="T">
            The type of elements of <paramref name="source" /></typeparam>
            <typeparam name="TResult">
            The type of elements of the resulting sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="count">Count of tail elements of
            <paramref name="source" /> to count down.</param>
            <param name="resultSelector">
            A function that receives the element and the current countdown
            value for the element and which returns those mapped to a
            result returned in the resulting sequence. For elements before
            the last <paramref name="count" />, the coundown value is
            <c>null</c>.</param>
            <returns>
            A sequence of results returned by
            <paramref name="resultSelector" />.</returns>
            <remarks>
            This method uses deferred execution semantics and streams its
            results. At most, <paramref name="count" /> elements of the source
            sequence may be buffered at any one time unless
            <paramref name="source" /> is a collection or a list.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.AtLeast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Determines whether or not the number of elements in the sequence is greater than
            or equal to the given integer.
            </summary>
            <typeparam name="T">Element type of sequence</typeparam>
            <param name="source">The source sequence</param>
            <param name="count">The minimum number of items a sequence must have for this
            function to return true</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="count" /> is negative</exception>
            <returns>
                <c>true</c> if the number of elements in the sequence is greater than
            or equal to the given integer or <c>false</c> otherwise.</returns>
            <example>
                <code><![CDATA[
            var numbers = new[] { 123, 456, 789 };
            var result = numbers.AtLeast(2);
            ]]></code>
            The <c>result</c> variable will contain <c>true</c>.
            </example>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.AtMost``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Determines whether or not the number of elements in the sequence is lesser than
            or equal to the given integer.
            </summary>
            <typeparam name="T">Element type of sequence</typeparam>
            <param name="source">The source sequence</param>
            <param name="count">The maximun number of items a sequence must have for this
            function to return true</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="count" /> is negative</exception>
            <returns>
                <c>true</c> if the number of elements in the sequence is lesser than
            or equal to the given integer or <c>false</c> otherwise.</returns>
            <example>
                <code><![CDATA[
            var numbers = new[] { 123, 456, 789 };
            var result = numbers.AtMost(2);
            ]]></code>
            The <c>result</c> variable will contain <c>false</c>.
            </example>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Exactly``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Determines whether or not the number of elements in the sequence is equals to the given integer.
            </summary>
            <typeparam name="T">Element type of sequence</typeparam>
            <param name="source">The source sequence</param>
            <param name="count">The exactly number of items a sequence must have for this
            function to return true</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="count" /> is negative</exception>
            <returns>
                <c>true</c> if the number of elements in the sequence is equals
            to the given integer or <c>false</c> otherwise.</returns>
            <example>
                <code><![CDATA[
            var numbers = new[] { 123, 456, 789 };
            var result = numbers.Exactly(3);
            ]]></code>
            The <c>result</c> variable will contain <c>true</c>.
            </example>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.CountBetween``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Determines whether or not the number of elements in the sequence is between
            an inclusive range of minimum and maximum integers.
            </summary>
            <typeparam name="T">Element type of sequence</typeparam>
            <param name="source">The source sequence</param>
            <param name="min">The minimum number of items a sequence must have for this
            function to return true</param>
            <param name="max">The maximun number of items a sequence must have for this
            function to return true</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="min" /> is negative or <paramref name="max" /> is less than min</exception>
            <returns>
                <c>true</c> if the number of elements in the sequence is between (inclusive)
            the min and max given integers or <c>false</c> otherwise.</returns>
            <example>
                <code><![CDATA[
            var numbers = new[] { 123, 456, 789 };
            var result = numbers.CountBetween(1, 2);
            ]]></code>
            The <c>result</c> variable will contain <c>false</c>.
            </example>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.CompareCount``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Compares two sequences and returns an integer that indicates whether the first sequence
            has fewer, the same or more elements than the second sequence.
            </summary>
            <typeparam name="TFirst">Element type of the first sequence</typeparam>
            <typeparam name="TSecond">Element type of the second sequence</typeparam>
            <param name="first">The first sequence</param>
            <param name="second">The second sequence</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="first" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="second" /> is null</exception>
            <returns>
                <c>-1</c> if the first sequence has the fewest elements, <c>0</c> if the two sequences have the same number of elements
            or <c>1</c> if the first sequence has the most elements.</returns>
            <example>
                <code><![CDATA[
            var first = new[] { 123, 456 };
            var second = new[] { 789 };
            var result = first.CompareCount(second);
            ]]></code>
            The <c>result</c> variable will contain <c>1</c>.
            </example>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns all distinct elements of the given source, where "distinctness"
            is determined via a projection and the default equality comparer for the projected type.
            </summary>
            <remarks>
            This operator uses deferred execution and streams the results, although
            a set of already-seen keys is retained. If a key is seen multiple times,
            only the first element with that key is returned.
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <typeparam name="TKey">Type of the projected element</typeparam>
            <param name="source">Source sequence</param>
            <param name="keySelector">Projection for determining "distinctness"</param>
            <returns>A sequence consisting of distinct elements from the source sequence,
            comparing them by the specified key projection.</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Returns all distinct elements of the given source, where "distinctness"
            is determined via a projection and the specified comparer for the projected type.
            </summary>
            <remarks>
            This operator uses deferred execution and streams the results, although
            a set of already-seen keys is retained. If a key is seen multiple times,
            only the first element with that key is returned.
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <typeparam name="TKey">Type of the projected element</typeparam>
            <param name="source">Source sequence</param>
            <param name="keySelector">Projection for determining "distinctness"</param>
            <param name="comparer">The equality comparer to use to determine whether or not keys are equal.
            If null, the default equality comparer for <c>TSource</c> is used.</param>
            <returns>A sequence consisting of distinct elements from the source sequence,
            comparing them by the specified key projection.</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.EndsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether the end of the first sequence is equivalent to
            the second sequence, using the default equality comparer.
            </summary>
            <typeparam name="T">Type of elements.</typeparam>
            <param name="first">The sequence to check.</param>
            <param name="second">The sequence to compare to.</param>
            <returns>
                <c>true</c> if <paramref name="first" /> ends with elements
            equivalent to <paramref name="second" />.
            </returns>
            <remarks>
            This is the <see cref="T:System.Collections.Generic.IEnumerable`1" /> equivalent of
            <see cref="M:System.String.EndsWith(System.String)" /> and
            it calls <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)" /> using
            <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" /> on pairs of elements at
            the same index.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.EndsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether the end of the first sequence is equivalent to
            the second sequence, using the specified element equality comparer.
            </summary>
            <typeparam name="T">Type of elements.</typeparam>
            <param name="first">The sequence to check.</param>
            <param name="second">The sequence to compare to.</param>
            <param name="comparer">Equality comparer to use.</param>
            <returns>
                <c>true</c> if <paramref name="first" /> ends with elements
            equivalent to <paramref name="second" />.
            </returns>
            <remarks>
            This is the <see cref="T:System.Collections.Generic.IEnumerable`1" /> equivalent of
            <see cref="M:System.String.EndsWith(System.String)" /> and it calls
            <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)" /> on pairs of
            elements at the same index.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.EquiZip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Returns a projection of tuples, where each tuple contains the N-th
            element from each of the argument sequences. An exception is thrown
            if the input sequences are of different lengths.
            </summary>
            <typeparam name="TFirst">Type of elements in first sequence.</typeparam>
            <typeparam name="TSecond">Type of elements in second sequence.</typeparam>
            <typeparam name="TResult">Type of elements in result sequence.</typeparam>
            <param name="first">The first sequence.</param>
            <param name="second">The second sequence.</param>
            <param name="resultSelector">
            Function to apply to each pair of elements.</param>
            <returns>
            A sequence that contains elements of the two input sequences,
            combined by <paramref name="resultSelector" />.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The input sequences are of different lengths.
            </exception>
            <example>
                <code><![CDATA[
            var numbers = new[] { 1, 2, 3, 4 };
            var letters = new[] { "A", "B", "C", "D" };
            var zipped  = numbers.EquiZip(letters, (n, l) => n + l);
            ]]></code>
            The <c>zipped</c> variable, when iterated over, will yield "1A",
            "2B", "3C", "4D" in turn.
            </example>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.EquiZip``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Func{``0,``1,``2,``3})">
            <summary>
            Returns a projection of tuples, where each tuple contains the N-th
            element from each of the argument sequences. An exception is thrown
            if the input sequences are of different lengths.
            </summary>
            <typeparam name="T1">Type of elements in first sequence.</typeparam>
            <typeparam name="T2">Type of elements in second sequence.</typeparam>
            <typeparam name="T3">Type of elements in third sequence.</typeparam>
            <typeparam name="TResult">Type of elements in result sequence.</typeparam>
            <param name="first">The first sequence.</param>
            <param name="second">The second sequence.</param>
            <param name="third">The third sequence.</param>
            <param name="resultSelector">
            Function to apply to each triplet of elements.</param>
            <returns>
            A sequence that contains elements of the three input sequences,
            combined by <paramref name="resultSelector" />.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The input sequences are of different lengths.
            </exception>
            <example>
                <code><![CDATA[
            var numbers = new[] { 1, 2, 3, 4 };
            var letters = new[] { "A", "B", "C", "D" };
            var chars   = new[] { 'a', 'b', 'c', 'd' };
            var zipped  = numbers.EquiZip(letters, chars, (n, l, c) => n + l + c);
            ]]></code>
            The <c>zipped</c> variable, when iterated over, will yield "1Aa",
            "2Bb", "3Cc", "4Dd" in turn.
            </example>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.EquiZip``5(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Returns a projection of tuples, where each tuple contains the N-th
            element from each of the argument sequences. An exception is thrown
            if the input sequences are of different lengths.
            </summary>
            <typeparam name="T1">Type of elements in first sequence</typeparam>
            <typeparam name="T2">Type of elements in second sequence</typeparam>
            <typeparam name="T3">Type of elements in third sequence</typeparam>
            <typeparam name="T4">Type of elements in fourth sequence</typeparam>
            <typeparam name="TResult">Type of elements in result sequence</typeparam>
            <param name="first">The first sequence.</param>
            <param name="second">The second sequence.</param>
            <param name="third">The third sequence.</param>
            <param name="fourth">The fourth sequence.</param>
            <param name="resultSelector">
            Function to apply to each quadruplet of elements.</param>
            <returns>
            A sequence that contains elements of the four input sequences,
            combined by <paramref name="resultSelector" />.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The input sequences are of different lengths.
            </exception>
            <example>
                <code><![CDATA[
            var numbers = new[] { 1, 2, 3, 4 };
            var letters = new[] { "A", "B", "C", "D" };
            var chars   = new[] { 'a', 'b', 'c', 'd' };
            var flags   = new[] { true, false, true, false };
            var zipped = numbers.EquiZip(letters, chars, flags, (n, l, c, f) => n + l + c + f);
            ]]></code>
            The <c>zipped</c> variable, when iterated over, will yield "1AaTrue",
            "2BbFalse", "3CcTrue", "4DdFalse" in turn.
            </example>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Evaluate``1(System.Collections.Generic.IEnumerable{System.Func{``0}})">
            <summary>
            Returns a sequence containing the values resulting from invoking (in order) each function in the source sequence of functions.
            </summary>
            <remarks>
            This operator uses deferred execution and streams the results.
            If the resulting sequence is enumerated multiple times, the functions will be
            evaluated multiple times too.
            </remarks>
            <typeparam name="T">The type of the object returned by the functions.</typeparam>
            <param name="functions">The functions to evaluate.</param>
            <returns>A sequence with results from invoking <paramref name="functions" />.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="functions" /> is <c>null</c>.</exception>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the set of elements in the first sequence which aren't
            in the second sequence, according to a given key selector.
            </summary>
            <remarks>
            This is a set operation; if multiple elements in <paramref name="first" /> have
            equal keys, only the first such element is returned.
            This operator uses deferred execution and streams the results, although
            a set of keys from <paramref name="second" /> is immediately selected and retained.
            </remarks>
            <typeparam name="TSource">The type of the elements in the input sequences.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
            <param name="first">The sequence of potentially included elements.</param>
            <param name="second">The sequence of elements whose keys may prevent elements in
            <paramref name="first" /> from being returned.</param>
            <param name="keySelector">The mapping from source element to key.</param>
            <returns>A sequence of elements from <paramref name="first" /> whose key was not also a key for
            any element in <paramref name="second" />.</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Returns the set of elements in the first sequence which aren't
            in the second sequence, according to a given key selector.
            </summary>
            <remarks>
            This is a set operation; if multiple elements in <paramref name="first" /> have
            equal keys, only the first such element is returned.
            This operator uses deferred execution and streams the results, although
            a set of keys from <paramref name="second" /> is immediately selected and retained.
            </remarks>
            <typeparam name="TSource">The type of the elements in the input sequences.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
            <param name="first">The sequence of potentially included elements.</param>
            <param name="second">The sequence of elements whose keys may prevent elements in
            <paramref name="first" /> from being returned.</param>
            <param name="keySelector">The mapping from source element to key.</param>
            <param name="keyComparer">The equality comparer to use to determine whether or not keys are equal.
            If null, the default equality comparer for <c>TSource</c> is used.</param>
            <returns>A sequence of elements from <paramref name="first" /> whose key was not also a key for
            any element in <paramref name="second" />.</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Exclude``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Excludes a contiguous number of elements from a sequence starting
            at a given index.
            </summary>
            <typeparam name="T">The type of the elements of the sequence</typeparam>
            <param name="sequence">The sequence to exclude elements from</param>
            <param name="startIndex">The zero-based index at which to begin excluding elements</param>
            <param name="count">The number of elements to exclude</param>
            <returns>A sequence that excludes the specified portion of elements</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.FallbackIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns the elements of the specified sequence or the specified
            value in a singleton collection if the sequence is empty.
            </summary>
            <typeparam name="T">The type of the elements in the sequences.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="fallback">The value to return in a singleton
            collection if <paramref name="source" /> is empty.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <paramref name="fallback" />
            if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.
            </returns>
            <example>
                <code><![CDATA[
            var numbers = new[] { 123, 456, 789 };
            var result = numbers.Where(x => x == 100).FallbackIfEmpty(-1).Single();
            ]]></code>
            The <c>result</c> variable will contain <c>-1</c>.
            </example>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.FallbackIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0,``0)">
            <summary>
            Returns the elements of a sequence, but if it is empty then
            returns an alternate sequence of values.
            </summary>
            <typeparam name="T">The type of the elements in the sequences.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="fallback1">First value of the alternate sequence that
            is returned if <paramref name="source" /> is empty.</param>
            <param name="fallback2">Second value of the alternate sequence that
            is returned if <paramref name="source" /> is empty.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that containing fallback values
            if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.FallbackIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0,``0,``0)">
            <summary>
            Returns the elements of a sequence, but if it is empty then
            returns an alternate sequence of values.
            </summary>
            <typeparam name="T">The type of the elements in the sequences.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="fallback1">First value of the alternate sequence that
            is returned if <paramref name="source" /> is empty.</param>
            <param name="fallback2">Second value of the alternate sequence that
            is returned if <paramref name="source" /> is empty.</param>
            <param name="fallback3">Third value of the alternate sequence that
            is returned if <paramref name="source" /> is empty.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that containing fallback values
            if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.FallbackIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0,``0,``0,``0)">
            <summary>
            Returns the elements of a sequence, but if it is empty then
            returns an alternate sequence of values.
            </summary>
            <typeparam name="T">The type of the elements in the sequences.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="fallback1">First value of the alternate sequence that
            is returned if <paramref name="source" /> is empty.</param>
            <param name="fallback2">Second value of the alternate sequence that
            is returned if <paramref name="source" /> is empty.</param>
            <param name="fallback3">Third value of the alternate sequence that
            is returned if <paramref name="source" /> is empty.</param>
            <param name="fallback4">Fourth value of the alternate sequence that
            is returned if <paramref name="source" /> is empty.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that containing fallback values
            if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.FallbackIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Returns the elements of a sequence, but if it is empty then
            returns an alternate sequence from an array of values.
            </summary>
            <typeparam name="T">The type of the elements in the sequences.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="fallback">The array that is returned as the alternate
            sequence if <paramref name="source" /> is empty.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that containing fallback values
            if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.FallbackIfEmpty``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the elements of a sequence, but if it is empty then
            returns an alternate sequence of values.
            </summary>
            <typeparam name="T">The type of the elements in the sequences.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="fallback">The alternate sequence that is returned
            if <paramref name="source" /> is empty.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that containing fallback values
            if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.FillBackward``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a sequence with each null reference or value in the source
            replaced with the following non-null reference or value in
            that sequence.
            </summary>
            <param name="source">The source sequence.</param>
            <typeparam name="T">Type of the elements in the source sequence.</typeparam>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> with null references or values
            replaced.
            </returns>
            <remarks>
            This method uses deferred execution semantics and streams its
            results. If references or values are null at the end of the
            sequence then they remain null.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.FillBackward``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns a sequence with each missing element in the source replaced
            with the following non-missing element in that sequence. An
            additional parameter specifies a function used to determine if an
            element is considered missing or not.
            </summary>
            <param name="source">The source sequence.</param>
            <param name="predicate">The function used to determine if
            an element in the sequence is considered missing.</param>
            <typeparam name="T">Type of the elements in the source sequence.</typeparam>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> with missing values replaced.
            </returns>
            <remarks>
            This method uses deferred execution semantics and streams its
            results. If elements are missing at the end of the sequence then
            they remain missing.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.FillBackward``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``0,``0})">
            <summary>
            Returns a sequence with each missing element in the source replaced
            with the following non-missing element in that sequence. Additional
            parameters specifiy two functions, one used to determine if an
            element is considered missing or not and another to provide the
            replacement for the missing element.
            </summary>
            <param name="source">The source sequence.</param>
            <param name="predicate">The function used to determine if
            an element in the sequence is considered missing.</param>
            <param name="fillSelector">The function used to produce the element
            that will replace the missing one. Its first argument receives the
            current element considered missing while the second argument
            receives the next non-missing element.</param>
            <typeparam name="T">Type of the elements in the source sequence.</typeparam>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> with missing values replaced.
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> with missing elements filled.
            </returns><remarks>
            This method uses deferred execution semantics and streams its
            results. If elements are missing at the end of the sequence then
            they remain missing.
            </remarks></member>
        <member name="M:MoreLinq.MoreEnumerable.FillForward``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a sequence with each null reference or value in the source
            replaced with the previous non-null reference or value seen in
            that sequence.
            </summary>
            <param name="source">The source sequence.</param>
            <typeparam name="T">Type of the elements in the source sequence.</typeparam>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> with null references or values
            replaced.
            </returns>
            <remarks>
            This method uses deferred execution semantics and streams its
            results. If references or values are null at the start of the
            sequence then they remain null.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.FillForward``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns a sequence with each missing element in the source replaced
            with the previous non-missing element seen in that sequence. An
            additional parameter specifies a function used to determine if an
            element is considered missing or not.
            </summary>
            <param name="source">The source sequence.</param>
            <param name="predicate">The function used to determine if
            an element in the sequence is considered missing.</param>
            <typeparam name="T">Type of the elements in the source sequence.</typeparam>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> with missing values replaced.
            </returns>
            <remarks>
            This method uses deferred execution semantics and streams its
            results. If elements are missing at the start of the sequence then
            they remain missing.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.FillForward``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``0,``0})">
            <summary>
            Returns a sequence with each missing element in the source replaced
            with one based on the previous non-missing element seen in that
            sequence. Additional parameters specifiy two functions, one used to
            determine if an element is considered missing or not and another
            to provide the replacement for the missing element.
            </summary>
            <param name="source">The source sequence.</param>
            <param name="predicate">The function used to determine if
            an element in the sequence is considered missing.</param>
            <param name="fillSelector">The function used to produce the element
            that will replace the missing one. Its first argument receives the
            current element considered missing while the second argument
            receives the previous non-missing element.</param>
            <typeparam name="T">Type of the elements in the source sequence.</typeparam>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> with missing values replaced.
            </returns>
            <remarks>
            This method uses deferred execution semantics and streams its
            results. If elements are missing at the start of the sequence then
            they remain missing.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Flatten(System.Collections.IEnumerable)">
            <summary>
            Flattens a sequence containing arbitrarily-nested sequences.
            </summary>
            <param name="source">The sequence that will be flattened.</param>
            <returns>
            A sequence that contains the elements of <paramref name="source" />
            and all nested sequences (except strings).
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null.</exception>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Flatten(System.Collections.IEnumerable,System.Func{System.Collections.IEnumerable,System.Boolean})">
            <summary>
            Flattens a sequence containing arbitrarily-nested sequences. An
            additional parameter specifies a predicate function used to
            determine whether a nested <see cref="T:System.Collections.IEnumerable" /> should be
            flattened or not.
            </summary>
            <param name="source">The sequence that will be flattened.</param>
            <param name="predicate">
            A function that receives each element that implements
            <see cref="T:System.Collections.IEnumerable" /> and indicates if its elements should be
            recursively flattened into the resulting sequence.
            </param>
            <returns>
            A sequence that contains the elements of <paramref name="source" />
            and all nested sequences for which the predicate function
            returned <c>true</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="predicate" /> is <c>null</c>.</exception>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Flatten(System.Collections.IEnumerable,System.Func{System.Object,System.Collections.IEnumerable})">
            <summary>
            Flattens a sequence containing arbitrarily-nested sequences. An
            additional parameter specifies a function that projects an inner
            sequence via a property of an object.
            </summary>
            <param name="source">The sequence that will be flattened.</param>
            <param name="selector">
            A function that receives each element of the sequence as an object
            and projects an inner sequence to be flattened. If the function
            returns <c>null</c> then the object argument is considered a leaf
            of the flattening process.
            </param>
            <returns>
            A sequence that contains the elements of <paramref name="source" />
            and all nested sequences projected via the
            <paramref name="selector" /> function.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="selector" /> is <c>null</c>.</exception>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the result of applying a function to a sequence of
            1 element.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers
            as many items of the source sequence as necessary.
            </remarks>
            <typeparam name="T">Type of element in the source sequence</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="source">The sequence of items to fold.</param>
            <param name="folder">Function to apply to the elements in the sequence.</param>
            <returns>The folded value returned by <paramref name="folder" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="folder" /> is null</exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="source" /> does not contain exactly 1 element</exception>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``1})">
            <summary>
            Returns the result of applying a function to a sequence of
            2 elements.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers
            as many items of the source sequence as necessary.
            </remarks>
            <typeparam name="T">Type of element in the source sequence</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="source">The sequence of items to fold.</param>
            <param name="folder">Function to apply to the elements in the sequence.</param>
            <returns>The folded value returned by <paramref name="folder" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="folder" /> is null</exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="source" /> does not contain exactly 2 elements</exception>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``1})">
            <summary>
            Returns the result of applying a function to a sequence of
            3 elements.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers
            as many items of the source sequence as necessary.
            </remarks>
            <typeparam name="T">Type of element in the source sequence</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="source">The sequence of items to fold.</param>
            <param name="folder">Function to apply to the elements in the sequence.</param>
            <returns>The folded value returned by <paramref name="folder" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="folder" /> is null</exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="source" /> does not contain exactly 3 elements</exception>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``1})">
            <summary>
            Returns the result of applying a function to a sequence of
            4 elements.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers
            as many items of the source sequence as necessary.
            </remarks>
            <typeparam name="T">Type of element in the source sequence</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="source">The sequence of items to fold.</param>
            <param name="folder">Function to apply to the elements in the sequence.</param>
            <returns>The folded value returned by <paramref name="folder" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="folder" /> is null</exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="source" /> does not contain exactly 4 elements</exception>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``0,``1})">
            <summary>
            Returns the result of applying a function to a sequence of
            5 elements.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers
            as many items of the source sequence as necessary.
            </remarks>
            <typeparam name="T">Type of element in the source sequence</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="source">The sequence of items to fold.</param>
            <param name="folder">Function to apply to the elements in the sequence.</param>
            <returns>The folded value returned by <paramref name="folder" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="folder" /> is null</exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="source" /> does not contain exactly 5 elements</exception>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``0,``0,``1})">
            <summary>
            Returns the result of applying a function to a sequence of
            6 elements.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers
            as many items of the source sequence as necessary.
            </remarks>
            <typeparam name="T">Type of element in the source sequence</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="source">The sequence of items to fold.</param>
            <param name="folder">Function to apply to the elements in the sequence.</param>
            <returns>The folded value returned by <paramref name="folder" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="folder" /> is null</exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="source" /> does not contain exactly 6 elements</exception>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``0,``0,``0,``1})">
            <summary>
            Returns the result of applying a function to a sequence of
            7 elements.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers
            as many items of the source sequence as necessary.
            </remarks>
            <typeparam name="T">Type of element in the source sequence</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="source">The sequence of items to fold.</param>
            <param name="folder">Function to apply to the elements in the sequence.</param>
            <returns>The folded value returned by <paramref name="folder" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="folder" /> is null</exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="source" /> does not contain exactly 7 elements</exception>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``1})">
            <summary>
            Returns the result of applying a function to a sequence of
            8 elements.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers
            as many items of the source sequence as necessary.
            </remarks>
            <typeparam name="T">Type of element in the source sequence</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="source">The sequence of items to fold.</param>
            <param name="folder">Function to apply to the elements in the sequence.</param>
            <returns>The folded value returned by <paramref name="folder" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="folder" /> is null</exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="source" /> does not contain exactly 8 elements</exception>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``1})">
            <summary>
            Returns the result of applying a function to a sequence of
            9 elements.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers
            as many items of the source sequence as necessary.
            </remarks>
            <typeparam name="T">Type of element in the source sequence</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="source">The sequence of items to fold.</param>
            <param name="folder">Function to apply to the elements in the sequence.</param>
            <returns>The folded value returned by <paramref name="folder" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="folder" /> is null</exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="source" /> does not contain exactly 9 elements</exception>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``1})">
            <summary>
            Returns the result of applying a function to a sequence of
            10 elements.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers
            as many items of the source sequence as necessary.
            </remarks>
            <typeparam name="T">Type of element in the source sequence</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="source">The sequence of items to fold.</param>
            <param name="folder">Function to apply to the elements in the sequence.</param>
            <returns>The folded value returned by <paramref name="folder" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="folder" /> is null</exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="source" /> does not contain exactly 10 elements</exception>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``1})">
            <summary>
            Returns the result of applying a function to a sequence of
            11 elements.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers
            as many items of the source sequence as necessary.
            </remarks>
            <typeparam name="T">Type of element in the source sequence</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="source">The sequence of items to fold.</param>
            <param name="folder">Function to apply to the elements in the sequence.</param>
            <returns>The folded value returned by <paramref name="folder" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="folder" /> is null</exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="source" /> does not contain exactly 11 elements</exception>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``1})">
            <summary>
            Returns the result of applying a function to a sequence of
            12 elements.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers
            as many items of the source sequence as necessary.
            </remarks>
            <typeparam name="T">Type of element in the source sequence</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="source">The sequence of items to fold.</param>
            <param name="folder">Function to apply to the elements in the sequence.</param>
            <returns>The folded value returned by <paramref name="folder" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="folder" /> is null</exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="source" /> does not contain exactly 12 elements</exception>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``1})">
            <summary>
            Returns the result of applying a function to a sequence of
            13 elements.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers
            as many items of the source sequence as necessary.
            </remarks>
            <typeparam name="T">Type of element in the source sequence</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="source">The sequence of items to fold.</param>
            <param name="folder">Function to apply to the elements in the sequence.</param>
            <returns>The folded value returned by <paramref name="folder" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="folder" /> is null</exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="source" /> does not contain exactly 13 elements</exception>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``1})">
            <summary>
            Returns the result of applying a function to a sequence of
            14 elements.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers
            as many items of the source sequence as necessary.
            </remarks>
            <typeparam name="T">Type of element in the source sequence</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="source">The sequence of items to fold.</param>
            <param name="folder">Function to apply to the elements in the sequence.</param>
            <returns>The folded value returned by <paramref name="folder" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="folder" /> is null</exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="source" /> does not contain exactly 14 elements</exception>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``1})">
            <summary>
            Returns the result of applying a function to a sequence of
            15 elements.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers
            as many items of the source sequence as necessary.
            </remarks>
            <typeparam name="T">Type of element in the source sequence</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="source">The sequence of items to fold.</param>
            <param name="folder">Function to apply to the elements in the sequence.</param>
            <returns>The folded value returned by <paramref name="folder" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="folder" /> is null</exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="source" /> does not contain exactly 15 elements</exception>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``1})">
            <summary>
            Returns the result of applying a function to a sequence of
            16 elements.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers
            as many items of the source sequence as necessary.
            </remarks>
            <typeparam name="T">Type of element in the source sequence</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="source">The sequence of items to fold.</param>
            <param name="folder">Function to apply to the elements in the sequence.</param>
            <returns>The folded value returned by <paramref name="folder" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="folder" /> is null</exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="source" /> does not contain exactly 16 elements</exception>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Immediately executes the given action on each element in the source sequence.
            </summary>
            <typeparam name="T">The type of the elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="action">The action to execute on each element</param>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Immediately executes the given action on each element in the source sequence.
            Each element's index is used in the logic of the action.
            </summary>
            <typeparam name="T">The type of the elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="action">The action to execute on each element; the second parameter
            of the action represents the index of the source element.</param>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.From``1(System.Func{``0})">
            <summary>
            Returns a single-element sequence containing the result of invoking the function.
            </summary>
            <remarks>
            This operator uses deferred execution and streams the results.
            If the resulting sequence is enumerated multiple times, the function will be
            invoked multiple times too.
            </remarks>
            <typeparam name="T">The type of the object returned by the function.</typeparam>
            <param name="function">The function to evaluate.</param>
            <returns>A sequence with the value resulting from invoking <paramref name="function" />.</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.From``1(System.Func{``0},System.Func{``0})">
            <summary>
            Returns a sequence containing the result of invoking each parameter function in order.
            </summary>
            <remarks>
            This operator uses deferred execution and streams the results.
            If the resulting sequence is enumerated multiple times, the functions will be
            invoked multiple times too.
            </remarks>
            <typeparam name="T">The type of the object returned by the functions.</typeparam>
            <param name="function1">The first function to evaluate.</param>
            <param name="function2">The second function to evaluate.</param>
            <returns>A sequence with the values resulting from invoking <paramref name="function1" /> and <paramref name="function2" />.</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.From``1(System.Func{``0},System.Func{``0},System.Func{``0})">
            <summary>
            Returns a sequence containing the result of invoking each parameter function in order.
            </summary>
            <remarks>
            This operator uses deferred execution and streams the results.
            If the resulting sequence is enumerated multiple times, the functions will be
            invoked multiple times too.
            </remarks>
            <typeparam name="T">The type of the object returned by the functions.</typeparam>
            <param name="function1">The first function to evaluate.</param>
            <param name="function2">The second function to evaluate.</param>
            <param name="function3">The third function to evaluate.</param>
            <returns>A sequence with the values resulting from invoking <paramref name="function1" />, <paramref name="function2" /> and <paramref name="function3" />.</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.From``1(System.Func{``0}[])">
            <summary>
            Returns a sequence containing the values resulting from invoking (in order) each function in the source sequence of functions.
            </summary>
            <remarks>
            This operator uses deferred execution and streams the results.
            If the resulting sequence is enumerated multiple times, the functions will be
            invoked multiple times too.
            </remarks>
            <typeparam name="T">The type of the object returned by the functions.</typeparam>
            <param name="functions">The functions to evaluate.</param>
            <returns>A sequence with the values resulting from invoking all of the <paramref name="functions" />.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="functions" /> is <c>null</c>.</exception>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.FullGroupJoin``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2})">
            <summary>
            Performs a Full Group Join between the <paramref name="first" /> and <paramref name="second" /> sequences.
            </summary>
            <remarks>
            This operator uses deferred execution and streams the results.
            The results are yielded in the order of the elements found in the first sequence
            followed by those found only in the second. In addition, the callback responsible
            for projecting the results is supplied with sequences which preserve their source order.
            </remarks>
            <typeparam name="TFirst">The type of the elements in the first input sequence</typeparam>
            <typeparam name="TSecond">The type of the elements in the second input sequence</typeparam>
            <typeparam name="TKey">The type of the key to use to join</typeparam>
            <param name="first">First sequence</param>
            <param name="second">Second sequence</param>
            <param name="firstKeySelector">The mapping from first sequence to key</param>
            <param name="secondKeySelector">The mapping from second sequence to key</param>
            <returns>A sequence of elements joined from <paramref name="first" /> and <paramref name="second" />.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.FullGroupJoin``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Performs a Full Group Join between the <paramref name="first" /> and <paramref name="second" /> sequences.
            </summary>
            <remarks>
            This operator uses deferred execution and streams the results.
            The results are yielded in the order of the elements found in the first sequence
            followed by those found only in the second. In addition, the callback responsible
            for projecting the results is supplied with sequences which preserve their source order.
            </remarks>
            <typeparam name="TFirst">The type of the elements in the first input sequence</typeparam>
            <typeparam name="TSecond">The type of the elements in the second input sequence</typeparam>
            <typeparam name="TKey">The type of the key to use to join</typeparam>
            <param name="first">First sequence</param>
            <param name="second">Second sequence</param>
            <param name="firstKeySelector">The mapping from first sequence to key</param>
            <param name="secondKeySelector">The mapping from second sequence to key</param>
            <param name="comparer">The equality comparer to use to determine whether or not keys are equal.
            If null, the default equality comparer for <c>TKey</c> is used.</param>
            <returns>A sequence of elements joined from <paramref name="first" /> and <paramref name="second" />.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.FullGroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``2,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},``3})">
            <summary>
            Performs a full group-join between two sequences.
            </summary>
            <remarks>
            This operator uses deferred execution and streams the results.
            The results are yielded in the order of the elements found in the first sequence
            followed by those found only in the second. In addition, the callback responsible
            for projecting the results is supplied with sequences which preserve their source order.
            </remarks>
            <typeparam name="TFirst">The type of the elements in the first input sequence</typeparam>
            <typeparam name="TSecond">The type of the elements in the second input sequence</typeparam>
            <typeparam name="TKey">The type of the key to use to join</typeparam>
            <typeparam name="TResult">The type of the elements of the resulting sequence</typeparam>
            <param name="first">First sequence</param>
            <param name="second">Second sequence</param>
            <param name="firstKeySelector">The mapping from first sequence to key</param>
            <param name="secondKeySelector">The mapping from second sequence to key</param>
            <param name="resultSelector">Function to apply to each pair of elements plus the key</param>
            <returns>A sequence of elements joined from <paramref name="first" /> and <paramref name="second" />.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.FullGroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``2,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Performs a full group-join between two sequences.
            </summary>
            <remarks>
            This operator uses deferred execution and streams the results.
            The results are yielded in the order of the elements found in the first sequence
            followed by those found only in the second. In addition, the callback responsible
            for projecting the results is supplied with sequences which preserve their source order.
            </remarks>
            <typeparam name="TFirst">The type of the elements in the first input sequence</typeparam>
            <typeparam name="TSecond">The type of the elements in the second input sequence</typeparam>
            <typeparam name="TKey">The type of the key to use to join</typeparam>
            <typeparam name="TResult">The type of the elements of the resulting sequence</typeparam>
            <param name="first">First sequence</param>
            <param name="second">Second sequence</param>
            <param name="firstKeySelector">The mapping from first sequence to key</param>
            <param name="secondKeySelector">The mapping from second sequence to key</param>
            <param name="resultSelector">Function to apply to each pair of elements plus the key</param>
            <param name="comparer">The equality comparer to use to determine whether or not keys are equal.
            If null, the default equality comparer for <c>TKey</c> is used.</param>
            <returns>A sequence of elements joined from <paramref name="first" /> and <paramref name="second" />.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.FullJoin``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``2},System.Func{``0,``0,``2})">
            <summary>
            Performs a full outer join on two homogeneous sequences.
            Additional arguments specify key selection functions and result
            projection functions.
            </summary>
            <typeparam name="TSource">
            The type of elements in the source sequence.</typeparam>
            <typeparam name="TKey">
            The type of the key returned by the key selector function.</typeparam>
            <typeparam name="TResult">
            The type of the result elements.</typeparam>
            <param name="first">
            The first sequence to join fully.</param>
            <param name="second">
            The second sequence to join fully.</param>
            <param name="keySelector">
            Function that projects the key given an element of one of the
            sequences to join.</param>
            <param name="firstSelector">
            Function that projects the result given just an element from
            <paramref name="first" /> where there is no corresponding element
            in <paramref name="second" />.</param>
            <param name="secondSelector">
            Function that projects the result given just an element from
            <paramref name="second" /> where there is no corresponding element
            in <paramref name="first" />.</param>
            <param name="bothSelector">
            Function that projects the result given an element from
            <paramref name="first" /> and an element from <paramref name="second" />
            that match on a common key.</param>
            <returns>A sequence containing results projected from a full
            outer join of the two input sequences.</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.FullJoin``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``2},System.Func{``0,``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Performs a full outer join on two homogeneous sequences.
            Additional arguments specify key selection functions, result
            projection functions and a key comparer.
            </summary>
            <typeparam name="TSource">
            The type of elements in the source sequence.</typeparam>
            <typeparam name="TKey">
            The type of the key returned by the key selector function.</typeparam>
            <typeparam name="TResult">
            The type of the result elements.</typeparam>
            <param name="first">
            The first sequence to join fully.</param>
            <param name="second">
            The second sequence to join fully.</param>
            <param name="keySelector">
            Function that projects the key given an element of one of the
            sequences to join.</param>
            <param name="firstSelector">
            Function that projects the result given just an element from
            <paramref name="first" /> where there is no corresponding element
            in <paramref name="second" />.</param>
            <param name="secondSelector">
            Function that projects the result given just an element from
            <paramref name="second" /> where there is no corresponding element
            in <paramref name="first" />.</param>
            <param name="bothSelector">
            Function that projects the result given an element from
            <paramref name="first" /> and an element from <paramref name="second" />
            that match on a common key.</param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> instance used to compare
            keys for equality.</param>
            <returns>A sequence containing results projected from a full
            outer join of the two input sequences.</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.FullJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``3},System.Func{``1,``3},System.Func{``0,``1,``3})">
            <summary>
            Performs a full outer join on two heterogeneous sequences.
            Additional arguments specify key selection functions and result
            projection functions.
            </summary>
            <typeparam name="TFirst">
            The type of elements in the first sequence.</typeparam>
            <typeparam name="TSecond">
            The type of elements in the second sequence.</typeparam>
            <typeparam name="TKey">
            The type of the key returned by the key selector functions.</typeparam>
            <typeparam name="TResult">
            The type of the result elements.</typeparam>
            <param name="first">
            The first sequence to join fully.</param>
            <param name="second">
            The second sequence to join fully.</param>
            <param name="firstKeySelector">
            Function that projects the key given an element from <paramref name="first" />.</param>
            <param name="secondKeySelector">
            Function that projects the key given an element from <paramref name="second" />.</param>
            <param name="firstSelector">
            Function that projects the result given just an element from
            <paramref name="first" /> where there is no corresponding element
            in <paramref name="second" />.</param>
            <param name="secondSelector">
            Function that projects the result given just an element from
            <paramref name="second" /> where there is no corresponding element
            in <paramref name="first" />.</param>
            <param name="bothSelector">
            Function that projects the result given an element from
            <paramref name="first" /> and an element from <paramref name="second" />
            that match on a common key.</param>
            <returns>A sequence containing results projected from a full
            outer join of the two input sequences.</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.FullJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``3},System.Func{``1,``3},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Performs a full outer join on two heterogeneous sequences.
            Additional arguments specify key selection functions, result
            projection functions and a key comparer.
            </summary>
            <typeparam name="TFirst">
            The type of elements in the first sequence.</typeparam>
            <typeparam name="TSecond">
            The type of elements in the second sequence.</typeparam>
            <typeparam name="TKey">
            The type of the key returned by the key selector functions.</typeparam>
            <typeparam name="TResult">
            The type of the result elements.</typeparam>
            <param name="first">
            The first sequence to join fully.</param>
            <param name="second">
            The second sequence to join fully.</param>
            <param name="firstKeySelector">
            Function that projects the key given an element from <paramref name="first" />.</param>
            <param name="secondKeySelector">
            Function that projects the key given an element from <paramref name="second" />.</param>
            <param name="firstSelector">
            Function that projects the result given just an element from
            <paramref name="first" /> where there is no corresponding element
            in <paramref name="second" />.</param>
            <param name="secondSelector">
            Function that projects the result given just an element from
            <paramref name="second" /> where there is no corresponding element
            in <paramref name="first" />.</param>
            <param name="bothSelector">
            Function that projects the result given an element from
            <paramref name="first" /> and an element from <paramref name="second" />
            that match on a common key.</param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> instance used to compare
            keys for equality.</param>
            <returns>A sequence containing results projected from a full
            outer join of the two input sequences.</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Generate``1(``0,System.Func{``0,``0})">
            <summary>
            Returns a sequence of values consecutively generated by a generator function.
            </summary>
            <typeparam name="TResult">Type of elements to generate.</typeparam>
            <param name="initial">Value of first element in sequence</param>
            <param name="generator">
            Generator function which takes the previous series element and uses it to generate the next element.
            </param>
            <returns>A sequence containing the generated values.</returns>
            <remarks>
            This function defers element generation until needed and streams the results.
            </remarks>
            <example>
                <code><![CDATA[
            var result = MoreEnumerable.Generate(2, n => n * n).Take(5);
            ]]></code>
            The <c>result</c> variable, when iterated over, will yield 2, 4, 16, 256, and 65536, in turn.
            </example>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.GenerateByIndex``1(System.Func{System.Int32,``0})">
            <summary>
            Returns a sequence of values based on indexes.
            </summary>
            <typeparam name="TResult">
            The type of the value returned by <paramref name="generator" />
            and therefore the elements of the generated sequence.</typeparam>
            <param name="generator">
            Generation function to apply to each index.</param>
            <returns>A sequence of generated results.</returns>
            <remarks>
                <para>
            The sequence is (practically) infinite where the index ranges from
            zero to <see cref="F:System.Int32.MaxValue" /> inclusive.</para>
                <para>
            This function defers execution and streams the results.</para>
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.GroupAdjacent``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Groups the adjacent elements of a sequence according to a
            specified key selector function.
            </summary>
            <typeparam name="TSource">The type of the elements of
            <paramref name="source" />.</typeparam>
            <typeparam name="TKey">The type of the key returned by
            <paramref name="keySelector" />.</typeparam>
            <param name="source">A sequence whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each
            element.</param>
            <returns>A sequence of groupings where each grouping
            (<see cref="T:System.Linq.IGrouping`2" />) contains the key
            and the adjacent elements in the same order as found in the
            source sequence.</returns>
            <remarks>
            This method is implemented by using deferred execution and
            streams the groupings. The grouping elements, however, are
            buffered. Each grouping is therefore yielded as soon as it
            is complete and before the next grouping occurs.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.GroupAdjacent``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the adjacent elements of a sequence according to a
            specified key selector function and compares the keys by using a
            specified comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of
            <paramref name="source" />.</typeparam>
            <typeparam name="TKey">The type of the key returned by
            <paramref name="keySelector" />.</typeparam>
            <param name="source">A sequence whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each
            element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to
            compare keys.</param>
            <returns>A sequence of groupings where each grouping
            (<see cref="T:System.Linq.IGrouping`2" />) contains the key
            and the adjacent elements in the same order as found in the
            source sequence.</returns>
            <remarks>
            This method is implemented by using deferred execution and
            streams the groupings. The grouping elements, however, are
            buffered. Each grouping is therefore yielded as soon as it
            is complete and before the next grouping occurs.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.GroupAdjacent``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Groups the adjacent elements of a sequence according to a
            specified key selector function and projects the elements for
            each group by using a specified function.
            </summary>
            <typeparam name="TSource">The type of the elements of
            <paramref name="source" />.</typeparam>
            <typeparam name="TKey">The type of the key returned by
            <paramref name="keySelector" />.</typeparam>
            <typeparam name="TElement">The type of the elements in the
            resulting groupings.</typeparam>
            <param name="source">A sequence whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each
            element.</param>
            <param name="elementSelector">A function to map each source
            element to an element in the resulting grouping.</param>
            <returns>A sequence of groupings where each grouping
            (<see cref="T:System.Linq.IGrouping`2" />) contains the key
            and the adjacent elements (of type <typeparamref name="TElement" />)
            in the same order as found in the source sequence.</returns>
            <remarks>
            This method is implemented by using deferred execution and
            streams the groupings. The grouping elements, however, are
            buffered. Each grouping is therefore yielded as soon as it
            is complete and before the next grouping occurs.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.GroupAdjacent``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the adjacent elements of a sequence according to a
            specified key selector function. The keys are compared by using
            a comparer and each group's elements are projected by using a
            specified function.
            </summary>
            <typeparam name="TSource">The type of the elements of
            <paramref name="source" />.</typeparam>
            <typeparam name="TKey">The type of the key returned by
            <paramref name="keySelector" />.</typeparam>
            <typeparam name="TElement">The type of the elements in the
            resulting groupings.</typeparam>
            <param name="source">A sequence whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each
            element.</param>
            <param name="elementSelector">A function to map each source
            element to an element in the resulting grouping.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to
            compare keys.</param>
            <returns>A sequence of groupings where each grouping
            (<see cref="T:System.Linq.IGrouping`2" />) contains the key
            and the adjacent elements (of type <typeparamref name="TElement" />)
            in the same order as found in the source sequence.</returns>
            <remarks>
            This method is implemented by using deferred execution and
            streams the groupings. The grouping elements, however, are
            buffered. Each grouping is therefore yielded as soon as it
            is complete and before the next grouping occurs.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.GroupAdjacent``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
            <summary>
            Groups the adjacent elements of a sequence according to a
            specified key selector function. The keys are compared by using
            a comparer and each group's elements are projected by using a
            specified function.
            </summary>
            <typeparam name="TSource">The type of the elements of
            <paramref name="source" />.</typeparam>
            <typeparam name="TKey">The type of the key returned by
            <paramref name="keySelector" />.</typeparam>
            <typeparam name="TResult">The type of the elements in the
            resulting sequence.</typeparam>
            <param name="source">A sequence whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each
            element.</param>
            <param name="resultSelector">A function to map each key and
            associated source elements to a result object.</param>
            <returns>A collection of elements of type
            <typeparamref name="TResult" /> where each element represents
            a projection over a group and its key.</returns>
            <remarks>
            This method is implemented by using deferred execution and
            streams the groupings. The grouping elements, however, are
            buffered. Each grouping is therefore yielded as soon as it
            is complete and before the next grouping occurs.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.GroupAdjacent``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the adjacent elements of a sequence according to a
            specified key selector function. The keys are compared by using
            a comparer and each group's elements are projected by using a
            specified function.
            </summary>
            <typeparam name="TSource">The type of the elements of
            <paramref name="source" />.</typeparam>
            <typeparam name="TKey">The type of the key returned by
            <paramref name="keySelector" />.</typeparam>
            <typeparam name="TResult">The type of the elements in the
            resulting sequence.</typeparam>
            <param name="source">A sequence whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each
            element.</param>
            <param name="resultSelector">A function to map each key and
            associated source elements to a result object.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to
            compare keys.</param>
            <returns>A collection of elements of type
            <typeparamref name="TResult" /> where each element represents
            a projection over a group and its key.</returns>
            <remarks>
            This method is implemented by using deferred execution and
            streams the groupings. The grouping elements, however, are
            buffered. Each grouping is therefore yielded as soon as it
            is complete and before the next grouping occurs.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Index``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2" />
            where the key is the zero-based index of the value in the source
            sequence.
            </summary>
            <typeparam name="TSource">Type of elements in <paramref name="source" /> sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <returns>A sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2" />.</returns>
            <remarks>This operator uses deferred execution and streams its
            results.</remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Index``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns a sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2" />
            where the key is the index of the value in the source sequence.
            An additional parameter specifies the starting index.
            </summary>
            <typeparam name="TSource">Type of elements in <paramref name="source" /> sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="startIndex" />
            <returns>A sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2" />.</returns>
            <remarks>This operator uses deferred execution and streams its
            results.</remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.IndexBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Applies a key-generating function to each element of a sequence and
            returns a sequence that contains the elements of the original
            sequence as well its key and index inside the group of its key.
            </summary>
            <typeparam name="TSource">Type of the source sequence elements.</typeparam>
            <typeparam name="TKey">Type of the projected key.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="keySelector">
            Function that projects the key given an element in the source sequence.</param>
            <returns>
            A sequence of elements paired with their index within the key-group.
            The index is the key and the element is the value of the pair.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.IndexBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Applies a key-generating function to each element of a sequence and
            returns a sequence that contains the elements of the original
            sequence as well its key and index inside the group of its key.
            An additional parameter specifies a comparer to use for testing the
            equivalence of keys.
            </summary>
            <typeparam name="TSource">Type of the source sequence elements.</typeparam>
            <typeparam name="TKey">Type of the projected key.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="keySelector">
            Function that projects the key given an element in the source sequence.</param>
            <param name="comparer">
            The equality comparer to use to determine whether or not keys are
            equal. If <c>null</c>, the default equality comparer for
            <typeparamref name="TSource" /> is used.</param>
            <returns>
            A sequence of elements paired with their index within the key-group.
            The index is the key and the element is the value of the pair.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Insert``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Inserts the elements of a sequence into another sequence at a
            specified index.
            </summary>
            <typeparam name="T">Type of the elements of the source sequence.</typeparam>
            <param name="first">The source sequence.</param>
            <param name="second">The sequence that will be inserted.</param>
            <param name="index">
            The zero-based index at which to insert elements from
            <paramref name="second" />.</param>
            <returns>
            A sequence that contains the elements of <paramref name="first" />
            plus the elements of <paramref name="second" /> inserted at
            the given index.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="first" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="second" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="index" /> is negative.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown lazily if <paramref name="index" /> is greater than the
            length of <paramref name="first" />. The validation occurs when
            yielding the next element after having iterated
            <paramref name="first" /> entirely.
            </exception>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Interleave``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Interleaves the elements of two or more sequences into a single sequence, skipping sequences as they are consumed
            </summary>
            <remarks>
            Interleave combines sequences by visiting each in turn, and returning the first element of each, followed
            by the second, then the third, and so on. So, for example:<br /><code><![CDATA[
            {1,1,1}.Interleave( {2,2,2}, {3,3,3} ) => { 1,2,3,1,2,3,1,2,3 }
            ]]></code>
            This operator behaves in a deferred and streaming manner.<br />
            When sequences are of unequal length, this method will skip those sequences that have been fully consumed
            and continue interleaving the remaining sequences.<br />
            The sequences are interleaved in the order that they appear in the <paramref name="otherSequences" />
            collection, with <paramref name="sequence" /> as the first sequence.
            </remarks>
            <typeparam name="T">The type of the elements of the source sequences</typeparam>
            <param name="sequence">The first sequence in the interleave group</param>
            <param name="otherSequences">The other sequences in the interleave group</param>
            <returns>A sequence of interleaved elements from all of the source sequences</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Lag``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,``0,``1})">
            <summary>
            Produces a projection of a sequence by evaluating pairs of elements separated by a negative offset.
            </summary>
            <remarks>
            This operator evaluates in a deferred and streaming manner.<br />
            For elements prior to the lag offset, <c>default(T)</c> is used as the lagged value.<br /></remarks>
            <typeparam name="TSource">The type of the elements of the source sequence</typeparam>
            <typeparam name="TResult">The type of the elements of the result sequence</typeparam>
            <param name="source">The sequence over which to evaluate lag</param>
            <param name="offset">The offset (expressed as a positive number) by which to lag each value of the sequence</param>
            <param name="resultSelector">A projection function which accepts the current and lagged items (in that order) and returns a result</param>
            <returns>A sequence produced by projecting each element of the sequence with its lagged pairing</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Lag``2(System.Collections.Generic.IEnumerable{``0},System.Int32,``0,System.Func{``0,``0,``1})">
            <summary>
            Produces a projection of a sequence by evaluating pairs of elements separated by a negative offset.
            </summary>
            <remarks>
            This operator evaluates in a deferred and streaming manner.<br /></remarks>
            <typeparam name="TSource">The type of the elements of the source sequence</typeparam>
            <typeparam name="TResult">The type of the elements of the result sequence</typeparam>
            <param name="source">The sequence over which to evaluate lag</param>
            <param name="offset">The offset (expressed as a positive number) by which to lag each value of the sequence</param>
            <param name="defaultLagValue">A default value supplied for the lagged value prior to the lag offset</param>
            <param name="resultSelector">A projection function which accepts the current and lagged items (in that order) and returns a result</param>
            <returns>A sequence produced by projecting each element of the sequence with its lagged pairing</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Lead``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,``0,``1})">
            <summary>
            Produces a projection of a sequence by evaluating pairs of elements separated by a positive offset.
            </summary>
            <remarks>
            This operator evaluates in a deferred and streaming manner.<br />
            For elements of the sequence that are less than <paramref name="offset" /> items from the end,
            default(T) is used as the lead value.<br /></remarks>
            <typeparam name="TSource">The type of the elements in the source sequence</typeparam>
            <typeparam name="TResult">The type of the elements in the result sequence</typeparam>
            <param name="source">The sequence over which to evaluate Lead</param>
            <param name="offset">The offset (expressed as a positive number) by which to lead each element of the sequence</param>
            <param name="resultSelector">A projection function which accepts the current and subsequent (lead) element (in that order) and produces a result</param>
            <returns>A sequence produced by projecting each element of the sequence with its lead pairing</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Lead``2(System.Collections.Generic.IEnumerable{``0},System.Int32,``0,System.Func{``0,``0,``1})">
            <summary>
            Produces a projection of a sequence by evaluating pairs of elements separated by a positive offset.
            </summary>
            <remarks>
            This operator evaluates in a deferred and streaming manner.<br /></remarks>
            <typeparam name="TSource">The type of the elements in the source sequence</typeparam>
            <typeparam name="TResult">The type of the elements in the result sequence</typeparam>
            <param name="source">The sequence over which to evaluate Lead</param>
            <param name="offset">The offset (expressed as a positive number) by which to lead each element of the sequence</param>
            <param name="defaultLeadValue">A default value supplied for the leading element when none is available</param>
            <param name="resultSelector">A projection function which accepts the current and subsequent (lead) element (in that order) and produces a result</param>
            <returns>A sequence produced by projecting each element of the sequence with its lead pairing</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.LeftJoin``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``0,``2})">
            <summary>
            Performs a left outer join on two homogeneous sequences.
            Additional arguments specify key selection functions and result
            projection functions.
            </summary>
            <typeparam name="TSource">
            The type of elements in the source sequence.</typeparam>
            <typeparam name="TKey">
            The type of the key returned by the key selector function.</typeparam>
            <typeparam name="TResult">
            The type of the result elements.</typeparam>
            <param name="first">
            The first sequence of the join operation.</param>
            <param name="second">
            The second sequence of the join operation.</param>
            <param name="keySelector">
            Function that projects the key given an element of one of the
            sequences to join.</param>
            <param name="firstSelector">
            Function that projects the result given just an element from
            <paramref name="first" /> where there is no corresponding element
            in <paramref name="second" />.</param>
            <param name="bothSelector">
            Function that projects the result given an element from
            <paramref name="first" /> and an element from <paramref name="second" />
            that match on a common key.</param>
            <returns>A sequence containing results projected from a left
            outer join of the two input sequences.</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.LeftJoin``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Performs a left outer join on two homogeneous sequences.
            Additional arguments specify key selection functions, result
            projection functions and a key comparer.
            </summary>
            <typeparam name="TSource">
            The type of elements in the source sequence.</typeparam>
            <typeparam name="TKey">
            The type of the key returned by the key selector function.</typeparam>
            <typeparam name="TResult">
            The type of the result elements.</typeparam>
            <param name="first">
            The first sequence of the join operation.</param>
            <param name="second">
            The second sequence of the join operation.</param>
            <param name="keySelector">
            Function that projects the key given an element of one of the
            sequences to join.</param>
            <param name="firstSelector">
            Function that projects the result given just an element from
            <paramref name="first" /> where there is no corresponding element
            in <paramref name="second" />.</param>
            <param name="bothSelector">
            Function that projects the result given an element from
            <paramref name="first" /> and an element from <paramref name="second" />
            that match on a common key.</param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> instance used to compare
            keys for equality.</param>
            <returns>A sequence containing results projected from a left
            outer join of the two input sequences.</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.LeftJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``3},System.Func{``0,``1,``3})">
            <summary>
            Performs a left outer join on two heterogeneous sequences.
            Additional arguments specify key selection functions and result
            projection functions.
            </summary>
            <typeparam name="TFirst">
            The type of elements in the first sequence.</typeparam>
            <typeparam name="TSecond">
            The type of elements in the second sequence.</typeparam>
            <typeparam name="TKey">
            The type of the key returned by the key selector functions.</typeparam>
            <typeparam name="TResult">
            The type of the result elements.</typeparam>
            <param name="first">
            The first sequence of the join operation.</param>
            <param name="second">
            The second sequence of the join operation.</param>
            <param name="firstKeySelector">
            Function that projects the key given an element from <paramref name="first" />.</param>
            <param name="secondKeySelector">
            Function that projects the key given an element from <paramref name="second" />.</param>
            <param name="firstSelector">
            Function that projects the result given just an element from
            <paramref name="first" /> where there is no corresponding element
            in <paramref name="second" />.</param>
            <param name="bothSelector">
            Function that projects the result given an element from
            <paramref name="first" /> and an element from <paramref name="second" />
            that match on a common key.</param>
            <returns>A sequence containing results projected from a left
            outer join of the two input sequences.</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.LeftJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``3},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Performs a left outer join on two heterogeneous sequences.
            Additional arguments specify key selection functions, result
            projection functions and a key comparer.
            </summary>
            <typeparam name="TFirst">
            The type of elements in the first sequence.</typeparam>
            <typeparam name="TSecond">
            The type of elements in the second sequence.</typeparam>
            <typeparam name="TKey">
            The type of the key returned by the key selector functions.</typeparam>
            <typeparam name="TResult">
            The type of the result elements.</typeparam>
            <param name="first">
            The first sequence of the join operation.</param>
            <param name="second">
            The second sequence of the join operation.</param>
            <param name="firstKeySelector">
            Function that projects the key given an element from <paramref name="first" />.</param>
            <param name="secondKeySelector">
            Function that projects the key given an element from <paramref name="second" />.</param>
            <param name="firstSelector">
            Function that projects the result given just an element from
            <paramref name="first" /> where there is no corresponding element
            in <paramref name="second" />.</param>
            <param name="bothSelector">
            Function that projects the result given an element from
            <paramref name="first" /> and an element from <paramref name="second" />
            that match on a common key.</param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> instance used to compare
            keys for equality.</param>
            <returns>A sequence containing results projected from a left
            outer join of the two input sequences.</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.First``1(MoreLinq.IExtremaEnumerable{``0})">
            <summary>
            Returns the first element of a sequence.
            </summary>
            <typeparam name="T">
            The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The input sequence.</param>
            <exception cref="T:System.InvalidOperationException">
            The input sequence is empty.</exception>
            <returns>
            The first element of the input sequence.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.FirstOrDefault``1(MoreLinq.IExtremaEnumerable{``0})">
            <summary>
            Returns the first element of a sequence, or a default value if the
            sequence contains no elements.
            </summary>
            <typeparam name="T">
            The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The input sequence.</param>
            <returns>
            Default value of type <typeparamref name="T" /> if source is empty;
            otherwise, the first element in source.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Last``1(MoreLinq.IExtremaEnumerable{``0})">
            <summary>
            Returns the last element of a sequence.
            </summary>
            <typeparam name="T">
            The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The input sequence.</param>
            <exception cref="T:System.InvalidOperationException">
            The input sequence is empty.</exception>
            <returns>
            The last element of the input sequence.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.LastOrDefault``1(MoreLinq.IExtremaEnumerable{``0})">
            <summary>
            Returns the last element of a sequence, or a default value if the
            sequence contains no elements.
            </summary>
            <typeparam name="T">
            The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The input sequence.</param>
            <returns>
            Default value of type <typeparamref name="T" /> if source is empty;
            otherwise, the last element in source.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Single``1(MoreLinq.IExtremaEnumerable{``0})">
            <summary>
            Returns the only element of a sequence, and throws an exception if
            there is not exactly one element in the sequence.
            </summary>
            <typeparam name="T">
            The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The input sequence.</param>
            <exception cref="T:System.InvalidOperationException">
            The input sequence contains more than one element.</exception>
            <returns>
            The single element of the input sequence.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.SingleOrDefault``1(MoreLinq.IExtremaEnumerable{``0})">
            <summary>
            Returns the only element of a sequence, or a default value if the
            sequence is empty; this method throws an exception if there is more
            than one element in the sequence.
            </summary>
            <typeparam name="T">
            The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The input sequence.</param>
            <returns>
            The single element of the input sequence, or default value of type
            <typeparamref name="T" /> if the sequence contains no elements.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the maximal elements of the given sequence, based on
            the given projection.
            </summary>
            <remarks>
            This overload uses the default comparer  for the projected type.
            This operator uses deferred execution. The results are evaluated
            and cached on first use to returned sequence.
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <typeparam name="TKey">Type of the projected element</typeparam>
            <param name="source">Source sequence</param>
            <param name="selector">Selector to use to pick the results to compare</param>
            <returns>The maximal element, according to the projection.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="selector" /> is null</exception>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Returns the maximal elements of the given sequence, based on
            the given projection and the specified comparer for projected values.
            </summary>
            <remarks>
            This operator uses deferred execution. The results are evaluated
            and cached on first use to returned sequence.
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <typeparam name="TKey">Type of the projected element</typeparam>
            <param name="source">Source sequence</param>
            <param name="selector">Selector to use to pick the results to compare</param>
            <param name="comparer">Comparer to use to compare projected values</param>
            <returns>The maximal element, according to the projection.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" />, <paramref name="selector" />
            or <paramref name="comparer" /> is null</exception>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the minimal elements of the given sequence, based on
            the given projection.
            </summary>
            <remarks>
            This overload uses the default comparer for the projected type.
            This operator uses deferred execution. The results are evaluated
            and cached on first use to returned sequence.
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <typeparam name="TKey">Type of the projected element</typeparam>
            <param name="source">Source sequence</param>
            <param name="selector">Selector to use to pick the results to compare</param>
            <returns>The minimal element, according to the projection.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="selector" /> is null</exception>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Returns the minimal elements of the given sequence, based on
            the given projection and the specified comparer for projected values.
            </summary>
            <remarks>
            This operator uses deferred execution. The results are evaluated
            and cached on first use to returned sequence.
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <typeparam name="TKey">Type of the projected element</typeparam>
            <param name="source">Source sequence</param>
            <param name="selector">Selector to use to pick the results to compare</param>
            <param name="comparer">Comparer to use to compare projected values</param>
            <returns>The minimal element, according to the projection.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" />, <paramref name="selector" />
            or <paramref name="comparer" /> is null</exception>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Move``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a sequence with a range of elements in the source sequence
            moved to a new offset.
            </summary>
            <typeparam name="T">Type of the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="fromIndex">
            The zero-based index identifying the first element in the range of
            elements to move.</param>
            <param name="count">The count of items to move.</param>
            <param name="toIndex">
            The index where the specified range will be moved.</param>
            <returns>
            A sequence with the specified range moved to the new position.
            </returns>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
            <example>
                <code><![CDATA[
            var result = Enumerable.Range(0, 6).Move(3, 2, 0);
            ]]></code>
            The <c>result</c> variable will contain <c>{ 3, 4, 0, 1, 2, 5 }</c>.
            </example>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.NestedLoops(System.Action,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Produces a sequence from an action based on the dynamic generation of N nested loops
            whose iteration counts are defined by a sequence of loop counts.
            </summary>
            <param name="action">Action delegate for which to produce a nested loop sequence</param>
            <param name="loopCounts">A sequence of loop repetition counts</param>
            <returns>A sequence of Action representing the expansion of a set of nested loops</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},MoreLinq.OrderByDirection)">
            <summary>
            Sorts the elements of a sequence in a particular direction (ascending, descending) according to a key
            </summary>
            <typeparam name="T">The type of the elements in the source sequence</typeparam>
            <typeparam name="TKey">The type of the key used to order elements</typeparam>
            <param name="source">The sequence to order</param>
            <param name="keySelector">A key selector function</param>
            <param name="direction">A direction in which to order the elements (ascending, descending)</param>
            <returns>An ordered copy of the source sequence</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},MoreLinq.OrderByDirection)">
            <summary>
            Sorts the elements of a sequence in a particular direction (ascending, descending) according to a key
            </summary>
            <typeparam name="T">The type of the elements in the source sequence</typeparam>
            <typeparam name="TKey">The type of the key used to order elements</typeparam>
            <param name="source">The sequence to order</param>
            <param name="keySelector">A key selector function</param>
            <param name="direction">A direction in which to order the elements (ascending, descending)</param>
            <param name="comparer">A comparer used to define the semantics of element comparison</param>
            <returns>An ordered copy of the source sequence</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},MoreLinq.OrderByDirection)">
            <summary>
            Performs a subsequent ordering of elements in a sequence in a particular direction (ascending, descending) according to a key
            </summary>
            <typeparam name="T">The type of the elements in the source sequence</typeparam>
            <typeparam name="TKey">The type of the key used to order elements</typeparam>
            <param name="source">The sequence to order</param>
            <param name="keySelector">A key selector function</param>
            <param name="direction">A direction in which to order the elements (ascending, descending)</param>
            <returns>An ordered copy of the source sequence</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},MoreLinq.OrderByDirection)">
            <summary>
            Performs a subsequent ordering of elements in a sequence in a particular direction (ascending, descending) according to a key
            </summary>
            <typeparam name="T">The type of the elements in the source sequence</typeparam>
            <typeparam name="TKey">The type of the key used to order elements</typeparam>
            <param name="source">The sequence to order</param>
            <param name="keySelector">A key selector function</param>
            <param name="direction">A direction in which to order the elements (ascending, descending)</param>
            <param name="comparer">A comparer used to define the semantics of element comparison</param>
            <returns>An ordered copy of the source sequence</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.OrderedMerge``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Merges two ordered sequences into one. Where the elements equal
            in both sequences, the element from the first sequence is
            returned in the resulting sequence.
            </summary>
            <typeparam name="T">Type of elements in input and output sequences.</typeparam>
            <param name="first">The first input sequence.</param>
            <param name="second">The second input sequence.</param>
            <returns>
            A sequence with elements from the two input sequences merged, as
            in a full outer join.</returns>
            <remarks>
            This method uses deferred execution. The behavior is undefined
            if the sequences are unordered as inputs.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.OrderedMerge``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Merges two ordered sequences into one with an additional
            parameter specifying how to compare the elements of the
            sequences. Where the elements equal in both sequences, the
            element from the first sequence is returned in the resulting
            sequence.
            </summary>
            <typeparam name="T">Type of elements in input and output sequences.</typeparam>
            <param name="first">The first input sequence.</param>
            <param name="second">The second input sequence.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare elements.</param>
            <returns>
            A sequence with elements from the two input sequences merged, as
            in a full outer join.</returns>
            <remarks>
            This method uses deferred execution. The behavior is undefined
            if the sequences are unordered as inputs.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.OrderedMerge``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Merges two ordered sequences into one with an additional
            parameter specifying the element key by which the sequences are
            ordered. Where the keys equal in both sequences, the
            element from the first sequence is returned in the resulting
            sequence.
            </summary>
            <typeparam name="T">Type of elements in input and output sequences.</typeparam>
            <typeparam name="TKey">Type of keys used for merging.</typeparam>
            <param name="first">The first input sequence.</param>
            <param name="second">The second input sequence.</param>
            <param name="keySelector">Function to extract a key given an element.</param>
            <returns>
            A sequence with elements from the two input sequences merged
            according to a key, as in a full outer join.</returns>
            <remarks>
            This method uses deferred execution. The behavior is undefined
            if the sequences are unordered (by key) as inputs.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.OrderedMerge``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``2},System.Func{``0,``0,``2})">
            <summary>
            Merges two ordered sequences into one. Additional parameters
            specify the element key by which the sequences are ordered,
            the result when element is found in first sequence but not in
            the second, the result when element is found in second sequence
            but not in the first and the result when elements are found in
            both sequences.
            </summary>
            <typeparam name="T">Type of elements in source sequences.</typeparam>
            <typeparam name="TKey">Type of keys used for merging.</typeparam>
            <typeparam name="TResult">Type of elements in the returned sequence.</typeparam>
            <param name="first">The first input sequence.</param>
            <param name="second">The second input sequence.</param>
            <param name="keySelector">Function to extract a key given an element.</param>
            <param name="firstSelector">Function to project the result element
            when only the first sequence yields a source element.</param>
            <param name="secondSelector">Function to project the result element
            when only the second sequence yields a source element.</param>
            <param name="bothSelector">Function to project the result element
            when only both sequences yield a source element whose keys are
            equal.</param>
            <returns>
            A sequence with projections from the two input sequences merged
            according to a key, as in a full outer join.</returns>
            <remarks>
            This method uses deferred execution. The behavior is undefined
            if the sequences are unordered (by key) as inputs.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.OrderedMerge``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``2},System.Func{``0,``0,``2},System.Collections.Generic.IComparer{``1})">
            <summary>
            Merges two ordered sequences into one. Additional parameters
            specify the element key by which the sequences are ordered,
            the result when element is found in first sequence but not in
            the second, the result when element is found in second sequence
            but not in the first, the result when elements are found in
            both sequences and a method for comparing keys.
            </summary>
            <typeparam name="T">Type of elements in source sequences.</typeparam>
            <typeparam name="TKey">Type of keys used for merging.</typeparam>
            <typeparam name="TResult">Type of elements in the returned sequence.</typeparam>
            <param name="first">The first input sequence.</param>
            <param name="second">The second input sequence.</param>
            <param name="keySelector">Function to extract a key given an element.</param>
            <param name="firstSelector">Function to project the result element
            when only the first sequence yields a source element.</param>
            <param name="secondSelector">Function to project the result element
            when only the second sequence yields a source element.</param>
            <param name="bothSelector">Function to project the result element
            when only both sequences yield a source element whose keys are
            equal.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
            <returns>
            A sequence with projections from the two input sequences merged
            according to a key, as in a full outer join.</returns>
            <remarks>
            This method uses deferred execution. The behavior is undefined
            if the sequences are unordered (by key) as inputs.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.OrderedMerge``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``3},System.Func{``1,``3},System.Func{``0,``1,``3})">
            <summary>
            Merges two heterogeneous sequences ordered by a common key type
            into a homogeneous one. Additional parameters specify the
            element key by which the sequences are ordered, the result when
            element is found in first sequence but not in the second and
            the result when element is found in second sequence but not in
            the first, the result when elements are found in both sequences.
            </summary>
            <typeparam name="TFirst">Type of elements in the first sequence.</typeparam>
            <typeparam name="TSecond">Type of elements in the second sequence.</typeparam>
            <typeparam name="TKey">Type of keys used for merging.</typeparam>
            <typeparam name="TResult">Type of elements in the returned sequence.</typeparam>
            <param name="first">The first input sequence.</param>
            <param name="second">The second input sequence.</param>
            <param name="firstKeySelector">Function to extract a key given an
            element from the first sequence.</param>
            <param name="secondKeySelector">Function to extract a key given an
            element from the second sequence.</param>
            <param name="firstSelector">Function to project the result element
            when only the first sequence yields a source element.</param>
            <param name="secondSelector">Function to project the result element
            when only the second sequence yields a source element.</param>
            <param name="bothSelector">Function to project the result element
            when only both sequences yield a source element whose keys are
            equal.</param>
            <returns>
            A sequence with projections from the two input sequences merged
            according to a key, as in a full outer join.</returns>
            <remarks>
            This method uses deferred execution. The behavior is undefined
            if the sequences are unordered (by key) as inputs.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.OrderedMerge``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``3},System.Func{``1,``3},System.Func{``0,``1,``3},System.Collections.Generic.IComparer{``2})">
            <summary>
            Merges two heterogeneous sequences ordered by a common key type
            into a homogeneous one. Additional parameters specify the
            element key by which the sequences are ordered, the result when
            element is found in first sequence but not in the second,
            the result when element is found in second sequence but not in
            the first, the result when elements are found in both sequences
            and a method for comparing keys.
            </summary>
            <typeparam name="TFirst">Type of elements in the first sequence.</typeparam>
            <typeparam name="TSecond">Type of elements in the second sequence.</typeparam>
            <typeparam name="TKey">Type of keys used for merging.</typeparam>
            <typeparam name="TResult">Type of elements in the returned sequence.</typeparam>
            <param name="first">The first input sequence.</param>
            <param name="second">The second input sequence.</param>
            <param name="firstKeySelector">Function to extract a key given an
            element from the first sequence.</param>
            <param name="secondKeySelector">Function to extract a key given an
            element from the second sequence.</param>
            <param name="firstSelector">Function to project the result element
            when only the first sequence yields a source element.</param>
            <param name="secondSelector">Function to project the result element
            when only the second sequence yields a source element.</param>
            <param name="bothSelector">Function to project the result element
            when only both sequences yield a source element whose keys are
            equal.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
            <returns>
            A sequence with projections from the two input sequences merged
            according to a key, as in a full outer join.</returns>
            <remarks>
            This method uses deferred execution. The behavior is undefined
            if the sequences are unordered (by key) as inputs.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Pad``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Pads a sequence with default values if it is narrower (shorter
            in length) than a given width.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The sequence to pad.</param>
            <param name="width">The width/length below which to pad.</param>
            <returns>
            Returns a sequence that is at least as wide/long as the width/length
            specified by the <paramref name="width" /> parameter.
            </returns>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
            <example>
                <code><![CDATA[
            int[] numbers = { 123, 456, 789 };
            var result = numbers.Pad(5);
            ]]></code>
            The <c>result</c> variable, when iterated over, will yield
            123, 456, 789 and two zeroes, in turn.
            </example>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Pad``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)">
            <summary>
            Pads a sequence with a given filler value if it is narrower (shorter
            in length) than a given width.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The sequence to pad.</param>
            <param name="width">The width/length below which to pad.</param>
            <param name="padding">The value to use for padding.</param>
            <returns>
            Returns a sequence that is at least as wide/long as the width/length
            specified by the <paramref name="width" /> parameter.
            </returns>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
            <example>
                <code><![CDATA[
            int[] numbers = { 123, 456, 789 };
            var result = numbers.Pad(5, -1);
            ]]></code>
            The <c>result</c> variable, when iterated over, will yield
            123, 456, and 789 followed by two occurrences of -1, in turn.
            </example>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Pad``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Int32,``0})">
            <summary>
            Pads a sequence with a dynamic filler value if it is narrower (shorter
            in length) than a given width.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The sequence to pad.</param>
            <param name="width">The width/length below which to pad.</param>
            <param name="paddingSelector">Function to calculate padding.</param>
            <returns>
            Returns a sequence that is at least as wide/long as the width/length
            specified by the <paramref name="width" /> parameter.
            </returns>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
            <example>
                <code><![CDATA[
            int[] numbers = { 0, 1, 2 };
            var result = numbers.Pad(5, i => -i);
            ]]></code>
            The <c>result</c> variable, when iterated over, will yield
            0, 1, 2, -3 and -4, in turn.
            </example>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.PadStart``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Pads a sequence with default values in the beginning if it is narrower (shorter
            in length) than a given width.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The sequence to pad.</param>
            <param name="width">The width/length below which to pad.</param>
            <returns>
            Returns a sequence that is at least as wide/long as the width/length
            specified by the <paramref name="width" /> parameter.
            </returns>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
            <example>
                <code><![CDATA[
            int[] numbers = { 123, 456, 789 };
            var result = numbers.PadStart(5);
            ]]></code>
            The <c>result</c> variable will contain <c>{ 0, 0, 123, 456, 789 }</c>.
            </example>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.PadStart``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)">
            <summary>
            Pads a sequence with a given filler value in the beginning if it is narrower (shorter
            in length) than a given width.
            An additional parameter specifies the value to use for padding.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The sequence to pad.</param>
            <param name="width">The width/length below which to pad.</param>
            <param name="padding">The value to use for padding.</param>
            <returns>
            Returns a sequence that is at least as wide/long as the width/length
            specified by the <paramref name="width" /> parameter.
            </returns>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
            <example>
                <code><![CDATA[
            int[] numbers = { 123, 456, 789 };
            var result = numbers.PadStart(5, -1);
            ]]></code>
            The <c>result</c> variable will contain <c>{ -1, -1, 123, 456, 789 }</c>.
            </example>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.PadStart``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Int32,``0})">
            <summary>
            Pads a sequence with a dynamic filler value in the beginning if it is narrower (shorter
            in length) than a given width.
            An additional parameter specifies the function to calculate padding.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The sequence to pad.</param>
            <param name="width">The width/length below which to pad.</param>
            <param name="paddingSelector">
            Function to calculate padding given the index of the missing element.
            </param>
            <returns>
            Returns a sequence that is at least as wide/long as the width/length
            specified by the <paramref name="width" /> parameter.
            </returns>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
            <example>
                <code><![CDATA[
            int[] numbers = { 123, 456, 789 };
            var result = numbers.PadStart(6, i => -i);
            ]]></code>
            The <c>result</c> variable will contain <c>{ 0, -1, -2, 123, 456, 789 }</c>.
            </example>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Pairwise``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``1})">
            <summary>
            Returns a sequence resulting from applying a function to each
            element in the source sequence and its
            predecessor, with the exception of the first element which is
            only returned as the predecessor of the second element.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <typeparam name="TResult">The type of the element of the returned sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="resultSelector">A transform function to apply to
            each pair of sequence.</param>
            <returns>
            Returns the resulting sequence.
            </returns>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
            <example>
                <code><![CDATA[
            var source = new[] { "a", "b", "c", "d" };
            var result = source.Pairwise((a, b) => a + b);
            ]]></code>
            The <c>result</c> variable, when iterated over, will yield
            "ab", "bc" and "cd", in turn.
            </example>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.PartialSort``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Combines <see cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />,
            where each element is its key, and <see cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
            in a single operation.
            </summary>
            <typeparam name="T">Type of elements in the sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="count">Number of (maximum) elements to return.</param>
            <returns>A sequence containing at most top <paramref name="count" />
            elements from source, in their ascending order.</returns>
            <remarks>
            This operator uses deferred execution and streams it results.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.PartialSort``1(System.Collections.Generic.IEnumerable{``0},System.Int32,MoreLinq.OrderByDirection)">
            <summary>
            Combines <see cref="M:MoreLinq.MoreEnumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},MoreLinq.OrderByDirection)" />,
            where each element is its key, and <see cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
            in a single operation.
            An additional parameter specifies the direction of the sort
            </summary>
            <typeparam name="T">Type of elements in the sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="count">Number of (maximum) elements to return.</param>
            <param name="direction">The direction in which to sort the elements</param>
            <returns>A sequence containing at most top <paramref name="count" />
            elements from source, in the specified order.</returns>
            <remarks>
            This operator uses deferred execution and streams it results.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.PartialSort``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
            Combines <see cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />,
            where each element is its key, and <see cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
            in a single operation. An additional parameter specifies how the
            elements compare to each other.
            </summary>
            <typeparam name="T">Type of elements in the sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="count">Number of (maximum) elements to return.</param>
            <param name="comparer">A <see cref="T:System.Collections.Generic.IComparer`1" /> to compare elements.</param>
            <returns>A sequence containing at most top <paramref name="count" />
            elements from source, in their ascending order.</returns>
            <remarks>
            This operator uses deferred execution and streams it results.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.PartialSort``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IComparer{``0},MoreLinq.OrderByDirection)">
            <summary>
            Combines <see cref="M:MoreLinq.MoreEnumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},MoreLinq.OrderByDirection)" />,
            where each element is its key, and <see cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
            in a single operation.
            Additional parameters specify how the elements compare to each other and
            the direction of the sort.
            </summary>
            <typeparam name="T">Type of elements in the sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="count">Number of (maximum) elements to return.</param>
            <param name="comparer">A <see cref="T:System.Collections.Generic.IComparer`1" /> to compare elements.</param>
            <param name="direction">The direction in which to sort the elements</param>
            <returns>A sequence containing at most top <paramref name="count" />
            elements from source, in the specified order.</returns>
            <remarks>
            This operator uses deferred execution and streams it results.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.PartialSortBy``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,``1})">
            <summary>
            Combines <see cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />,
            and <see cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" /> in a single operation.
            </summary>
            <typeparam name="TSource">Type of elements in the sequence.</typeparam>
            <typeparam name="TKey">Type of keys.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="count">Number of (maximum) elements to return.</param>
            <returns>A sequence containing at most top <paramref name="count" />
            elements from source, in ascending order of their keys.</returns>
            <remarks>
            This operator uses deferred execution and streams it results.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.PartialSortBy``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,``1},MoreLinq.OrderByDirection)">
            <summary>
            Combines <see cref="M:MoreLinq.MoreEnumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},MoreLinq.OrderByDirection)" />,
            and <see cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" /> in a single operation.
            An additional parameter specifies the direction of the sort
            </summary>
            <typeparam name="TSource">Type of elements in the sequence.</typeparam>
            <typeparam name="TKey">Type of keys.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="count">Number of (maximum) elements to return.</param>
            <param name="direction">The direction in which to sort the elements</param>
            <returns>A sequence containing at most top <paramref name="count" />
            elements from source, in the specified order of their keys.</returns>
            <remarks>
            This operator uses deferred execution and streams it results.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.PartialSortBy``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Combines <see cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />,
            and <see cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" /> in a single operation.
            An additional parameter specifies how the keys compare to each other.
            </summary>
            <typeparam name="TSource">Type of elements in the sequence.</typeparam>
            <typeparam name="TKey">Type of keys.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="count">Number of (maximum) elements to return.</param>
            <param name="comparer">A <see cref="T:System.Collections.Generic.IComparer`1" /> to compare elements.</param>
            <returns>A sequence containing at most top <paramref name="count" />
            elements from source, in ascending order of their keys.</returns>
            <remarks>
            This operator uses deferred execution and streams it results.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.PartialSortBy``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,``1},System.Collections.Generic.IComparer{``1},MoreLinq.OrderByDirection)">
            <summary>
            Combines <see cref="M:MoreLinq.MoreEnumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},MoreLinq.OrderByDirection)" />,
            and <see cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" /> in a single operation.
            Additional parameters specify how the elements compare to each other and
            the direction of the sort.
            </summary>
            <typeparam name="TSource">Type of elements in the sequence.</typeparam>
            <typeparam name="TKey">Type of keys.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="count">Number of (maximum) elements to return.</param>
            <param name="comparer">A <see cref="T:System.Collections.Generic.IComparer`1" /> to compare elements.</param>
            <param name="direction">The direction in which to sort the elements</param>
            <returns>A sequence containing at most top <paramref name="count" />
            elements from source, in the specified order of their keys.</returns>
            <remarks>
            This operator uses deferred execution and streams it results.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Partition``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Partitions or splits a sequence in two using a predicate.
            </summary>
            <param name="source">The source sequence.</param>
            <param name="predicate">The predicate function.</param>
            <typeparam name="T">Type of source elements.</typeparam>
            <returns>
            A tuple of elements staisfying the predicate and those that do not,
            respectively.
            </returns>
            <example>
                <code><![CDATA[
            var (evens, odds) =
                Enumerable.Range(0, 10).Partition(x => x % 2 == 0);
            ]]></code>
            The <c>evens</c> variable, when iterated over, will yield 0, 2, 4, 6
            and then 8. The <c>odds</c> variable, when iterated over, will yield
            1, 3, 5, 7 and then 9.
            </example>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Partition``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            Partitions or splits a sequence in two using a predicate and then
            projects a result from the two.
            </summary>
            <param name="source">The source sequence.</param>
            <param name="predicate">The predicate function.</param>
            <param name="resultSelector">
            Function that projects the result from sequences of elements that
            satisfy the predicate and those that do not, respectively, passed as
            arguments.
            </param>
            <typeparam name="T">Type of source elements.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <returns>
            The return value from <paramref name="resultSelector" />.
            </returns>
            <example>
                <code><![CDATA[
            var (evens, odds) =
                Enumerable.Range(0, 10)
                          .Partition(x => x % 2 == 0, ValueTuple.Create);
            ]]></code>
            The <c>evens</c> variable, when iterated over, will yield 0, 2, 4, 6
            and then 8. The <c>odds</c> variable, when iterated over, will yield
            1, 3, 5, 7 and then 9.
            </example>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Partition``2(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{System.Boolean,``0}},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            Partitions a grouping by Boolean keys into a projection of true
            elements and false elements, respectively.
            </summary>
            <typeparam name="T">Type of elements in source groupings.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="resultSelector">
            Function that projects the result from sequences of true elements
            and false elements, respectively, passed as arguments.
            </param>
            <returns>
            The return value from <paramref name="resultSelector" />.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Partition``2(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{System.Nullable{System.Boolean},``0}},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            Partitions a grouping by nullable Boolean keys into a projection of
            true elements, false elements and null elements, respectively.
            </summary>
            <typeparam name="T">Type of elements in source groupings.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="resultSelector">
            Function that projects the result from sequences of true elements,
            false elements and null elements, respectively, passed as
            arguments.
            </param>
            <returns>
            The return value from <paramref name="resultSelector" />.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Partition``3(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``0,System.Func{System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``2})">
            <summary>
            Partitions a grouping and projects a result from group elements
            matching a key and those groups that do not.
            </summary>
            <typeparam name="TKey">Type of keys in source groupings.</typeparam>
            <typeparam name="TElement">Type of elements in source groupings.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="key">The key to partition.</param>
            <param name="resultSelector">
            Function that projects the result from sequences of elements
            matching <paramref name="key" /> and those groups that do not (in
            the order in which they appear in <paramref name="source" />),
            passed as arguments.
            </param>
            <returns>
            The return value from <paramref name="resultSelector" />.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Partition``3(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``0,System.Collections.Generic.IEqualityComparer{``0},System.Func{System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``2})">
            <summary>
            Partitions a grouping and projects a result from group elements
            matching a key and those groups that do not. An additional parameter
            specifies how to compare keys for equality.
            </summary>
            <typeparam name="TKey">Type of keys in source groupings.</typeparam>
            <typeparam name="TElement">Type of elements in source groupings.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="key">The key to partition on.</param>
            <param name="comparer">The comparer for keys.</param>
            <param name="resultSelector">
            Function that projects the result from elements of the group
            matching <paramref name="key" /> and those groups that do not (in
            the order in which they appear in <paramref name="source" />),
            passed as arguments.
            </param>
            <returns>
            The return value from <paramref name="resultSelector" />.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Partition``3(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``0,``0,System.Func{System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``2})">
            <summary>
            Partitions a grouping and projects a result from elements of
            groups matching a set of two keys and those groups that do not.
            </summary>
            <typeparam name="TKey">Type of keys in source groupings.</typeparam>
            <typeparam name="TElement">Type of elements in source groupings.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="key1">The first key to partition on.</param>
            <param name="key2">The second key to partition on.</param>
            <param name="resultSelector">
            Function that projects the result from elements of the group
            matching <paramref name="key1" />, elements of the group matching
            <paramref name="key2" /> and those groups that do not (in the order
            in which they appear in <paramref name="source" />), passed as
            arguments.
            </param>
            <returns>
            The return value from <paramref name="resultSelector" />.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Partition``3(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.Func{System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``2})">
            <summary>
            Partitions a grouping and projects a result from elements of
            groups matching a set of two keys and those groups that do not.
            An additional parameter specifies how to compare keys for equality.
            </summary>
            <typeparam name="TKey">Type of keys in source groupings.</typeparam>
            <typeparam name="TElement">Type of elements in source groupings.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="key1">The first key to partition on.</param>
            <param name="key2">The second key to partition on.</param>
            <param name="comparer">The comparer for keys.</param>
            <param name="resultSelector">
            Function that projects the result from elements of the group
            matching <paramref name="key1" />, elements of the group matching
            <paramref name="key2" /> and those groups that do not (in the order
            in which they appear in <paramref name="source" />), passed as
            arguments.
            </param>
            <returns>
            The return value from <paramref name="resultSelector" />.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Partition``3(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``0,``0,``0,System.Func{System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``2})">
            <summary>
            Partitions a grouping and projects a result from elements groups
            matching a set of three keys and those groups that do not.
            </summary>
            <typeparam name="TKey">Type of keys in source groupings.</typeparam>
            <typeparam name="TElement">Type of elements in source groupings.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="key1">The first key to partition on.</param>
            <param name="key2">The second key to partition on.</param>
            <param name="key3">The third key to partition on.</param>
            <param name="resultSelector">
            Function that projects the result from elements of groups
            matching <paramref name="key1" />, <paramref name="key2" /> and
            <paramref name="key3" /> and those groups that do not (in the order
            in which they appear in <paramref name="source" />), passed as
            arguments.
            </param>
            <returns>
            The return value from <paramref name="resultSelector" />.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Partition``3(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``0,``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.Func{System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``2})">
            <summary>
            Partitions a grouping and projects a result from elements groups
            matching a set of three keys and those groups that do not. An
            additional parameter specifies how to compare keys for equality.
            </summary>
            <typeparam name="TKey">Type of keys in source groupings.</typeparam>
            <typeparam name="TElement">Type of elements in source groupings.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="key1">The first key to partition on.</param>
            <param name="key2">The second key to partition on.</param>
            <param name="key3">The third key to partition on.</param>
            <param name="comparer">The comparer for keys.</param>
            <param name="resultSelector">
            Function that projects the result from elements of groups
            matching <paramref name="key1" />, <paramref name="key2" /> and
            <paramref name="key3" /> and those groups that do not (in
            the order in which they appear in <paramref name="source" />),
            passed as arguments.
            </param>
            <returns>
            The return value from <paramref name="resultSelector" />.
            </returns>
        </member>
        <member name="T:MoreLinq.MoreEnumerable.PermutationEnumerator`1">
            <summary>
            The private implementation class that produces permutations of a sequence.
            </summary>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.PermutationEnumerator`1.NextPermutation">
            <summary>
            Transposes elements in the cached permutation array to produce the next permutation
            </summary>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.PermutationEnumerator`1.PermuteValueSet">
            <summary>
            Creates a new list containing the values from the original
            set in their new permuted order.
            </summary>
            <remarks>
            The reason we return a new permuted value set, rather than reuse
            an existing collection, is that we have no control over what the
            consumer will do with the results produced. They could very easily
            generate and store a set of permutations and only then begin to
            process them. If we reused the same collection, the caller would
            be surprised to discover that all of the permutations looked the
            same.
            </remarks>
            <returns>List of permuted source sequence values</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Permutations``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Generates a sequence of lists that represent the permutations of the original sequence.
            </summary>
            <remarks>
            A permutation is a unique re-ordering of the elements of the sequence.<br />
            This operator returns permutations in a deferred, streaming fashion; however, each
            permutation is materialized into a new list. There are N! permutations of a sequence,
            where N =&gt; sequence.Count().<br />
            Be aware that the original sequence is considered one of the permutations and will be
            returned as one of the results.
            </remarks>
            <typeparam name="T">The type of the elements in the sequence</typeparam>
            <param name="sequence">The original sequence to permute</param>
            <returns>A sequence of lists representing permutations of the original sequence</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Pipe``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes the given action on each element in the source sequence
            and yields it.
            </summary>
            <typeparam name="T">The type of the elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="action">The action to execute on each element</param>
            <returns>A sequence with source elements in their original order.</returns>
            <remarks>
            The returned sequence is essentially a duplicate of
            the original, but with the extra action being executed while the
            sequence is evaluated. The action is always taken before the element
            is yielded, so any changes made by the action will be visible in the
            returned sequence. This operator uses deferred execution and streams it results.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Prepends a single value to a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The sequence to prepend to.</param>
            <param name="value">The value to prepend.</param>
            <returns>
            Returns a sequence where a value is prepended to it.
            </returns>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
            <code><![CDATA[
            int[] numbers = { 1, 2, 3 };
            var result = numbers.Prepend(0);
            ]]></code>
            The <c>result</c> variable, when iterated over, will yield
            0, 1, 2 and 3, in turn.
        </member>
        <member name="M:MoreLinq.MoreEnumerable.PreScan``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0},``0)">
            <summary>
            Performs a pre-scan (exclusive prefix sum) on a sequence of elements.
            </summary>
            <remarks>
            An exclusive prefix sum returns an equal-length sequence where the
            N-th element is the sum of the first N-1 input elements (the first
            element is a special case, it is set to the identity). More
            generally, the pre-scan allows any commutative binary operation,
            not just a sum.
            The inclusive version of PreScan is <see cref="M:MoreLinq.MoreEnumerable.Scan``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" />.
            This operator uses deferred execution and streams its result.
            </remarks>
            <example>
                <code><![CDATA[
            int[] values = { 1, 2, 3, 4 };
            var prescan = values.PreScan((a, b) => a + b, 0);
            var scan = values.Scan((a, b) => a + b);
            var result = values.EquiZip(prescan, ValueTuple.Create);
            ]]></code>
                <c>prescan</c> will yield <c>{ 0, 1, 3, 6 }</c>, while <c>scan</c>
            and <c>result</c> will both yield <c>{ 1, 3, 6, 10 }</c>. This
            shows the relationship between the inclusive and exclusive prefix sum.
            </example>
            <typeparam name="TSource">Type of elements in source sequence</typeparam>
            <param name="source">Source sequence</param>
            <param name="transformation">Transformation operation</param>
            <param name="identity">Identity element (see remarks)</param>
            <returns>The scanned sequence</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Random">
            <summary>
            Returns an infinite sequence of random integers using the standard
            .NET random number generator.
            </summary>
            <returns>An infinite sequence of random integers</returns>
            <remarks>
            The implementation internally uses a shared, thread-local instance of
            <see cref="T:System.Random" /> to generate a random number on each
            iteration. The actual <see cref="T:System.Random" /> instance used
            therefore will depend on the thread on which a single iteration is
            taking place; that is the call to
            <see cref="M:System.Collections.IEnumerator.MoveNext" />. If the
            overall iteration takes place on different threads (e.g.
            via asynchronous awaits completing on different threads) then various
            different <see cref="T:System.Random" /> instances will be involved
            in the generation of the sequence of random numbers. Because the
            <see cref="T:System.Random" /> instance is shared, if multiple sequences
            are generated on the same thread, the order of enumeration affects the
            resulting sequences.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Random(System.Random)">
            <summary>
            Returns an infinite sequence of random integers using the supplied
            random number generator.
            </summary>
            <param name="rand">Random generator used to produce random numbers</param>
            <returns>An infinite sequence of random integers</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rand" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Random(System.Int32)">
            <summary>
            Returns an infinite sequence of random integers between zero and
            a given maximum.
            </summary>
            <param name="maxValue">exclusive upper bound for the random values returned</param>
            <returns>An infinite sequence of random integers</returns>
            <remarks>
            The implementation internally uses a shared, thread-local instance of
            <see cref="T:System.Random" /> to generate a random number on each
            iteration. The actual <see cref="T:System.Random" /> instance used
            therefore will depend on the thread on which a single iteration is
            taking place; that is the call to
            <see cref="M:System.Collections.IEnumerator.MoveNext" />. If the
            overall iteration takes place on different threads (e.g.
            via asynchronous awaits completing on different threads) then various
            different <see cref="T:System.Random" /> instances will be involved
            in the generation of the sequence of random numbers. Because the
            <see cref="T:System.Random" /> instance is shared, if multiple sequences
            are generated on the same thread, the order of enumeration affects the
            resulting sequences.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Random(System.Random,System.Int32)">
            <summary>
            Returns an infinite sequence of random integers between zero and a
            given maximum using the supplied random number generator.
            </summary>
            <param name="rand">Random generator used to produce values</param>
            <param name="maxValue">Exclusive upper bound for random values returned</param>
            <returns>An infinite sequence of random integers</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rand" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Random(System.Int32,System.Int32)">
            <summary>
            Returns an infinite sequence of random integers between a given
            minimum and a maximum.
            </summary>
            <param name="minValue">Inclusive lower bound of the values returned</param>
            <param name="maxValue">Exclusive upper bound of the values returned</param>
            <returns>An infinite sequence of random integers</returns>
            <remarks>
            The implementation internally uses a shared, thread-local instance of
            <see cref="T:System.Random" /> to generate a random number on each
            iteration. The actual <see cref="T:System.Random" /> instance used
            therefore will depend on the thread on which a single iteration is
            taking place; that is the call to
            <see cref="M:System.Collections.IEnumerator.MoveNext" />. If the
            overall iteration takes place on different threads (e.g.
            via asynchronous awaits completing on different threads) then various
            different <see cref="T:System.Random" /> instances will be involved
            in the generation of the sequence of random numbers. Because the
            <see cref="T:System.Random" /> instance is shared, if multiple sequences
            are generated on the same thread, the order of enumeration affects the
            resulting sequences.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Random(System.Random,System.Int32,System.Int32)">
            <summary>
            Returns an infinite sequence of random integers between a given
            minumum and a maximum using the supplied random number generator.
            </summary>
            <param name="rand">Generator used to produce random numbers</param>
            <param name="minValue">Inclusive lower bound of the values returned</param>
            <param name="maxValue">Exclusive upper bound of the values returned</param>
            <returns>An infinite sequence of random integers</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rand" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.RandomDouble">
            <summary>
            Returns an infinite sequence of random double values between 0.0 and 1.0
            </summary>
            <returns>An infinite sequence of random doubles</returns>
            <remarks>
            The implementation internally uses a shared, thread-local instance of
            <see cref="T:System.Random" /> to generate a random number on each
            iteration. The actual <see cref="T:System.Random" /> instance used
            therefore will depend on the thread on which a single iteration is
            taking place; that is the call to
            <see cref="M:System.Collections.IEnumerator.MoveNext" />. If the
            overall iteration takes place on different threads (e.g.
            via asynchronous awaits completing on different threads) then various
            different <see cref="T:System.Random" /> instances will be involved
            in the generation of the sequence of random numbers. Because the
            <see cref="T:System.Random" /> instance is shared, if multiple sequences
            are generated on the same thread, the order of enumeration affects the
            resulting sequences.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.RandomDouble(System.Random)">
            <summary>
            Returns an infinite sequence of random double values between 0.0 and 1.0
            using the supplied random number generator.
            </summary>
            <param name="rand">Generator used to produce random numbers</param>
            <returns>An infinite sequence of random doubles</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rand" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.RandomImpl``1(System.Random,System.Func{System.Random,``0})">
            <summary>
            This is the underlying implementation that all random operators use to
            produce a sequence of random values.
            </summary>
            <typeparam name="T">The type of value returned (either Int32 or Double)</typeparam>
            <param name="rand">Random generators used to produce the sequence</param>
            <param name="nextValue">Generator function that actually produces the next value - specific to T</param>
            <returns>An infinite sequence of random numbers of type T</returns>
        </member>
        <member name="T:MoreLinq.MoreEnumerable.GlobalRandom">
            <remarks>
                <see cref="T:System.Random" /> is not thread-safe so the following
            implementation uses thread-local <see cref="T:System.Random" />
            instances to create the illusion of a global
            <see cref="T:System.Random" /> implementation. For some background,
            see <a href="https://blogs.msdn.microsoft.com/pfxteam/2009/02/19/getting-random-numbers-in-a-thread-safe-way/">Getting
            random numbers in a thread-safe way</a></remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.RandomSubset``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns a sequence of a specified size of random elements from the
            original sequence.
            </summary>
            <typeparam name="T">The type of source sequence elements.</typeparam>
            <param name="source">
            The sequence from which to return random elements.</param>
            <param name="subsetSize">The size of the random subset to return.</param>
            <returns>
            A random sequence of elements in random order from the original
            sequence.</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.RandomSubset``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Random)">
            <summary>
            Returns a sequence of a specified size of random elements from the
            original sequence. An additional parameter specifies a random
            generator to be used for the random selection algorithm.
            </summary>
            <typeparam name="T">The type of source sequence elements.</typeparam>
            <param name="source">
            The sequence from which to return random elements.</param>
            <param name="subsetSize">The size of the random subset to return.</param>
            <param name="rand">
            A random generator used as part of the selection algorithm.</param>
            <returns>
            A random sequence of elements in random order from the original
            sequence.</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Rank``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Ranks each item in the sequence in descending ordering using a default comparer.
            </summary>
            <typeparam name="TSource">Type of item in the sequence</typeparam>
            <param name="source">The sequence whose items will be ranked</param>
            <returns>A sequence of position integers representing the ranks of the corresponding items in the sequence</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Rank``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Rank each item in the sequence using a caller-supplied comparer.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence</typeparam>
            <param name="source">The sequence of items to rank</param>
            <param name="comparer">A object that defines comparison semantics for the elements in the sequence</param>
            <returns>A sequence of position integers representing the ranks of the corresponding items in the sequence</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.RankBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Ranks each item in the sequence in descending ordering by a specified key using a default comparer
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence</typeparam>
            <typeparam name="TKey">The type of the key used to rank items in the sequence</typeparam>
            <param name="source">The sequence of items to rank</param>
            <param name="keySelector">A key selector function which returns the value by which to rank items in the sequence</param>
            <returns>A sequence of position integers representing the ranks of the corresponding items in the sequence</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.RankBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Ranks each item in a sequence using a specified key and a caller-supplied comparer
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence</typeparam>
            <typeparam name="TKey">The type of the key used to rank items in the sequence</typeparam>
            <param name="source">The sequence of items to rank</param>
            <param name="keySelector">A key selector function which returns the value by which to rank items in the sequence</param>
            <param name="comparer">An object that defines the comparison semantics for keys used to rank items</param>
            <returns>A sequence of position integers representing the ranks of the corresponding items in the sequence</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Repeat``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Repeats the sequence the specified number of times.
            </summary>
            <typeparam name="T">Type of elements in sequence</typeparam>
            <param name="sequence">The sequence to repeat</param>
            <param name="count">Number of times to repeat the sequence</param>
            <returns>A sequence produced from the repetition of the original source sequence</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Repeat``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Repeats the sequence forever.
            </summary>
            <typeparam name="T">Type of elements in sequence</typeparam>
            <param name="sequence">The sequence to repeat</param>
            <returns>A sequence produced from the infinite repetition of the original source sequence</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Return``1(``0)">
            <summary>
            Returns a single-element sequence containing the item provided.
            </summary>
            <typeparam name="T">The type of the item.</typeparam>
            <param name="item">The item to return in a sequence.</param>
            <returns>A sequence containing only <paramref name="item" />.</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.RightJoin``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``0,``2})">
            <summary>
            Performs a right outer join on two homogeneous sequences.
            Additional arguments specify key selection functions and result
            projection functions.
            </summary>
            <typeparam name="TSource">
            The type of elements in the source sequence.</typeparam>
            <typeparam name="TKey">
            The type of the key returned by the key selector function.</typeparam>
            <typeparam name="TResult">
            The type of the result elements.</typeparam>
            <param name="first">
            The first sequence of the join operation.</param>
            <param name="second">
            The second sequence of the join operation.</param>
            <param name="keySelector">
            Function that projects the key given an element of one of the
            sequences to join.</param>
            <param name="secondSelector">
            Function that projects the result given just an element from
            <paramref name="second" /> where there is no corresponding element
            in <paramref name="first" />.</param>
            <param name="bothSelector">
            Function that projects the result given an element from
            <paramref name="first" /> and an element from <paramref name="second" />
            that match on a common key.</param>
            <returns>A sequence containing results projected from a right
            outer join of the two input sequences.</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.RightJoin``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Performs a right outer join on two homogeneous sequences.
            Additional arguments specify key selection functions, result
            projection functions and a key comparer.
            </summary>
            <typeparam name="TSource">
            The type of elements in the source sequence.</typeparam>
            <typeparam name="TKey">
            The type of the key returned by the key selector function.</typeparam>
            <typeparam name="TResult">
            The type of the result elements.</typeparam>
            <param name="first">
            The first sequence of the join operation.</param>
            <param name="second">
            The second sequence of the join operation.</param>
            <param name="keySelector">
            Function that projects the key given an element of one of the
            sequences to join.</param>
            <param name="secondSelector">
            Function that projects the result given just an element from
            <paramref name="second" /> where there is no corresponding element
            in <paramref name="first" />.</param>
            <param name="bothSelector">
            Function that projects the result given an element from
            <paramref name="first" /> and an element from <paramref name="second" />
            that match on a common key.</param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> instance used to compare
            keys for equality.</param>
            <returns>A sequence containing results projected from a right
            outer join of the two input sequences.</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.RightJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``1,``3},System.Func{``0,``1,``3})">
            <summary>
            Performs a right outer join on two heterogeneous sequences.
            Additional arguments specify key selection functions and result
            projection functions.
            </summary>
            <typeparam name="TFirst">
            The type of elements in the first sequence.</typeparam>
            <typeparam name="TSecond">
            The type of elements in the second sequence.</typeparam>
            <typeparam name="TKey">
            The type of the key returned by the key selector functions.</typeparam>
            <typeparam name="TResult">
            The type of the result elements.</typeparam>
            <param name="first">
            The first sequence of the join operation.</param>
            <param name="second">
            The second sequence of the join operation.</param>
            <param name="firstKeySelector">
            Function that projects the key given an element from <paramref name="first" />.</param>
            <param name="secondKeySelector">
            Function that projects the key given an element from <paramref name="second" />.</param>
            <param name="secondSelector">
            Function that projects the result given just an element from
            <paramref name="second" /> where there is no corresponding element
            in <paramref name="first" />.</param>
            <param name="bothSelector">
            Function that projects the result given an element from
            <paramref name="first" /> and an element from <paramref name="second" />
            that match on a common key.</param>
            <returns>A sequence containing results projected from a right
            outer join of the two input sequences.</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.RightJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``1,``3},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Performs a right outer join on two heterogeneous sequences.
            Additional arguments specify key selection functions, result
            projection functions and a key comparer.
            </summary>
            <typeparam name="TFirst">
            The type of elements in the first sequence.</typeparam>
            <typeparam name="TSecond">
            The type of elements in the second sequence.</typeparam>
            <typeparam name="TKey">
            The type of the key returned by the key selector functions.</typeparam>
            <typeparam name="TResult">
            The type of the result elements.</typeparam>
            <param name="first">
            The first sequence of the join operation.</param>
            <param name="second">
            The second sequence of the join operation.</param>
            <param name="firstKeySelector">
            Function that projects the key given an element from <paramref name="first" />.</param>
            <param name="secondKeySelector">
            Function that projects the key given an element from <paramref name="second" />.</param>
            <param name="secondSelector">
            Function that projects the result given just an element from
            <paramref name="second" /> where there is no corresponding element
            in <paramref name="first" />.</param>
            <param name="bothSelector">
            Function that projects the result given an element from
            <paramref name="first" /> and an element from <paramref name="second" />
            that match on a common key.</param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> instance used to compare
            keys for equality.</param>
            <returns>A sequence containing results projected from a right
            outer join of the two input sequences.</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.RunLengthEncode``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Run-length encodes a sequence by converting consecutive instances of the same element into
            a <c>KeyValuePair{T,int}</c> representing the item and its occurrence count.
            </summary>
            <typeparam name="T">The type of the elements in the sequence</typeparam>
            <param name="sequence">The sequence to run length encode</param>
            <returns>A sequence of <c>KeyValuePair{T,int}</c> where the key is the element and the value is the occurrence count</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.RunLengthEncode``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Run-length encodes a sequence by converting consecutive instances of the same element into
            a <c>KeyValuePair{T,int}</c> representing the item and its occurrence count. This overload
            uses a custom equality comparer to identify equivalent items.
            </summary>
            <typeparam name="T">The type of the elements in the sequence</typeparam>
            <param name="sequence">The sequence to run length encode</param>
            <param name="comparer">The comparer used to identify equivalent items</param>
            <returns>A sequence of <c>KeyValuePair{T,int}</c> where they key is the element and the value is the occurrence count</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Scan``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
            <summary>
            Performs a scan (inclusive prefix sum) on a sequence of elements.
            </summary>
            <remarks>
            An inclusive prefix sum returns an equal-length sequence where the
            N-th element is the sum of the first N input elements. More
            generally, the scan allows any commutative binary operation, not
            just a sum.
            The exclusive version of Scan is <see cref="M:MoreLinq.MoreEnumerable.PreScan``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0},``0)" />.
            This operator uses deferred execution and streams its result.
            </remarks>
            <example>
                <code><![CDATA[
            int[] values = { 1, 2, 3, 4 };
            var prescan = values.PreScan((a, b) => a + b, 0);
            var scan = values.Scan((a, b) => a + b);
            var result = values.EquiZip(scan, ValueTuple.Create);
            ]]></code>
                <c>prescan</c> will yield <c>{ 0, 1, 3, 6 }</c>, while <c>scan</c>
            and <c>result</c> will both yield <c>{ 1, 3, 6, 10 }</c>. This
            shows the relationship between the inclusive and exclusive prefix sum.
            </example>
            <typeparam name="TSource">Type of elements in source sequence</typeparam>
            <param name="source">Source sequence</param>
            <param name="transformation">Transformation operation</param>
            <returns>The scanned sequence</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Scan``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            Like <see cref="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" /> except returns
            the sequence of intermediate results as well as the final one.
            An additional parameter specifies a seed.
            </summary>
            <remarks>
            This operator uses deferred execution and streams its result.
            </remarks>
            <example>
                <code><![CDATA[
            var result = Enumerable.Range(1, 5).Scan(0, (a, b) => a + b);
            ]]></code>
            When iterated, <c>result</c> will yield <c>{ 0, 1, 3, 6, 10, 15 }</c>.
            </example>
            <typeparam name="TSource">Type of elements in source sequence</typeparam>
            <typeparam name="TState">Type of state</typeparam>
            <param name="source">Source sequence</param>
            <param name="seed">Initial state to seed</param>
            <param name="transformation">Transformation operation</param>
            <returns>The scanned sequence</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ScanBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``1,``0,``2})">
            <summary>
            Applies an accumulator function over sequence element keys,
            returning the keys along with intermediate accumulator states.
            </summary>
            <typeparam name="TSource">Type of the elements of the source sequence.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TState">Type of the state.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="keySelector">
            A function that returns the key given an element.</param>
            <param name="seedSelector">
            A function to determine the initial value for the accumulator that is
            invoked once per key encountered.</param>
            <param name="accumulator">
            An accumulator function invoked for each element.</param>
            <returns>
            A sequence of keys paired with intermediate accumulator states.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ScanBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``1,``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Applies an accumulator function over sequence element keys,
            returning the keys along with intermediate accumulator states. An
            additional parameter specifies the comparer to use to compare keys.
            </summary>
            <typeparam name="TSource">Type of the elements of the source sequence.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TState">Type of the state.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="keySelector">
            A function that returns the key given an element.</param>
            <param name="seedSelector">
            A function to determine the initial value for the accumulator that is
            invoked once per key encountered.</param>
            <param name="accumulator">
            An accumulator function invoked for each element.</param>
            <param name="comparer">The equality comparer to use to determine
            whether or not keys are equal. If <c>null</c>, the default equality
            comparer for <typeparamref name="TSource" /> is used.</param>
            <returns>
            A sequence of keys paired with intermediate accumulator states.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ScanRight``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
            <summary>
            Peforms a right-associative scan (inclusive prefix) on a sequence of elements.
            This operator is the right-associative version of the
            <see cref="M:MoreLinq.MoreEnumerable.Scan``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" /> LINQ operator.
            </summary>
            <typeparam name="TSource">Type of elements in source sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="func">
            A right-associative accumulator function to be invoked on each element.
            Its first argument is the current value in the sequence; second argument is the previous accumulator value.
            </param>
            <returns>The scanned sequence.</returns>
            <example>
                <code><![CDATA[
            var result = Enumerable.Range(1, 5).Select(i => i.ToString()).ScanRight((a, b) => string.Format("({0}/{1})", a, b));
            ]]></code>
            The <c>result</c> variable will contain <c>[ "(1+(2+(3+(4+5))))", "(2+(3+(4+5)))", "(3+(4+5))", "(4+5)", "5" ]</c>.
            </example>
            <remarks>
            This operator uses deferred execution and streams its results.
            Source sequence is consumed greedily when an iteration of the resulting sequence begins.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ScanRight``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``0,``1,``1})">
            <summary>
            Peforms a right-associative scan (inclusive prefix) on a sequence of elements.
            The specified seed value is used as the initial accumulator value.
            This operator is the right-associative version of the
            <see cref="M:MoreLinq.MoreEnumerable.Scan``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" /> LINQ operator.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="seed">The initial accumulator value.</param>
            <param name="func">A right-associative accumulator function to be invoked on each element.</param>
            <returns>The scanned sequence.</returns>
            <example>
                <code><![CDATA[
            var result = Enumerable.Range(1, 4).ScanRight("5", (a, b) => string.Format("({0}/{1})", a, b));
            ]]></code>
            The <c>result</c> variable will contain <c>[ "(1+(2+(3+(4+5))))", "(2+(3+(4+5)))", "(3+(4+5))", "(4+5)", "5" ]</c>.
            </example>
            <remarks>
            This operator uses deferred execution and streams its results.
            Source sequence is consumed greedily when an iteration of the resulting sequence begins.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Segment``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Divides a sequence into multiple sequences by using a segment detector based on the original sequence
            </summary>
            <typeparam name="T">The type of the elements in the sequence</typeparam>
            <param name="source">The sequence to segment</param>
            <param name="newSegmentPredicate">A function, which returns <c>true</c> if the given element begins a new segment, and <c>false</c> otherwise</param>
            <returns>A sequence of segment, each of which is a portion of the original sequence</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either <paramref name="source" /> or <paramref name="newSegmentPredicate" /> are <see langword="null" />.
            </exception>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Segment``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Divides a sequence into multiple sequences by using a segment detector based on the original sequence
            </summary>
            <typeparam name="T">The type of the elements in the sequence</typeparam>
            <param name="source">The sequence to segment</param>
            <param name="newSegmentPredicate">A function, which returns <c>true</c> if the given element or index indicate a new segment, and <c>false</c> otherwise</param>
            <returns>A sequence of segment, each of which is a portion of the original sequence</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either <paramref name="source" /> or <paramref name="newSegmentPredicate" /> are <see langword="null" />.
            </exception>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Segment``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Int32,System.Boolean})">
            <summary>
            Divides a sequence into multiple sequences by using a segment detector based on the original sequence
            </summary>
            <typeparam name="T">The type of the elements in the sequence</typeparam>
            <param name="source">The sequence to segment</param>
            <param name="newSegmentPredicate">A function, which returns <c>true</c> if the given current element, previous element or index indicate a new segment, and <c>false</c> otherwise</param>
            <returns>A sequence of segment, each of which is a portion of the original sequence</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either <paramref name="source" /> or <paramref name="newSegmentPredicate" /> are <see langword="null" />.
            </exception>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Sequence(System.Int32,System.Int32)">
            <summary>
            Generates a sequence of integral numbers within the (inclusive) specified range.
            If sequence is ascending the step is +1, otherwise -1.
            </summary>
            <param name="start">The value of the first integer in the sequence.</param>
            <param name="stop">The value of the last integer in the sequence.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains a range of sequential integral numbers.</returns>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
            <example>
                <code><![CDATA[
            var result = MoreEnumerable.Sequence(6, 0);
            ]]></code>
            The <c>result</c> variable will contain <c>{ 6, 5, 4, 3, 2, 1, 0 }</c>.
            </example>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Sequence(System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates a sequence of integral numbers within the (inclusive) specified range.
            An additional parameter specifies the steps in which the integers of the sequence increase or decrease.
            </summary>
            <param name="start">The value of the first integer in the sequence.</param>
            <param name="stop">The value of the last integer in the sequence.</param>
            <param name="step">The step to define the next number.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains a range of sequential integral numbers.</returns>
            <remarks>
            When <paramref name="step" /> is equal to zero, this operator returns an
            infinite sequence where all elements are equals to <paramref name="start" />.
            This operator uses deferred execution and streams its results.
            </remarks>
            <example>
                <code><![CDATA[
            var result = MoreEnumerable.Sequence(6, 0, -2);
            ]]></code>
            The <c>result</c> variable will contain <c>{ 6, 4, 2, 0 }</c>.
            </example>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Shuffle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a sequence of elements in random order from the original
            sequence.
            </summary>
            <typeparam name="T">The type of source sequence elements.</typeparam>
            <param name="source">
            The sequence from which to return random elements.</param>
            <returns>
            A sequence of elements <paramref name="source" /> randomized in
            their order.
            </returns>
            <remarks>
            This method uses deferred execution and streams its results. The
            source sequence is entirely buffered before the results are
            streamed.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Shuffle``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <summary>
            Returns a sequence of elements in random order from the original
            sequence. An additional parameter specifies a random generator to be
            used for the random selection algorithm.
            </summary>
            <typeparam name="T">The type of source sequence elements.</typeparam>
            <param name="source">
            The sequence from which to return random elements.</param>
            <param name="rand">
            A random generator used as part of the selection algorithm.</param>
            <returns>
            A sequence of elements <paramref name="source" /> randomized in
            their order.
            </returns>
            <remarks>
            This method uses deferred execution and streams its results. The
            source sequence is entirely buffered before the results are
            streamed.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Bypasses a specified number of elements at the end of the sequence.
            </summary>
            <typeparam name="T">Type of the source sequence</typeparam>
            <param name="source">The source sequence.</param>
            <param name="count">The number of elements to bypass at the end of the source sequence.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the source sequence elements except for the bypassed ones at the end.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.SkipUntil``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Skips items from the input sequence until the given predicate returns true
            when applied to the current source item; that item will be the last skipped.
            </summary>
            <remarks>
                <para>
            SkipUntil differs from Enumerable.SkipWhile in two respects. Firstly, the sense
            of the predicate is reversed: it is expected that the predicate will return false
            to start with, and then return true - for example, when trying to find a matching
            item in a sequence.
            </para>
                <para>
            Secondly, SkipUntil skips the element which causes the predicate to return true. For
            example, in a sequence <code><![CDATA[{ 1, 2, 3, 4, 5 }]]></code> and with a predicate of
            <code><![CDATA[x => x == 3]]></code>, the result would be <code><![CDATA[{ 4, 5 }]]></code>.
            </para>
                <para>
            SkipUntil is as lazy as possible: it will not iterate over the source sequence
            until it has to, it won't iterate further than it has to, and it won't evaluate
            the predicate until it has to. (This means that an item may be returned which would
            actually cause the predicate to throw an exception if it were evaluated, so long as
            it comes after the first item causing the predicate to return true.)
            </para>
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <param name="source">Source sequence</param>
            <param name="predicate">Predicate used to determine when to stop yielding results from the source.</param>
            <returns>Items from the source sequence after the predicate first returns true when applied to the item.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="predicate" /> is null</exception>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Slice``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Extracts a contiguous count of elements from a sequence at a particular zero-based starting index
            </summary>
            <remarks>
            If the starting position or count specified result in slice extending past the end of the sequence,
            it will return all elements up to that point. There is no guarantee that the resulting sequence will
            contain the number of elements requested - it may have anywhere from 0 to <paramref name="count" />.<br />
            This method is implemented in an optimized manner for any sequence implementing <c>IList{T}</c>.<br />
            The result of Slice() is identical to: <c>sequence.Skip(startIndex).Take(count)</c></remarks>
            <typeparam name="T">The type of the elements in the source sequence</typeparam>
            <param name="sequence">The sequence from which to extract elements</param>
            <param name="startIndex">The zero-based index at which to begin slicing</param>
            <param name="count">The number of items to slice out of the index</param>
            <returns>A new sequence containing any elements sliced out from the source sequence</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.SortedMerge``1(System.Collections.Generic.IEnumerable{``0},MoreLinq.OrderByDirection,System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
             Merges two or more sequences that are in a common order (either ascending or descending) into
             a single sequence that preserves that order.
             </summary>
            <remarks>
             Using SortedMerge on sequences that are not ordered or are not in the same order produces
             undefined results.<br /><c>SortedMerge</c> uses performs the merge in a deferred, streaming manner. <br />
            
             Here is an example of a merge, as well as the produced result:
             <code><![CDATA[
               var s1 = new[] { 3, 7, 11 };
               var s2 = new[] { 2, 4, 20 };
               var s3 = new[] { 17, 19, 25 };
               var merged = s1.SortedMerge( OrderByDirection.Ascending, s2, s3 );
               var result = merged.ToArray();
               // result will be:
               // { 2, 3, 4, 7, 11, 17, 19, 20, 25 }
             ]]></code></remarks>
            <typeparam name="TSource">The type of the elements of the sequence</typeparam>
            <param name="source">The primary sequence with which to merge</param>
            <param name="direction">The ordering that all sequences must already exhibit</param>
            <param name="otherSequences">A variable argument array of zero or more other sequences to merge with</param>
            <returns>A merged, order-preserving sequence containing all of the elements of the original sequences</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.SortedMerge``1(System.Collections.Generic.IEnumerable{``0},MoreLinq.OrderByDirection,System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Merges two or more sequences that are in a common order (either ascending or descending) into
            a single sequence that preserves that order.
            </summary>
            <typeparam name="TSource">The type of the elements in the sequence</typeparam>
            <param name="source">The primary sequence with which to merge</param>
            <param name="direction">The ordering that all sequences must already exhibit</param>
            <param name="comparer">The comparer used to evaluate the relative order between elements</param>
            <param name="otherSequences">A variable argument array of zero or more other sequences to merge with</param>
            <returns>A merged, order-preserving sequence containing al of the elements of the original sequences</returns>
        </member>
        <member name="T:MoreLinq.MoreEnumerable.DisposableGroup`1">
            <summary>
            Class used to assist in ensuring that groups of disposable iterators
            are disposed - either when Excluded or when the DisposableGroup is disposed.
            </summary>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Split``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Splits the source sequence by a separator.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="separator">Separator element.</param>
            <returns>A sequence of splits of elements.</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Split``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32)">
            <summary>
            Splits the source sequence by a separator given a maximum count of splits.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="separator">Separator element.</param>
            <param name="count">Maximum number of splits.</param>
            <returns>A sequence of splits of elements.</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Split``2(System.Collections.Generic.IEnumerable{``0},``0,System.Func{System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            Splits the source sequence by a separator and then transforms
            the splits into results.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence.</typeparam>
            <typeparam name="TResult">Type of the result sequence elements.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="separator">Separator element.</param>
            <param name="resultSelector">Function used to project splits
            of source elements into elements of the resulting sequence.</param>
            <returns>
            A sequence of values typed as <typeparamref name="TResult" />.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Split``2(System.Collections.Generic.IEnumerable{``0},``0,System.Int32,System.Func{System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            Splits the source sequence by a separator, given a maximum count
            of splits, and then transforms the splits into results.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence.</typeparam>
            <typeparam name="TResult">Type of the result sequence elements.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="separator">Separator element.</param>
            <param name="count">Maximum number of splits.</param>
            <param name="resultSelector">Function used to project splits
            of source elements into elements of the resulting sequence.</param>
            <returns>
            A sequence of values typed as <typeparamref name="TResult" />.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Split``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Splits the source sequence by a separator and then transforms the
            splits into results.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="separator">Separator element.</param>
            <param name="comparer">Comparer used to determine separator
            element equality.</param>
            <returns>A sequence of splits of elements.</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Split``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0},System.Int32)">
            <summary>
            Splits the source sequence by a separator, given a maximum count
            of splits. A parameter specifies how the separator is compared
            for equality.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="separator">Separator element.</param>
            <param name="comparer">Comparer used to determine separator
            element equality.</param>
            <param name="count">Maximum number of splits.</param>
            <returns>A sequence of splits of elements.</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Split``2(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0},System.Func{System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            Splits the source sequence by a separator and then transforms the
            splits into results. A parameter specifies how the separator is
            compared for equality.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence.</typeparam>
            <typeparam name="TResult">Type of the result sequence elements.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="separator">Separator element.</param>
            <param name="comparer">Comparer used to determine separator
            element equality.</param>
            <param name="resultSelector">Function used to project splits
            of source elements into elements of the resulting sequence.</param>
            <returns>
            A sequence of values typed as <typeparamref name="TResult" />.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Split``2(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0},System.Int32,System.Func{System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            Splits the source sequence by a separator, given a maximum count
            of splits, and then transforms the splits into results. A
            parameter specifies how the separator is compared for equality.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence.</typeparam>
            <typeparam name="TResult">Type of the result sequence elements.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="separator">Separator element.</param>
            <param name="comparer">Comparer used to determine separator
            element equality.</param>
            <param name="count">Maximum number of splits.</param>
            <param name="resultSelector">Function used to project splits
            of source elements into elements of the resulting sequence.</param>
            <returns>
            A sequence of values typed as <typeparamref name="TResult" />.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Split``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Splits the source sequence by separator elements identified by a
            function.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="separatorFunc">Predicate function used to determine
            the splitter elements in the source sequence.</param>
            <returns>A sequence of splits of elements.</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Split``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Int32)">
            <summary>
            Splits the source sequence by separator elements identified by a
            function, given a maximum count of splits.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="separatorFunc">Predicate function used to determine
            the splitter elements in the source sequence.</param>
            <param name="count">Maximum number of splits.</param>
            <returns>A sequence of splits of elements.</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Split``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            Splits the source sequence by separator elements identified by
            a function and then transforms the splits into results.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence.</typeparam>
            <typeparam name="TResult">Type of the result sequence elements.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="separatorFunc">Predicate function used to determine
            the splitter elements in the source sequence.</param>
            <param name="resultSelector">Function used to project splits
            of source elements into elements of the resulting sequence.</param>
            <returns>
            A sequence of values typed as <typeparamref name="TResult" />.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Split``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Int32,System.Func{System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            Splits the source sequence by separator elements identified by
            a function, given a maximum count of splits, and then transforms
            the splits into results.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence.</typeparam>
            <typeparam name="TResult">Type of the result sequence elements.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="separatorFunc">Predicate function used to determine
            the splitter elements in the source sequence.</param>
            <param name="count">Maximum number of splits.</param>
            <param name="resultSelector">Function used to project a split
            group of source elements into an element of the resulting sequence.</param>
            <returns>
            A sequence of values typed as <typeparamref name="TResult" />.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.StartsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether the beginning of the first sequence is
            equivalent to the second sequence, using the default equality
            comparer.
            </summary>
            <typeparam name="T">Type of elements.</typeparam>
            <param name="first">The sequence to check.</param>
            <param name="second">The sequence to compare to.</param>
            <returns>
                <c>true</c> if <paramref name="first" /> begins with elements
            equivalent to <paramref name="second" />.
            </returns>
            <remarks>
            This is the <see cref="T:System.Collections.Generic.IEnumerable`1" /> equivalent of
            <see cref="M:System.String.StartsWith(System.String)" /> and it calls
            <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)" /> using
            <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" /> on pairs of elements at
            the same index.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.StartsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether the beginning of the first sequence is
            equivalent to the second sequence, using the specified element
            equality comparer.
            </summary>
            <typeparam name="T">Type of elements.</typeparam>
            <param name="first">The sequence to check.</param>
            <param name="second">The sequence to compare to.</param>
            <param name="comparer">Equality comparer to use.</param>
            <returns>
                <c>true</c> if <paramref name="first" /> begins with elements
            equivalent to <paramref name="second" />.
            </returns>
            <remarks>
            This is the <see cref="T:System.Collections.Generic.IEnumerable`1" /> equivalent of
            <see cref="M:System.String.StartsWith(System.String)" /> and
            it calls <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)" /> on pairs
            of elements at the same index.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Subsets``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a sequence of <see cref="T:System.Collections.Generic.IList`1" /> representing all of
            the subsets of any size that are part of the original sequence. In
            mathematics, it is equivalent to the <em>power set</em> of a set.
            </summary>
            <remarks>
            This operator produces all of the subsets of a given sequence. Subsets are returned
            in increasing cardinality, starting with the empty set and terminating with the
            entire original sequence.<br />
            Subsets are produced in a deferred, streaming manner; however, each subset is returned
            as a materialized list.<br />
            There are 2^N subsets of a given sequence, where N =&gt; sequence.Count().
            </remarks>
            <param name="sequence">Sequence for which to produce subsets</param>
            <typeparam name="T">The type of the elements in the sequence</typeparam>
            <returns>A sequence of lists that represent the all subsets of the original sequence</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="sequence" /> is <see langword="null" /></exception>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Subsets``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns a sequence of <see cref="T:System.Collections.Generic.IList`1" /> representing all
            subsets of a given size that are part of the original sequence. In
            mathematics, it is equivalent to the <em>combinations</em> or
            <em>k-subsets</em> of a set.
            </summary>
            <param name="sequence">Sequence for which to produce subsets</param>
            <param name="subsetSize">The size of the subsets to produce</param>
            <typeparam name="T">The type of the elements in the sequence</typeparam>
            <returns>A sequence of lists that represents of K-sized subsets of the original sequence</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="sequence" /> is <see langword="null" /></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="subsetSize" /> is less than zero.
            </exception>
        </member>
        <member name="T:MoreLinq.MoreEnumerable.SubsetGenerator`1">
            <summary>
            This class is responsible for producing the lexographically ordered k-subsets
            </summary>
        </member>
        <member name="T:MoreLinq.MoreEnumerable.SubsetGenerator`1.SubsetEnumerator">
            <summary>
            SubsetEnumerator uses a snapshot of the original sequence, and an
            iterative, reductive swap algorithm to produce all subsets of a
            predetermined size less than or equal to the original set size.
            </summary>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.SubsetGenerator`1.GetEnumerator">
            <summary>
            Returns an enumerator that produces all of the k-sized
            subsets of the initial value set. The enumerator returns
            and <see cref="T:System.Collections.Generic.IList`1" /> for each subset.
            </summary>
            <returns>an <see cref="T:System.Collections.IEnumerator" /> that enumerates all k-sized subsets</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.TagFirstLast``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean,System.Boolean,``1})">
            <summary>
            Returns a sequence resulting from applying a function to each
            element in the source sequence with additional parameters
            indicating whether the element is the first and/or last of the
            sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <typeparam name="TResult">The type of the element of the returned sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="resultSelector">A function that determines how to
            project the each element along with its first or last tag.</param>
            <returns>
            Returns the resulting sequence.
            </returns>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
            <example>
                <code><![CDATA[
            var numbers = new[] { 123, 456, 789 };
            var result = numbers.TagFirstLast((num, fst, lst) => new
                         {
                             Number = num,
                             IsFirst = fst, IsLast = lst
                         });
            ]]></code>
            The <c>result</c> variable, when iterated over, will yield
            <c>{ Number = 123, IsFirst = True, IsLast = False }</c>,
            <c>{ Number = 456, IsFirst = False, IsLast = False }</c> and
            <c>{ Number = 789, IsFirst = False, IsLast = True }</c> in turn.
            </example>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.TakeEvery``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns every N-th element of a sequence.
            </summary>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <param name="source">Source sequence</param>
            <param name="step">Number of elements to bypass before returning the next element.</param>
            <returns>
            A sequence with every N-th element of the input sequence.
            </returns>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
            <example>
                <code><![CDATA[
            int[] numbers = { 1, 2, 3, 4, 5 };
            var result = numbers.TakeEvery(2);
            ]]></code>
            The <c>result</c> variable, when iterated over, will yield 1, 3 and 5, in turn.
            </example>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the end of
            a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The sequence to return the last element of.</param>
            <param name="count">The number of elements to return.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the specified number of
            elements from the end of the input sequence.
            </returns>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
            <example>
                <code><![CDATA[
            int[] numbers = { 12, 34, 56, 78 };
            var result = numbers.TakeLast(2);
            ]]></code>
            The <c>result</c> variable, when iterated over, will yield
            56 and 78 in turn.
            </example>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.TakeUntil``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns items from the input sequence until the given predicate returns true
            when applied to the current source item; that item will be the last returned.
            </summary>
            <remarks>
                <para>
            TakeUntil differs from Enumerable.TakeWhile in two respects. Firstly, the sense
            of the predicate is reversed: it is expected that the predicate will return false
            to start with, and then return true - for example, when trying to find a matching
            item in a sequence.
            </para>
                <para>
            Secondly, TakeUntil yields the element which causes the predicate to return true. For
            example, in a sequence <code><![CDATA[{ 1, 2, 3, 4, 5 }]]></code> and with a predicate of
            <code><![CDATA[x => x == 3]]></code>, the result would be <code><![CDATA[{ 1, 2, 3 }]]></code>.
            </para>
                <para>
            TakeUntil is as lazy as possible: it will not iterate over the source sequence
            until it has to, it won't iterate further than it has to, and it won't evaluate
            the predicate until it has to. (This means that an item may be returned which would
            actually cause the predicate to throw an exception if it were evaluated, so long as
            no more items of data are requested.)
            </para>
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <param name="source">Source sequence</param>
            <param name="predicate">Predicate used to determine when to stop yielding results from the source.</param>
            <returns>Items from the source sequence, until the predicate returns true when applied to the item.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="predicate" /> is null</exception>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToArrayByIndex``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Creates an array from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> where a
            function is used to determine the index at which an element will
            be placed in the array.
            </summary>
            <param name="source">The source sequence for the array.</param>
            <param name="indexSelector">
            A function that maps an element to its index.</param>
            <typeparam name="T">
            The type of the element in <paramref name="source" />.</typeparam>
            <returns>
            An array that contains the elements from the input sequence. The
            size of the array will be as large as the highest index returned
            by the <paramref name="indexSelector" /> plus 1.
            </returns>
            <remarks>
            This method forces immediate query evaluation. It should not be
            used on infinite sequences. If more than one element maps to the
            same index then the latter element overwrites the former in the
            resulting array.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToArrayByIndex``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},System.Func{``0,``1})">
            <summary>
            Creates an array from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> where a
            function is used to determine the index at which an element will
            be placed in the array. The elements are projected into the array
            via an additional function.
            </summary>
            <param name="source">The source sequence for the array.</param>
            <param name="indexSelector">
            A function that maps an element to its index.</param>
            <param name="resultSelector">
            A function to project a source element into an element of the
            resulting array.</param>
            <typeparam name="T">
            The type of the element in <paramref name="source" />.</typeparam>
            <typeparam name="TResult">
            The type of the element in the resulting array.</typeparam>
            <returns>
            An array that contains the projected elements from the input
            sequence. The size of the array will be as large as the highest
            index returned by the <paramref name="indexSelector" /> plus 1.
            </returns>
            <remarks>
            This method forces immediate query evaluation. It should not be
            used on infinite sequences. If more than one element maps to the
            same index then the latter element overwrites the former in the
            resulting array.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToArrayByIndex``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},System.Func{``0,System.Int32,``1})">
            <summary>
            Creates an array from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> where a
            function is used to determine the index at which an element will
            be placed in the array. The elements are projected into the array
            via an additional function.
            </summary>
            <param name="source">The source sequence for the array.</param>
            <param name="indexSelector">
            A function that maps an element to its index.</param>
            <param name="resultSelector">
            A function to project a source element into an element of the
            resulting array.</param>
            <typeparam name="T">
            The type of the element in <paramref name="source" />.</typeparam>
            <typeparam name="TResult">
            The type of the element in the resulting array.</typeparam>
            <returns>
            An array that contains the projected elements from the input
            sequence. The size of the array will be as large as the highest
            index returned by the <paramref name="indexSelector" /> plus 1.
            </returns>
            <remarks>
            This method forces immediate query evaluation. It should not be
            used on infinite sequences. If more than one element maps to the
            same index then the latter element overwrites the former in the
            resulting array.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToArrayByIndex``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Int32})">
            <summary>
            Creates an array of user-specified length from an
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> where a function is used to determine
            the index at which an element will be placed in the array.
            </summary>
            <param name="source">The source sequence for the array.</param>
            <param name="length">The (non-negative) length of the resulting array.</param>
            <param name="indexSelector">
            A function that maps an element to its index.</param>
            <typeparam name="T">
            The type of the element in <paramref name="source" />.</typeparam>
            <returns>
            An array of size <paramref name="length" /> that contains the
            elements from the input sequence.
            </returns>
            <remarks>
            This method forces immediate query evaluation. It should not be
            used on infinite sequences. If more than one element maps to the
            same index then the latter element overwrites the former in the
            resulting array.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToArrayByIndex``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Int32},System.Func{``0,``1})">
            <summary>
            Creates an array of user-specified length from an
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> where a function is used to determine
            the index at which an element will be placed in the array. The
            elements are projected into the array via an additional function.
            </summary>
            <param name="source">The source sequence for the array.</param>
            <param name="length">The (non-negative) length of the resulting array.</param>
            <param name="indexSelector">
            A function that maps an element to its index.</param>
            <param name="resultSelector">
            A function to project a source element into an element of the
            resulting array.</param>
            <typeparam name="T">
            The type of the element in <paramref name="source" />.</typeparam>
            <typeparam name="TResult">
            The type of the element in the resulting array.</typeparam>
            <returns>
            An array of size <paramref name="length" /> that contains the
            projected elements from the input sequence.
            </returns>
            <remarks>
            This method forces immediate query evaluation. It should not be
            used on infinite sequences. If more than one element maps to the
            same index then the latter element overwrites the former in the
            resulting array.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToArrayByIndex``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Int32},System.Func{``0,System.Int32,``1})">
            <summary>
            Creates an array of user-specified length from an
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> where a function is used to determine
            the index at which an element will be placed in the array. The
            elements are projected into the array via an additional function.
            </summary>
            <param name="source">The source sequence for the array.</param>
            <param name="length">The (non-negative) length of the resulting array.</param>
            <param name="indexSelector">
            A function that maps an element to its index.</param>
            <param name="resultSelector">
            A function to project a source element into an element of the
            resulting array.</param>
            <typeparam name="T">
            The type of the element in <paramref name="source" />.</typeparam>
            <typeparam name="TResult">
            The type of the element in the resulting array.</typeparam>
            <returns>
            An array of size <paramref name="length" /> that contains the
            projected elements from the input sequence.
            </returns>
            <remarks>
            This method forces immediate query evaluation. It should not be
            used on infinite sequences. If more than one element maps to the
            same index then the latter element overwrites the former in the
            resulting array.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDataTable``2(System.Collections.Generic.IEnumerable{``0},``1)">
            <summary>
            Appends elements in the sequence as rows of a given <see cref="T:System.Data.DataTable" /> object.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source" />.</typeparam>
            <typeparam name="TTable" />
            <param name="source">The source.</param>
            <param name="table" />
            <returns>
            A <see cref="T:System.Data.DataTable" /> or subclass representing the source.
            </returns>
            <remarks>This operator uses immediate execution.</remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Appends elements in the sequence as rows of a given <see cref="T:System.Data.DataTable" />
            object with a set of lambda expressions specifying which members (property
            or field) of each element in the sequence will supply the column values.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The source.</param>
            <param name="expressions">Expressions providing access to element members.</param>
            <returns>
            A <see cref="T:System.Data.DataTable" /> representing the source.
            </returns>
            <remarks>This operator uses immediate execution.</remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDataTable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts a sequence to a <see cref="T:System.Data.DataTable" /> object.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The source.</param>
            <returns>
            A <see cref="T:System.Data.DataTable" /> representing the source.
            </returns>
            <remarks>This operator uses immediate execution.</remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDataTable``2(System.Collections.Generic.IEnumerable{``0},``1,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Appends elements in the sequence as rows of a given <see cref="T:System.Data.DataTable" />
            object with a set of lambda expressions specifying which members (property
            or field) of each element in the sequence will supply the column values.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source" />.</typeparam>
            <typeparam name="TTable">The type of the input and resulting <see cref="T:System.Data.DataTable" /> object.</typeparam>
            <param name="source">The source.</param>
            <param name="table">The <see cref="T:System.Data.DataTable" /> type of object where to add rows</param>
            <param name="expressions">Expressions providing access to element members.</param>
            <returns>
            A <see cref="T:System.Data.DataTable" /> or subclass representing the source.
            </returns>
            <remarks>This operator uses immediate execution.</remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.BuildOrBindSchema(System.Data.DataTable,System.Reflection.MemberInfo[])">
            <remarks>
            The resulting array may contain null entries and those represent
            columns for which there is no source member supplying a value.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence</typeparam>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements.</param>
            <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="delimiter" /> is <c>null</c>.
            </exception>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Boolean},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements.</param>
            <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="delimiter" /> is <c>null</c>.
            </exception>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Byte},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements.</param>
            <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="delimiter" /> is <c>null</c>.
            </exception>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Char},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements.</param>
            <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="delimiter" /> is <c>null</c>.
            </exception>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Decimal},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements.</param>
            <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="delimiter" /> is <c>null</c>.
            </exception>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Double},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements.</param>
            <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="delimiter" /> is <c>null</c>.
            </exception>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Single},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements.</param>
            <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="delimiter" /> is <c>null</c>.
            </exception>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Int32},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements.</param>
            <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="delimiter" /> is <c>null</c>.
            </exception>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Int64},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements.</param>
            <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="delimiter" /> is <c>null</c>.
            </exception>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.SByte},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements.</param>
            <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="delimiter" /> is <c>null</c>.
            </exception>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Int16},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements.</param>
            <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="delimiter" /> is <c>null</c>.
            </exception>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements.</param>
            <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="delimiter" /> is <c>null</c>.
            </exception>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.UInt32},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements.</param>
            <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="delimiter" /> is <c>null</c>.
            </exception>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.UInt64},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements.</param>
            <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="delimiter" /> is <c>null</c>.
            </exception>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDelimitedString(System.Collections.Generic.IEnumerable{System.UInt16},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements.</param>
            <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="delimiter" /> is <c>null</c>.
            </exception>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from a sequence of
            <see cref="T:System.Collections.Generic.KeyValuePair`2" /> elements.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source sequence of key-value pairs.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2" /> containing the values
            mapped to their keys.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from a sequence of
            <see cref="T:System.Collections.Generic.KeyValuePair`2" /> elements. An additional
            parameter specifies a comparer for keys.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source sequence of key-value pairs.</param>
            <param name="comparer">The comparer for keys.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2" /> containing the values
            mapped to their keys.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}})">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from a sequence of
            tuples of 2 where the first item is the key and the second the
            value.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source sequence of couples (tuple of 2).</param>
            <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2" /> containing the values
            mapped to their keys.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from a sequence of
            tuples of 2 where the first item is the key and the second the
            value. An additional parameter specifies a comparer for keys.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source sequence of couples (tuple of 2).</param>
            <param name="comparer">The comparer for keys.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2" /> containing the values
            mapped to their keys.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.HashSet`1" /> of the source items using the default equality
            comparer for the type.
            </summary>
            <typeparam name="TSource">Type of elements in source sequence.</typeparam>
            <param name="source">Source sequence</param>
            <returns>A hash set of the items in the sequence, using the default equality comparer.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <remarks>
            This evaluates the input sequence completely.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.HashSet`1" /> of the source items using the specified equality
            comparer for the type.
            </summary>
            <typeparam name="TSource">Type of elements in source sequence.</typeparam>
            <param name="source">Source sequence</param>
            <param name="comparer">Equality comparer to use; a value of null will cause the type's default equality comparer to be used</param>
            <returns>A hash set of the items in the sequence, using the default equality comparer.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <remarks>
            This evaluates the input sequence completely.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToLookup``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Creates a <see cref="T:System.Linq.ILookup`2" /> from a sequence of
            <see cref="T:System.Collections.Generic.KeyValuePair`2" /> elements.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source sequence of key-value pairs.</param>
            <returns>
            A <see cref="T:System.Linq.ILookup`2" /> containing the values
            mapped to their keys.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToLookup``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a <see cref="T:System.Linq.ILookup`2" /> from a sequence of
            <see cref="T:System.Collections.Generic.KeyValuePair`2" /> elements. An additional
            parameter specifies a comparer for keys.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source sequence of key-value pairs.</param>
            <param name="comparer">The comparer for keys.</param>
            <returns>
            A <see cref="T:System.Linq.ILookup`2" /> containing the values
            mapped to their keys.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToLookup``2(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}})">
            <summary>
            Creates a <see cref="T:MoreLinq.Lookup`2" /> from a sequence of
            tuples of 2 where the first item is the key and the second the
            value.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source sequence of tuples of 2.</param>
            <returns>
            A <see cref="T:MoreLinq.Lookup`2" /> containing the values
            mapped to their keys.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ToLookup``2(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a <see cref="T:MoreLinq.Lookup`2" /> from a sequence of
            tuples of 2 where the first item is the key and the second the
            value. An additional parameter specifies a comparer for keys.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source sequence of tuples of 2.</param>
            <param name="comparer">The comparer for keys.</param>
            <returns>
            A <see cref="T:MoreLinq.Lookup`2" /> containing the values
            mapped to their keys.
            </returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Trace``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Traces the elements of a source sequence for diagnostics.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence</typeparam>
            <param name="source">Source sequence whose elements to trace.</param>
            <returns>
            Return the source sequence unmodified.
            </returns>
            <remarks>
            This a pass-through operator that uses deferred execution and
            streams the results.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Trace``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Traces the elements of a source sequence for diagnostics using
            custom formatting.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence</typeparam>
            <param name="source">Source sequence whose elements to trace.</param>
            <param name="format">
            String to use to format the trace message. If null then the
            element value becomes the traced message.
            </param>
            <returns>
            Return the source sequence unmodified.
            </returns>
            <remarks>
            This a pass-through operator that uses deferred execution and
            streams the results.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Trace``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
            Traces the elements of a source sequence for diagnostics using
            a custom formatter.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence</typeparam>
            <param name="source">Source sequence whose elements to trace.</param>
            <param name="formatter">Function used to format each source element into a string.</param>
            <returns>
            Return the source sequence unmodified.
            </returns>
            <remarks>
            This a pass-through operator that uses deferred execution and
            streams the results.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Transpose``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Transposes a sequence of rows into a sequence of columns.
            </summary>
            <typeparam name="T">Type of source sequence elements.</typeparam>
            <param name="source">Source sequence to transpose.</param>
            <returns>
            Returns a sequence of columns in the source swapped into rows.
            </returns>
            <remarks>
            If a rows is shorter than a follow it then the shorter row's
            elements are skipped in the corresponding column sequences.
            This operator uses deferred execution and streams its results.
            Source sequence is consumed greedily when an iteration begins.
            The inner sequences representing rows are consumed lazily and
            resulting sequences of columns are streamed.
            </remarks>
            <example>
                <code><![CDATA[
            var matrix = new[]
            {
                new[] { 10, 11 },
                new[] { 20 },
                new[] { 30, 31, 32 }
            };
            var result = matrix.Transpose();
            ]]></code>
            The <c>result</c> variable will contain [[10, 20, 30], [11, 31], [32]].
            </example>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.TraverseBreadthFirst``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Traverses a tree in a breadth-first fashion, starting at a root
            node and using a user-defined function to get the children at each
            node of the tree.
            </summary>
            <typeparam name="T">The tree node type</typeparam>
            <param name="root">The root of the tree to traverse.</param>
            <param name="childrenSelector">
            The function that produces the children of each element.</param>
            <returns>A sequence containing the traversed values.</returns>
            <remarks>
                <para>
            The tree is not checked for loops. If the resulting sequence needs
            to be finite then it is the responsibility of
            <paramref name="childrenSelector" /> to ensure that loops are not
            produced.</para>
                <para>
            This function defers traversal until needed and streams the
            results.</para>
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.TraverseDepthFirst``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Traverses a tree in a depth-first fashion, starting at a root node
            and using a user-defined function to get the children at each node
            of the tree.
            </summary>
            <typeparam name="T">The tree node type.</typeparam>
            <param name="root">The root of the tree to traverse.</param>
            <param name="childrenSelector">
            The function that produces the children of each element.</param>
            <returns>A sequence containing the traversed values.</returns>
            <remarks>
                <para>
            The tree is not checked for loops. If the resulting sequence needs
            to be finite then it is the responsibility of
            <paramref name="childrenSelector" /> to ensure that loops are not
            produced.</para>
                <para>
            This function defers traversal until needed and streams the
            results.</para>
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Unfold``3(``0,System.Func{``0,``1},System.Func{``1,System.Boolean},System.Func{``1,``0},System.Func{``1,``2})">
            <summary>
            Returns a sequence generated by applying a state to the generator function,
            and from its result, determines if the sequence should have a next element, its value,
            and the next state in the recursive call.
            </summary>
            <typeparam name="TState">Type of state elements.</typeparam>
            <typeparam name="T">Type of the elements generated by the generator function.</typeparam>
            <typeparam name="TResult">The type of the elements of the result sequence.</typeparam>
            <param name="state">The initial state.</param>
            <param name="generator">
            Function that takes a state and computes the next state and the next element of the sequence.
            </param>
            <param name="predicate">
            Function to determine if the unfolding should continue based the
            result of the <paramref name="generator" /> function.
            </param>
            <param name="stateSelector">
            Function to select the state from the output of the <paramref name="generator" /> function.
            </param>
            <param name="resultSelector">
            Function to select the result from the output of the <paramref name="generator" /> function.
            </param>
            <returns>A sequence containing the results generated by the <paramref name="resultSelector" /> function.</returns>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Window``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Processes a sequence into a series of subsequences representing a windowed subset of the original
            </summary>
            <remarks>
            The number of sequences returned is: <c>Max(0, sequence.Count() - windowSize) + 1</c><br />
            Returned subsequences are buffered, but the overall operation is streamed.<br /></remarks>
            <typeparam name="TSource">The type of the elements of the source sequence</typeparam>
            <param name="source">The sequence to evaluate a sliding window over</param>
            <param name="size">The size (number of elements) in each window</param>
            <returns>A series of sequences representing each sliding window subsequence</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.Windowed``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Processes a sequence into a series of subsequences representing a windowed subset of the original
            </summary>
            <remarks>
            The number of sequences returned is: <c>Max(0, sequence.Count() - windowSize) + 1</c><br />
            Returned subsequences are buffered, but the overall operation is streamed.<br /></remarks>
            <typeparam name="TSource">The type of the elements of the source sequence</typeparam>
            <param name="source">The sequence to evaluate a sliding window over</param>
            <param name="size">The size (number of elements) in each window</param>
            <returns>A series of sequences representing each sliding window subsequence</returns>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.WindowLeft``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
             Creates a left-aligned sliding window of a given size over the
             source sequence.
             </summary>
            <typeparam name="TSource">
             The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">
             The sequence over which to create the sliding window.</param>
            <param name="size">Size of the sliding window.</param>
            <returns>A sequence representing each sliding window.</returns>
            <remarks>
                <para>
             A window can contain fewer elements than <paramref name="size" />,
             especially as it slides over the end of the sequence.</para>
                <para>
             This operator uses deferred execution and streams its results.</para>
            </remarks>
            <example>
                <code><![CDATA[
             Console.WriteLine(
                 Enumerable
                     .Range(1, 5)
                     .WindowLeft(3)
                     .Select(w => "AVG(" + w.ToDelimitedString(",") + ") = " + w.Average())
                     .ToDelimitedString(Environment.NewLine));
            
             // Output:
             // AVG(1,2,3) = 2
             // AVG(2,3,4) = 3
             // AVG(3,4,5) = 4
             // AVG(4,5) = 4.5
             // AVG(5) = 5
             ]]></code>
            </example>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.WindowRight``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
             Creates a right-aligned sliding window over the source sequence
             of a given size.
             </summary>
            <typeparam name="TSource">
             The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">
             The sequence over which to create the sliding window.</param>
            <param name="size">Size of the sliding window.</param>
            <returns>A sequence representing each sliding window.</returns>
            <remarks>
                <para>
             A window can contain fewer elements than <paramref name="size" />,
             especially as it slides over the start of the sequence.</para>
                <para>
             This operator uses deferred execution and streams its results.</para>
            </remarks>
            <example>
                <code><![CDATA[
             Console.WriteLine(
                 Enumerable
                     .Range(1, 5)
                     .WindowRight(3)
                     .Select(w => "AVG(" + w.ToDelimitedString(",") + ") = " + w.Average())
                     .ToDelimitedString(Environment.NewLine));
            
             // Output:
             // AVG(1) = 1
             // AVG(1,2) = 1.5
             // AVG(1,2,3) = 2
             // AVG(2,3,4) = 3
             // AVG(3,4,5) = 4
             ]]></code>
            </example>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.WindowRightWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Creates a right-aligned sliding window over the source sequence
            with a predicate function determining the window range.
            </summary>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ZipLongest``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Returns a projection of tuples, where each tuple contains the N-th
            element from each of the argument sequences. The resulting sequence
            will always be as long as the longest of input sequences where the
            default value of each of the shorter sequence element types is used
            for padding.
            </summary>
            <typeparam name="TFirst">Type of elements in first sequence.</typeparam>
            <typeparam name="TSecond">Type of elements in second sequence.</typeparam>
            <typeparam name="TResult">Type of elements in result sequence.</typeparam>
            <param name="first">The first sequence.</param>
            <param name="second">The second sequence.</param>
            <param name="resultSelector">
            Function to apply to each pair of elements.</param>
            <returns>
            A sequence that contains elements of the two input sequences,
            combined by <paramref name="resultSelector" />.
            </returns>
            <example>
                <code><![CDATA[
            var numbers = { 1, 2, 3 };
            var letters = { "A", "B", "C", "D" };
            var zipped = numbers.ZipLongest(letters, (n, l) => n + l);
            ]]></code>
            The <c>zipped</c> variable, when iterated over, will yield "1A",
            "2B", "3C", "0D" in turn.
            </example>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ZipLongest``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Func{``0,``1,``2,``3})">
            <summary>
            Returns a projection of tuples, where each tuple contains the N-th
            element from each of the argument sequences. The resulting sequence
            will always be as long as the longest of input sequences where the
            default value of each of the shorter sequence element types is used
            for padding.
            </summary>
            <typeparam name="T1">Type of elements in first sequence.</typeparam>
            <typeparam name="T2">Type of elements in second sequence.</typeparam>
            <typeparam name="T3">Type of elements in third sequence.</typeparam>
            <typeparam name="TResult">Type of elements in result sequence.</typeparam>
            <param name="first">The first sequence.</param>
            <param name="second">The second sequence.</param>
            <param name="third">The third sequence.</param>
            <param name="resultSelector">
            Function to apply to each triplet of elements.</param>
            <returns>
            A sequence that contains elements of the three input sequences,
            combined by <paramref name="resultSelector" />.
            </returns>
            <example>
                <code><![CDATA[
            var numbers = new[] { 1, 2, 3 };
            var letters = new[] { "A", "B", "C", "D" };
            var chars   = new[] { 'a', 'b', 'c', 'd', 'e' };
            var zipped  = numbers.ZipLongest(letters, chars, (n, l, c) => n + l + c);
            ]]></code>
            The <c>zipped</c> variable, when iterated over, will yield "1Aa",
            "2Bb", "3Cc", "0Dd", "0e" in turn.
            </example>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ZipLongest``5(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Returns a projection of tuples, where each tuple contains the N-th
            element from each of the argument sequences. The resulting sequence
            will always be as long as the longest of input sequences where the
            default value of each of the shorter sequence element types is used
            for padding.
            </summary>
            <typeparam name="T1">Type of elements in first sequence</typeparam>
            <typeparam name="T2">Type of elements in second sequence</typeparam>
            <typeparam name="T3">Type of elements in third sequence</typeparam>
            <typeparam name="T4">Type of elements in fourth sequence</typeparam>
            <typeparam name="TResult">Type of elements in result sequence</typeparam>
            <param name="first">The first sequence.</param>
            <param name="second">The second sequence.</param>
            <param name="third">The third sequence.</param>
            <param name="fourth">The fourth sequence.</param>
            <param name="resultSelector">
            Function to apply to each quadruplet of elements.</param>
            <returns>
            A sequence that contains elements of the four input sequences,
            combined by <paramref name="resultSelector" />.
            </returns>
            <example>
                <code><![CDATA[
            var numbers = new[] { 1, 2, 3 };
            var letters = new[] { "A", "B", "C", "D" };
            var chars   = new[] { 'a', 'b', 'c', 'd', 'e' };
            var flags   = new[] { true, false, true, false, true, false };
            var zipped  = numbers.ZipLongest(letters, chars, flags, (n, l, c, f) => n + l + c + f);
            ]]></code>
            The <c>zipped</c> variable, when iterated over, will yield "1AaTrue",
            "2BbFalse", "3CcTrue", "0DdFalse", "0eTrue", "0\0False" in turn.
            </example>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ZipShortest``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Returns a projection of tuples, where each tuple contains the N-th
            element from each of the argument sequences. The resulting sequence
            is as short as the shortest input sequence.
            </summary>
            <typeparam name="TFirst">Type of elements in first sequence.</typeparam>
            <typeparam name="TSecond">Type of elements in second sequence.</typeparam>
            <typeparam name="TResult">Type of elements in result sequence.</typeparam>
            <param name="first">The first sequence.</param>
            <param name="second">The second sequence.</param>
            <param name="resultSelector">
            Function to apply to each pair of elements.</param>
            <returns>
            A projection of tuples, where each tuple contains the N-th element
            from each of the argument sequences.</returns>
            <example>
                <code><![CDATA[
            var numbers = new[] { 1, 2, 3 };
            var letters = new[] { "A", "B", "C", "D" };
            var zipped = numbers.ZipShortest(letters, (n, l) => n + l);
            ]]></code>
            The <c>zipped</c> variable, when iterated over, will yield "1A", "2B", "3C", in turn.
            </example>
            <remarks>
                <para>
            If the input sequences are of different lengths, the result sequence
            is terminated as soon as the shortest input sequence is exhausted
            and remainder elements from the longer sequences are never consumed.
            </para>
                <para>
            This operator uses deferred execution and streams its results.</para>
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ZipShortest``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Func{``0,``1,``2,``3})">
            <summary>
            Returns a projection of tuples, where each tuple contains the N-th
            element from each of the argument sequences. The resulting sequence
            is as short as the shortest input sequence.
            </summary>
            <typeparam name="T1">Type of elements in first sequence.</typeparam>
            <typeparam name="T2">Type of elements in second sequence.</typeparam>
            <typeparam name="T3">Type of elements in third sequence.</typeparam>
            <typeparam name="TResult">Type of elements in result sequence.</typeparam>
            <param name="first">First sequence</param>
            <param name="second">Second sequence</param>
            <param name="third">Third sequence</param>
            <param name="resultSelector">
            Function to apply to each triplet of elements.</param>
            <returns>
            A projection of tuples, where each tuple contains the N-th element
            from each of the argument sequences.</returns>
            <example>
                <code><![CDATA[
            var numbers = new[] { 1, 2, 3 };
            var letters = new[] { "A", "B", "C", "D" };
            var chars   = new[] { 'a', 'b', 'c', 'd', 'e' };
            var zipped  = numbers.ZipShortest(letters, chars, (n, l, c) => c + n + l);
            ]]></code>
            The <c>zipped</c> variable, when iterated over, will yield
            "98A", "100B", "102C", in turn.
            </example>
            <remarks>
                <para>
            If the input sequences are of different lengths, the result sequence
            is terminated as soon as the shortest input sequence is exhausted
            and remainder elements from the longer sequences are never consumed.
            </para>
                <para>
            This operator uses deferred execution and streams its results.</para>
            </remarks>
        </member>
        <member name="M:MoreLinq.MoreEnumerable.ZipShortest``5(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Returns a projection of tuples, where each tuple contains the N-th
            element from each of the argument sequences. The resulting sequence
            is as short as the shortest input sequence.
            </summary>
            <typeparam name="T1">Type of elements in first sequence.</typeparam>
            <typeparam name="T2">Type of elements in second sequence.</typeparam>
            <typeparam name="T3">Type of elements in third sequence.</typeparam>
            <typeparam name="T4">Type of elements in fourth sequence.</typeparam>
            <typeparam name="TResult">Type of elements in result sequence.</typeparam>
            <param name="first">The first sequence.</param>
            <param name="second">The second sequence.</param>
            <param name="third">The third sequence.</param>
            <param name="fourth">The fourth sequence.</param>
            <param name="resultSelector">
            Function to apply to each quadruplet of elements.</param>
            <returns>
            A projection of tuples, where each tuple contains the N-th element
            from each of the argument sequences.</returns>
            <example>
                <code><![CDATA[
            var numbers = new[] { 1, 2, 3 };
            var letters = new[] { "A", "B", "C", "D" };
            var chars   = new[] { 'a', 'b', 'c', 'd', 'e' };
            var flags   = new[] { true, false };
            var zipped  = numbers.ZipShortest(letters, chars, flags, (n, l, c, f) => n + l + c + f);
            ]]></code>
            The <c>zipped</c> variable, when iterated over, will yield
            "1AaTrue", "2BbFalse" in turn.
            </example>
            <remarks>
                <para>
            If the input sequences are of different lengths, the result sequence
            is terminated as soon as the shortest input sequence is exhausted
            and remainder elements from the longer sequences are never consumed.
            </para>
                <para>
            This operator uses deferred execution and streams its results.</para>
            </remarks>
        </member>
        <member name="T:MoreLinq.Experimental.ExperimentalEnumerable">
            <summary>
                <para>
            Provides a set of static methods for querying objects that
            implement <see cref="T:System.Collections.Generic.IEnumerable`1" />.</para>
                <para>
                    <strong>THE METHODS ARE EXPERIMENTAL. THEY MAY BE UNSTABLE AND
            UNTESTED. THEY MAY BE REMOVED FROM A FUTURE MAJOR OR MINOR RELEASE AND
            POSSIBLY WITHOUT NOTICE. USE THEM AT YOUR OWN RISK. THE METHODS ARE
            PUBLISHED FOR FIELD EXPERIMENTATION TO SOLICIT FEEDBACK ON THEIR
            UTILITY AND DESIGN/IMPLEMENTATION DEFECTS.</strong>
                </para>
            </summary>
        </member>
        <member name="M:MoreLinq.Experimental.ExperimentalEnumerable.Aggregate``4(System.Collections.Generic.IEnumerable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Func{System.IObservable{``0},System.IObservable{``2}},System.Func{``1,``2,``3})">
            <summary>
            Applies two accumulator queries sequentially in a single
            pass over a sequence.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source" />.</typeparam>
            <typeparam name="TResult1">The type of the result of the first accumulator.</typeparam>
            <typeparam name="TResult2">The type of the result of the second accumulator.</typeparam>
            <typeparam name="TResult">The type of the accumulated result.</typeparam>
            <param name="source">The source sequence</param>
            <param name="accumulator1">The first accumulator.</param>
            <param name="accumulator2">The second accumulator.</param>
            <param name="resultSelector">
            A function that projects a single result given the result of each
            accumulator.</param>
            <returns>The value returned by <paramref name="resultSelector" />.</returns>
            <exception cref="T:System.InvalidOperationException">
            An <see cref="T:System.IObservable`1" /> returned by an accumulator function
            produced zero or more than a single aggregate result.
            </exception>
            <remarks>
                <para>This operator executes immediately.</para>
                <para>
            Each accumulator argument is a function that receives an
            <see cref="T:System.IObservable`1" />, which when subscribed to, produces the
            items in the <paramref name="source" /> sequence and in original
            order; the function must then return an <see cref="T:System.IObservable`1" />
            that produces a single aggregate on completion (when
            <see cref="M:System.IObserver`1.OnCompleted" /> is called. An error is raised
            at run-time if the <see cref="T:System.IObserver`1" /> returned by an
            accumulator function produces no result or produces more than a
            single result.
            </para>
            </remarks>
        </member>
        <member name="M:MoreLinq.Experimental.ExperimentalEnumerable.Aggregate``5(System.Collections.Generic.IEnumerable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Func{System.IObservable{``0},System.IObservable{``2}},System.Func{System.IObservable{``0},System.IObservable{``3}},System.Func{``1,``2,``3,``4})">
            <summary>
            Applies three accumulator queries sequentially in a single
            pass over a sequence.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source" />.</typeparam>
            <typeparam name="TResult1">The type of the result of the first accumulator.</typeparam>
            <typeparam name="TResult2">The type of the result of the second accumulator.</typeparam>
            <typeparam name="TResult3">The type of the result of the third accumulator.</typeparam>
            <typeparam name="TResult">The type of the accumulated result.</typeparam>
            <param name="source">The source sequence</param>
            <param name="accumulator1">The first accumulator.</param>
            <param name="accumulator2">The second accumulator.</param>
            <param name="accumulator3">The third accumulator.</param>
            <param name="resultSelector">
            A function that projects a single result given the result of each
            accumulator.</param>
            <returns>The value returned by <paramref name="resultSelector" />.</returns>
            <exception cref="T:System.InvalidOperationException">
            An <see cref="T:System.IObservable`1" /> returned by an accumulator function
            produced zero or more than a single aggregate result.
            </exception>
            <remarks>
                <para>This operator executes immediately.</para>
                <para>
            Each accumulator argument is a function that receives an
            <see cref="T:System.IObservable`1" />, which when subscribed to, produces the
            items in the <paramref name="source" /> sequence and in original
            order; the function must then return an <see cref="T:System.IObservable`1" />
            that produces a single aggregate on completion (when
            <see cref="M:System.IObserver`1.OnCompleted" /> is called. An error is raised
            at run-time if the <see cref="T:System.IObserver`1" /> returned by an
            accumulator function produces no result or produces more than a
            single result.
            </para>
            </remarks>
        </member>
        <member name="M:MoreLinq.Experimental.ExperimentalEnumerable.Aggregate``6(System.Collections.Generic.IEnumerable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Func{System.IObservable{``0},System.IObservable{``2}},System.Func{System.IObservable{``0},System.IObservable{``3}},System.Func{System.IObservable{``0},System.IObservable{``4}},System.Func{``1,``2,``3,``4,``5})">
            <summary>
            Applies four accumulator queries sequentially in a single
            pass over a sequence.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source" />.</typeparam>
            <typeparam name="TResult1">The type of the result of the first accumulator.</typeparam>
            <typeparam name="TResult2">The type of the result of the second accumulator.</typeparam>
            <typeparam name="TResult3">The type of the result of the third accumulator.</typeparam>
            <typeparam name="TResult4">The type of the result of the fourth accumulator.</typeparam>
            <typeparam name="TResult">The type of the accumulated result.</typeparam>
            <param name="source">The source sequence</param>
            <param name="accumulator1">The first accumulator.</param>
            <param name="accumulator2">The second accumulator.</param>
            <param name="accumulator3">The third accumulator.</param>
            <param name="accumulator4">The fourth accumulator.</param>
            <param name="resultSelector">
            A function that projects a single result given the result of each
            accumulator.</param>
            <returns>The value returned by <paramref name="resultSelector" />.</returns>
            <exception cref="T:System.InvalidOperationException">
            An <see cref="T:System.IObservable`1" /> returned by an accumulator function
            produced zero or more than a single aggregate result.
            </exception>
            <remarks>
                <para>This operator executes immediately.</para>
                <para>
            Each accumulator argument is a function that receives an
            <see cref="T:System.IObservable`1" />, which when subscribed to, produces the
            items in the <paramref name="source" /> sequence and in original
            order; the function must then return an <see cref="T:System.IObservable`1" />
            that produces a single aggregate on completion (when
            <see cref="M:System.IObserver`1.OnCompleted" /> is called. An error is raised
            at run-time if the <see cref="T:System.IObserver`1" /> returned by an
            accumulator function produces no result or produces more than a
            single result.
            </para>
            </remarks>
        </member>
        <member name="M:MoreLinq.Experimental.ExperimentalEnumerable.Aggregate``7(System.Collections.Generic.IEnumerable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Func{System.IObservable{``0},System.IObservable{``2}},System.Func{System.IObservable{``0},System.IObservable{``3}},System.Func{System.IObservable{``0},System.IObservable{``4}},System.Func{System.IObservable{``0},System.IObservable{``5}},System.Func{``1,``2,``3,``4,``5,``6})">
            <summary>
            Applies five accumulator queries sequentially in a single
            pass over a sequence.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source" />.</typeparam>
            <typeparam name="TResult1">The type of the result of the first accumulator.</typeparam>
            <typeparam name="TResult2">The type of the result of the second accumulator.</typeparam>
            <typeparam name="TResult3">The type of the result of the third accumulator.</typeparam>
            <typeparam name="TResult4">The type of the result of the fourth accumulator.</typeparam>
            <typeparam name="TResult5">The type of the result of the fifth accumulator.</typeparam>
            <typeparam name="TResult">The type of the accumulated result.</typeparam>
            <param name="source">The source sequence</param>
            <param name="accumulator1">The first accumulator.</param>
            <param name="accumulator2">The second accumulator.</param>
            <param name="accumulator3">The third accumulator.</param>
            <param name="accumulator4">The fourth accumulator.</param>
            <param name="accumulator5">The fifth accumulator.</param>
            <param name="resultSelector">
            A function that projects a single result given the result of each
            accumulator.</param>
            <returns>The value returned by <paramref name="resultSelector" />.</returns>
            <exception cref="T:System.InvalidOperationException">
            An <see cref="T:System.IObservable`1" /> returned by an accumulator function
            produced zero or more than a single aggregate result.
            </exception>
            <remarks>
                <para>This operator executes immediately.</para>
                <para>
            Each accumulator argument is a function that receives an
            <see cref="T:System.IObservable`1" />, which when subscribed to, produces the
            items in the <paramref name="source" /> sequence and in original
            order; the function must then return an <see cref="T:System.IObservable`1" />
            that produces a single aggregate on completion (when
            <see cref="M:System.IObserver`1.OnCompleted" /> is called. An error is raised
            at run-time if the <see cref="T:System.IObserver`1" /> returned by an
            accumulator function produces no result or produces more than a
            single result.
            </para>
            </remarks>
        </member>
        <member name="M:MoreLinq.Experimental.ExperimentalEnumerable.Aggregate``8(System.Collections.Generic.IEnumerable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Func{System.IObservable{``0},System.IObservable{``2}},System.Func{System.IObservable{``0},System.IObservable{``3}},System.Func{System.IObservable{``0},System.IObservable{``4}},System.Func{System.IObservable{``0},System.IObservable{``5}},System.Func{System.IObservable{``0},System.IObservable{``6}},System.Func{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Applies six accumulator queries sequentially in a single
            pass over a sequence.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source" />.</typeparam>
            <typeparam name="TResult1">The type of the result of the first accumulator.</typeparam>
            <typeparam name="TResult2">The type of the result of the second accumulator.</typeparam>
            <typeparam name="TResult3">The type of the result of the third accumulator.</typeparam>
            <typeparam name="TResult4">The type of the result of the fourth accumulator.</typeparam>
            <typeparam name="TResult5">The type of the result of the fifth accumulator.</typeparam>
            <typeparam name="TResult6">The type of the result of the sixth accumulator.</typeparam>
            <typeparam name="TResult">The type of the accumulated result.</typeparam>
            <param name="source">The source sequence</param>
            <param name="accumulator1">The first accumulator.</param>
            <param name="accumulator2">The second accumulator.</param>
            <param name="accumulator3">The third accumulator.</param>
            <param name="accumulator4">The fourth accumulator.</param>
            <param name="accumulator5">The fifth accumulator.</param>
            <param name="accumulator6">The sixth accumulator.</param>
            <param name="resultSelector">
            A function that projects a single result given the result of each
            accumulator.</param>
            <returns>The value returned by <paramref name="resultSelector" />.</returns>
            <exception cref="T:System.InvalidOperationException">
            An <see cref="T:System.IObservable`1" /> returned by an accumulator function
            produced zero or more than a single aggregate result.
            </exception>
            <remarks>
                <para>This operator executes immediately.</para>
                <para>
            Each accumulator argument is a function that receives an
            <see cref="T:System.IObservable`1" />, which when subscribed to, produces the
            items in the <paramref name="source" /> sequence and in original
            order; the function must then return an <see cref="T:System.IObservable`1" />
            that produces a single aggregate on completion (when
            <see cref="M:System.IObserver`1.OnCompleted" /> is called. An error is raised
            at run-time if the <see cref="T:System.IObserver`1" /> returned by an
            accumulator function produces no result or produces more than a
            single result.
            </para>
            </remarks>
        </member>
        <member name="M:MoreLinq.Experimental.ExperimentalEnumerable.Aggregate``9(System.Collections.Generic.IEnumerable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Func{System.IObservable{``0},System.IObservable{``2}},System.Func{System.IObservable{``0},System.IObservable{``3}},System.Func{System.IObservable{``0},System.IObservable{``4}},System.Func{System.IObservable{``0},System.IObservable{``5}},System.Func{System.IObservable{``0},System.IObservable{``6}},System.Func{System.IObservable{``0},System.IObservable{``7}},System.Func{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Applies seven accumulator queries sequentially in a single
            pass over a sequence.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source" />.</typeparam>
            <typeparam name="TResult1">The type of the result of the first accumulator.</typeparam>
            <typeparam name="TResult2">The type of the result of the second accumulator.</typeparam>
            <typeparam name="TResult3">The type of the result of the third accumulator.</typeparam>
            <typeparam name="TResult4">The type of the result of the fourth accumulator.</typeparam>
            <typeparam name="TResult5">The type of the result of the fifth accumulator.</typeparam>
            <typeparam name="TResult6">The type of the result of the sixth accumulator.</typeparam>
            <typeparam name="TResult7">The type of the result of the seventh accumulator.</typeparam>
            <typeparam name="TResult">The type of the accumulated result.</typeparam>
            <param name="source">The source sequence</param>
            <param name="accumulator1">The first accumulator.</param>
            <param name="accumulator2">The second accumulator.</param>
            <param name="accumulator3">The third accumulator.</param>
            <param name="accumulator4">The fourth accumulator.</param>
            <param name="accumulator5">The fifth accumulator.</param>
            <param name="accumulator6">The sixth accumulator.</param>
            <param name="accumulator7">The seventh accumulator.</param>
            <param name="resultSelector">
            A function that projects a single result given the result of each
            accumulator.</param>
            <returns>The value returned by <paramref name="resultSelector" />.</returns>
            <exception cref="T:System.InvalidOperationException">
            An <see cref="T:System.IObservable`1" /> returned by an accumulator function
            produced zero or more than a single aggregate result.
            </exception>
            <remarks>
                <para>This operator executes immediately.</para>
                <para>
            Each accumulator argument is a function that receives an
            <see cref="T:System.IObservable`1" />, which when subscribed to, produces the
            items in the <paramref name="source" /> sequence and in original
            order; the function must then return an <see cref="T:System.IObservable`1" />
            that produces a single aggregate on completion (when
            <see cref="M:System.IObserver`1.OnCompleted" /> is called. An error is raised
            at run-time if the <see cref="T:System.IObserver`1" /> returned by an
            accumulator function produces no result or produces more than a
            single result.
            </para>
            </remarks>
        </member>
        <member name="M:MoreLinq.Experimental.ExperimentalEnumerable.Aggregate``10(System.Collections.Generic.IEnumerable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Func{System.IObservable{``0},System.IObservable{``2}},System.Func{System.IObservable{``0},System.IObservable{``3}},System.Func{System.IObservable{``0},System.IObservable{``4}},System.Func{System.IObservable{``0},System.IObservable{``5}},System.Func{System.IObservable{``0},System.IObservable{``6}},System.Func{System.IObservable{``0},System.IObservable{``7}},System.Func{System.IObservable{``0},System.IObservable{``8}},System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Applies eight accumulator queries sequentially in a single
            pass over a sequence.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source" />.</typeparam>
            <typeparam name="TResult1">The type of the result of the first accumulator.</typeparam>
            <typeparam name="TResult2">The type of the result of the second accumulator.</typeparam>
            <typeparam name="TResult3">The type of the result of the third accumulator.</typeparam>
            <typeparam name="TResult4">The type of the result of the fourth accumulator.</typeparam>
            <typeparam name="TResult5">The type of the result of the fifth accumulator.</typeparam>
            <typeparam name="TResult6">The type of the result of the sixth accumulator.</typeparam>
            <typeparam name="TResult7">The type of the result of the seventh accumulator.</typeparam>
            <typeparam name="TResult8">The type of the result of the eighth accumulator.</typeparam>
            <typeparam name="TResult">The type of the accumulated result.</typeparam>
            <param name="source">The source sequence</param>
            <param name="accumulator1">The first accumulator.</param>
            <param name="accumulator2">The second accumulator.</param>
            <param name="accumulator3">The third accumulator.</param>
            <param name="accumulator4">The fourth accumulator.</param>
            <param name="accumulator5">The fifth accumulator.</param>
            <param name="accumulator6">The sixth accumulator.</param>
            <param name="accumulator7">The seventh accumulator.</param>
            <param name="accumulator8">The eighth accumulator.</param>
            <param name="resultSelector">
            A function that projects a single result given the result of each
            accumulator.</param>
            <returns>The value returned by <paramref name="resultSelector" />.</returns>
            <exception cref="T:System.InvalidOperationException">
            An <see cref="T:System.IObservable`1" /> returned by an accumulator function
            produced zero or more than a single aggregate result.
            </exception>
            <remarks>
                <para>This operator executes immediately.</para>
                <para>
            Each accumulator argument is a function that receives an
            <see cref="T:System.IObservable`1" />, which when subscribed to, produces the
            items in the <paramref name="source" /> sequence and in original
            order; the function must then return an <see cref="T:System.IObservable`1" />
            that produces a single aggregate on completion (when
            <see cref="M:System.IObserver`1.OnCompleted" /> is called. An error is raised
            at run-time if the <see cref="T:System.IObserver`1" /> returned by an
            accumulator function produces no result or produces more than a
            single result.
            </para>
            </remarks>
        </member>
        <member name="M:MoreLinq.Experimental.ExperimentalEnumerable.AsSequential``1(MoreLinq.Experimental.IAwaitQuery{``0})">
            <summary>
            Converts a query whose results evaluate asynchronously to use
            sequential instead of concurrent evaluation.
            </summary>
            <typeparam name="T">The type of the source elements.</typeparam>
            <param name="source">The source sequence.</param>
            <returns>The converted sequence.</returns>
        </member>
        <member name="M:MoreLinq.Experimental.ExperimentalEnumerable.MaxConcurrency``1(MoreLinq.Experimental.IAwaitQuery{``0},System.Int32)">
            <summary>
            Returns a query whose results evaluate asynchronously to use a
            concurrency limit.
            </summary>
            <typeparam name="T">The type of the source elements.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="value" />
            <returns>
            A query whose results evaluate asynchronously using the given
            concurrency limit.</returns>
        </member>
        <member name="M:MoreLinq.Experimental.ExperimentalEnumerable.UnboundedConcurrency``1(MoreLinq.Experimental.IAwaitQuery{``0})">
            <summary>
            Returns a query whose results evaluate asynchronously and
            concurrently with no defined limitation on concurrency.
            </summary>
            <typeparam name="T">The type of the source elements.</typeparam>
            <param name="source">The source sequence.</param>
            <returns>
            A query whose results evaluate asynchronously using no defined
            limitation on concurrency.</returns>
        </member>
        <member name="M:MoreLinq.Experimental.ExperimentalEnumerable.Scheduler``1(MoreLinq.Experimental.IAwaitQuery{``0},System.Threading.Tasks.TaskScheduler)">
            <summary>
            Returns a query whose results evaluate asynchronously and uses the
            given scheduler for the workhorse task.
            </summary>
            <typeparam name="T">The type of the source elements.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="value">The scheduler to use.</param>
            <returns>
            A query whose results evaluate asynchronously and uses the
            given scheduler for the workhorse task.</returns>
        </member>
        <member name="M:MoreLinq.Experimental.ExperimentalEnumerable.AsOrdered``1(MoreLinq.Experimental.IAwaitQuery{``0})">
            <summary>
            Returns a query whose results evaluate asynchronously but which
            are returned in the order of the source.
            </summary>
            <typeparam name="T">The type of the source elements.</typeparam>
            <param name="source">The source sequence.</param>
            <returns>
            A query whose results evaluate asynchronously but which
            are returned in the order of the source.</returns>
            <remarks>
            Internally, the asynchronous operations will be done concurrently
            but the results will be yielded in order.
            </remarks>
        </member>
        <member name="M:MoreLinq.Experimental.ExperimentalEnumerable.AsUnordered``1(MoreLinq.Experimental.IAwaitQuery{``0})">
            <summary>
            Returns a query whose results evaluate asynchronously but which
            are returned without guarantee of the source order.
            </summary>
            <typeparam name="T">The type of the source elements.</typeparam>
            <param name="source">The source sequence.</param>
            <returns>
            A query whose results evaluate asynchronously but which
            are returned without guarantee of the source order.</returns>
        </member>
        <member name="M:MoreLinq.Experimental.ExperimentalEnumerable.PreserveOrder``1(MoreLinq.Experimental.IAwaitQuery{``0},System.Boolean)">
            <summary>
            Returns a query whose results evaluate asynchronously and a Boolean
            argument indicating whether the source order of the results is
            preserved.
            </summary>
            <typeparam name="T">The type of the source elements.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="value">
            A Boolean where <c>true</c> means results are in source order and
            <c>false</c> means that results can be delivered in order of
            efficiency.</param>
            <returns>
            A query whose results evaluate asynchronously and returns the
            results ordered or unordered based on <paramref name="value" />.
            </returns>
        </member>
        <member name="M:MoreLinq.Experimental.ExperimentalEnumerable.Await``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            Creates a sequence query that streams the result of each task in
            the source sequence as it completes asynchronously.
            </summary>
            <typeparam name="T">
            The type of each task's result as well as the type of the elements
            of the resulting sequence.</typeparam>
            <param name="source">The source sequence of tasks.</param>
            <returns>
            A sequence query that streams the result of each task in
            <paramref name="source" /> as it completes asynchronously.
            </returns>
            <remarks>
                <para>
            This method uses deferred execution semantics. The results are
            yielded as each asynchronous task completes and, by default,
            not guaranteed to be based on the source sequence order. If order
            is important, compose further with
            <see cref="M:MoreLinq.Experimental.ExperimentalEnumerable.AsOrdered``1(MoreLinq.Experimental.IAwaitQuery{``0})" />.</para>
                <para>
            This method starts a new task where the tasks are awaited. If the
            resulting sequence is partially consumed then there's a good chance
            that some tasks will be wasted, those that are in flight.</para>
                <para>
            The tasks in <paramref name="source" /> are already assumed to be in
            flight therefore changing concurrency options via
            <see cref="M:MoreLinq.Experimental.ExperimentalEnumerable.AsSequential``1(MoreLinq.Experimental.IAwaitQuery{``0})" />, <see cref="M:MoreLinq.Experimental.ExperimentalEnumerable.MaxConcurrency``1(MoreLinq.Experimental.IAwaitQuery{``0},System.Int32)" /> or
            <see cref="M:MoreLinq.Experimental.ExperimentalEnumerable.UnboundedConcurrency``1(MoreLinq.Experimental.IAwaitQuery{``0})" /> will only change how many
            tasks are awaited at any given moment, not how many will be
            kept in flight. For the latter effect, use the other overload.
            </para>
            </remarks>
        </member>
        <member name="M:MoreLinq.Experimental.ExperimentalEnumerable.Await``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}})">
            <summary>
            Creates a sequence query that streams the result of each task in
            the source sequence as it completes asynchronously. A
            <see cref="T:System.Threading.CancellationToken" /> is passed for each asynchronous
            evaluation to abort any asynchronous operations in flight if the
            sequence is not fully iterated.
            </summary>
            <typeparam name="T">The type of the source elements.</typeparam>
            <typeparam name="TResult">The type of the result elements.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="evaluator">A function to begin the asynchronous
            evaluation of each element, the second parameter of which is a
            <see cref="T:System.Threading.CancellationToken" /> that can be used to abort
            asynchronous operations.</param>
            <returns>
            A sequence query that stream its results as they are
            evaluated asynchronously.
            </returns>
            <remarks>
                <para>
            This method uses deferred execution semantics. The results are
            yielded as each asynchronous evaluation completes and, by default,
            not guaranteed to be based on the source sequence order. If order
            is important, compose further with
            <see cref="M:MoreLinq.Experimental.ExperimentalEnumerable.AsOrdered``1(MoreLinq.Experimental.IAwaitQuery{``0})" />.</para>
                <para>
            This method starts a new task where the asynchronous evaluations
            take place and awaited. If the resulting sequence is partially
            consumed then there's a good chance that some projection work will
            be wasted and a cooperative effort is done that depends on the
            <paramref name="evaluator" /> function (via a
            <see cref="T:System.Threading.CancellationToken" /> as its second argument) to cancel
            those in flight.</para>
                <para>
            The <paramref name="evaluator" /> function should be designed to be
            thread-agnostic.</para>
                <para>
            The task returned by <paramref name="evaluator" /> should be started
            when the function is called (and not just a mere projection)
            otherwise changing concurrency options via
            <see cref="M:MoreLinq.Experimental.ExperimentalEnumerable.AsSequential``1(MoreLinq.Experimental.IAwaitQuery{``0})" />, <see cref="M:MoreLinq.Experimental.ExperimentalEnumerable.MaxConcurrency``1(MoreLinq.Experimental.IAwaitQuery{``0},System.Int32)" /> or
            <see cref="M:MoreLinq.Experimental.ExperimentalEnumerable.UnboundedConcurrency``1(MoreLinq.Experimental.IAwaitQuery{``0})" /> will only change how many
            tasks are awaited at any given moment, not how many will be
            kept in flight.
            </para>
            </remarks>
        </member>
        <member name="M:MoreLinq.Experimental.ExperimentalEnumerable.AwaitCompletion``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Func{``0,System.Threading.Tasks.Task{``1},``2})">
            <summary>
            Awaits completion of all asynchronous evaluations irrespective of
            whether they succeed or fail. An additional argument specifies a
            function that projects the final result given the source item and
            completed task.
            </summary>
            <typeparam name="T">The type of the source elements.</typeparam>
            <typeparam name="TTaskResult"> The type of the tasks's result.</typeparam>
            <typeparam name="TResult">The type of the result elements.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="evaluator">A function to begin the asynchronous
            evaluation of each element, the second parameter of which is a
            <see cref="T:System.Threading.CancellationToken" /> that can be used to abort
            asynchronous operations.</param>
            <param name="resultSelector">A fucntion that projects the final
            result given the source item and its asynchronous completion
            result.</param>
            <returns>
            A sequence query that stream its results as they are
            evaluated asynchronously.
            </returns>
            <remarks>
                <para>
            This method uses deferred execution semantics. The results are
            yielded as each asynchronous evaluation completes and, by default,
            not guaranteed to be based on the source sequence order. If order
            is important, compose further with
            <see cref="M:MoreLinq.Experimental.ExperimentalEnumerable.AsOrdered``1(MoreLinq.Experimental.IAwaitQuery{``0})" />.</para>
                <para>
            This method starts a new task where the asynchronous evaluations
            take place and awaited. If the resulting sequence is partially
            consumed then there's a good chance that some projection work will
            be wasted and a cooperative effort is done that depends on the
            <paramref name="evaluator" /> function (via a
            <see cref="T:System.Threading.CancellationToken" /> as its second argument) to cancel
            those in flight.</para>
                <para>
            The <paramref name="evaluator" /> function should be designed to be
            thread-agnostic.</para>
                <para>
            The task returned by <paramref name="evaluator" /> should be started
            when the function is called (and not just a mere projection)
            otherwise changing concurrency options via
            <see cref="M:MoreLinq.Experimental.ExperimentalEnumerable.AsSequential``1(MoreLinq.Experimental.IAwaitQuery{``0})" />, <see cref="M:MoreLinq.Experimental.ExperimentalEnumerable.MaxConcurrency``1(MoreLinq.Experimental.IAwaitQuery{``0},System.Int32)" /> or
            <see cref="M:MoreLinq.Experimental.ExperimentalEnumerable.UnboundedConcurrency``1(MoreLinq.Experimental.IAwaitQuery{``0})" /> will only change how many
            tasks are awaited at any given moment, not how many will be
            kept in flight.
            </para>
            </remarks>
        </member>
        <member name="M:MoreLinq.Experimental.ExperimentalEnumerable.Memoize``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a sequence that lazily caches the source as it is iterated
            for the first time, reusing the cache thereafter for future
            re-iterations. If the source is already cached or buffered then it
            is returned verbatim.
            </summary>
            <typeparam name="T">
            Type of elements in <paramref name="source" />.</typeparam>
            <param name="source">The source sequence.</param>
            <returns>
            Returns a sequence that corresponds to a cached version of the
            input sequence.</returns>
            <remarks>
            The returned <see cref="T:System.Collections.Generic.IEnumerable`1" /> will cache items from
            <paramref name="source" /> in a thread-safe manner. Each thread can
            call its <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" /> to acquire an
            iterator  but the same iterator should not be used simultanesouly
            from multiple threads. The sequence supplied in
            <paramref name="source" /> is not expected to be thread-safe but it
            is required to be thread-agnostic because different threads
            (though never simultaneously) may iterate over the sequence.
            </remarks>
        </member>
        <member name="M:MoreLinq.Experimental.ExperimentalEnumerable.TrySingle``2(System.Collections.Generic.IEnumerable{``0},``1,``1,``1)">
            <summary>
            Returns a tuple with the cardinality of the sequence and the
            single element in the sequence if it contains exactly one element.
            similar to <see cref="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})" />.
            </summary>
            <param name="source">The source sequence.</param>
            <param name="zero">
            The value that is returned in the tuple if the sequence has zero
            elements.</param>
            <param name="one">
            The value that is returned in the tuple if the sequence has a
            single element only.</param>
            <param name="many">
            The value that is returned in the tuple if the sequence has two or
            more elements.</param>
            <typeparam name="T">
            The type of the elements of <paramref name="source" />.</typeparam>
            <typeparam name="TCardinality">
            The type that expresses cardinality.</typeparam>
            <returns>
            A tuple containing the identified <typeparamref name="TCardinality" />
            and either the single value of <typeparamref name="T" /> in the sequence
            or its default value.</returns>
            <remarks>
            This operator uses immediate execution, but never consumes more
            than two elements from the sequence.
            </remarks>
        </member>
        <member name="M:MoreLinq.Experimental.ExperimentalEnumerable.TrySingle``3(System.Collections.Generic.IEnumerable{``0},``1,``1,``1,System.Func{``1,``0,``2})">
            <summary>
            Returns a result projected from the the cardinality of the sequence
            and the single element in the sequence if it contains exactly one
            element.
            </summary>
            <param name="source">The source sequence.</param>
            <param name="zero">
            The value that is passed as the first argument to
            <paramref name="resultSelector" /> if the sequence has zero
            elements.</param>
            <param name="one">
            The value that is passed as the first argument to
            <paramref name="resultSelector" /> if the sequence has a
            single element only.</param>
            <param name="many">
            The value that is passed as the first argument to
            <paramref name="resultSelector" /> if the sequence has two or
            more elements.</param>
            <param name="resultSelector">
            A function that receives the cardinality and, if the
            sequence has just one element, the value of that element as
            argument and projects a resulting value of type
            <typeparamref name="TResult" />.</param>
            <typeparam name="T">
            The type of the elements of <paramref name="source" />.</typeparam>
            <typeparam name="TCardinality">
            The type that expresses cardinality.</typeparam>
            <typeparam name="TResult">
            The type of the result value returned by the
            <paramref name="resultSelector" /> function. </typeparam>
            <returns>
            The value returned by <paramref name="resultSelector" />.
            </returns>
            <remarks>
            This operator uses immediate execution, but never consumes more
            than two elements from the sequence.
            </remarks>
        </member>
        <member name="T:MoreLinq.Experimental.AwaitQueryOptions">
            <summary>
            Represents options for a query whose results evaluate asynchronously.
            </summary>
        </member>
        <member name="F:MoreLinq.Experimental.AwaitQueryOptions.Default">
            <summary>
            The default options used for a query whose results evaluate
            asynchronously.
            </summary>
        </member>
        <member name="P:MoreLinq.Experimental.AwaitQueryOptions.MaxConcurrency">
            <summary>
            Gets a positive (non-zero) integer that specifies the maximum
            number of asynchronous operations to have in-flight concurrently
            or <c>null</c> to mean unlimited concurrency.
            </summary>
        </member>
        <member name="P:MoreLinq.Experimental.AwaitQueryOptions.Scheduler">
            <summary>
            Get the scheduler to be used for any workhorse task.
            </summary>
        </member>
        <member name="P:MoreLinq.Experimental.AwaitQueryOptions.PreserveOrder">
            <summary>
            Get a Boolean that determines whether results should be ordered
            the same as the source.
            </summary>
        </member>
        <member name="M:MoreLinq.Experimental.AwaitQueryOptions.WithMaxConcurrency(System.Nullable{System.Int32})">
            <summary>
            Returns new options with the given concurrency limit.
            </summary>
            <param name="value">
            The maximum concurrent asynchronous operation to keep in flight.
            Use <c>null</c> to mean unbounded concurrency.</param>
            <returns>Options with the new setting.</returns>
        </member>
        <member name="M:MoreLinq.Experimental.AwaitQueryOptions.WithScheduler(System.Threading.Tasks.TaskScheduler)">
            <summary>
            Returns new options with the given scheduler.
            </summary>
            <param name="value">
            The scheduler to use to for the workhorse task.</param>
            <returns>Options with the new setting.</returns>
        </member>
        <member name="M:MoreLinq.Experimental.AwaitQueryOptions.WithPreserveOrder(System.Boolean)">
            <summary>
            Returns new options with the given Boolean indicating whether or
            not the results should be returned in the order of the source.
            </summary>
            <param name="value">
            A Boolean where <c>true</c> means results are in source order and
            <c>false</c> means that results can be delivered in order of
            efficiency.</param>
            <returns>Options with the new setting.</returns>
        </member>
        <member name="T:MoreLinq.Experimental.IAwaitQuery`1">
            <summary>
            Represents a sequence whose elements or results evaluate asynchronously.
            </summary>
            <inheritdoc />
            <typeparam name="T">The type of the source elements.</typeparam>
        </member>
        <member name="P:MoreLinq.Experimental.IAwaitQuery`1.Options">
            <summary>
            The options that determine how the sequence evaluation behaves when
            it is iterated.
            </summary>
        </member>
        <member name="M:MoreLinq.Experimental.IAwaitQuery`1.WithOptions(MoreLinq.Experimental.AwaitQueryOptions)">
            <summary>
            Returns a new query that will use the given options.
            </summary>
            <param name="options">The new options to use.</param>
            <returns>
            Returns a new query using the supplied options.
            </returns>
        </member>
        <member name="T:MoreLinq.Extensions.AcquireExtension">
            <summary>
                <c>Acquire</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.AcquireExtension.Acquire``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Ensures that a source sequence of <see cref="T:System.IDisposable" />
            objects are all acquired successfully. If the acquisition of any
            one <see cref="T:System.IDisposable" /> fails then those successfully
            acquired till that point are disposed.
            </summary>
            <typeparam name="TSource">Type of elements in <paramref name="source" /> sequence.</typeparam>
            <param name="source">Source sequence of <see cref="T:System.IDisposable" /> objects.</param>
            <returns>
            Returns an array of all the acquired <see cref="T:System.IDisposable" />
            objects in source order.
            </returns>
            <remarks>
            This operator executes immediately.
            </remarks>
        </member>
        <member name="T:MoreLinq.Extensions.AggregateExtension">
            <summary>
                <c>Aggregate</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.AggregateExtension.Aggregate``4(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},``2,System.Func{``2,``0,``2},System.Func{``1,``2,``3})">
            <summary>
            Applies two accumulators sequentially in a single pass over a
            sequence.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source" />.</typeparam>
            <typeparam name="TAccumulate1">The type of first accumulator value.</typeparam>
            <typeparam name="TAccumulate2">The type of second accumulator value.</typeparam>
            <typeparam name="TResult">The type of the accumulated result.</typeparam>
            <param name="source">The source sequence</param>
            <param name="seed1">The seed value for the first accumulator.</param>
            <param name="accumulator1">The first accumulator.</param>
            <param name="seed2">The seed value for the second accumulator.</param>
            <param name="accumulator2">The second accumulator.</param>
            <param name="resultSelector">
            A function that projects a single result given the result of each
            accumulator.</param>
            <returns>The value returned by <paramref name="resultSelector" />.</returns>
            <remarks>
            This operator executes immediately.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.AggregateExtension.Aggregate``5(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},``2,System.Func{``2,``0,``2},``3,System.Func{``3,``0,``3},System.Func{``1,``2,``3,``4})">
            <summary>
            Applies three accumulators sequentially in a single pass over a
            sequence.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source" />.</typeparam>
            <typeparam name="TAccumulate1">The type of first accumulator value.</typeparam>
            <typeparam name="TAccumulate2">The type of second accumulator value.</typeparam>
            <typeparam name="TAccumulate3">The type of third accumulator value.</typeparam>
            <typeparam name="TResult">The type of the accumulated result.</typeparam>
            <param name="source">The source sequence</param>
            <param name="seed1">The seed value for the first accumulator.</param>
            <param name="accumulator1">The first accumulator.</param>
            <param name="seed2">The seed value for the second accumulator.</param>
            <param name="accumulator2">The second accumulator.</param>
            <param name="seed3">The seed value for the third accumulator.</param>
            <param name="accumulator3">The third accumulator.</param>
            <param name="resultSelector">
            A function that projects a single result given the result of each
            accumulator.</param>
            <returns>The value returned by <paramref name="resultSelector" />.</returns>
            <remarks>
            This operator executes immediately.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.AggregateExtension.Aggregate``6(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},``2,System.Func{``2,``0,``2},``3,System.Func{``3,``0,``3},``4,System.Func{``4,``0,``4},System.Func{``1,``2,``3,``4,``5})">
            <summary>
            Applies four accumulators sequentially in a single pass over a
            sequence.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source" />.</typeparam>
            <typeparam name="TAccumulate1">The type of first accumulator value.</typeparam>
            <typeparam name="TAccumulate2">The type of second accumulator value.</typeparam>
            <typeparam name="TAccumulate3">The type of third accumulator value.</typeparam>
            <typeparam name="TAccumulate4">The type of fourth accumulator value.</typeparam>
            <typeparam name="TResult">The type of the accumulated result.</typeparam>
            <param name="source">The source sequence</param>
            <param name="seed1">The seed value for the first accumulator.</param>
            <param name="accumulator1">The first accumulator.</param>
            <param name="seed2">The seed value for the second accumulator.</param>
            <param name="accumulator2">The second accumulator.</param>
            <param name="seed3">The seed value for the third accumulator.</param>
            <param name="accumulator3">The third accumulator.</param>
            <param name="seed4">The seed value for the fourth accumulator.</param>
            <param name="accumulator4">The fourth accumulator.</param>
            <param name="resultSelector">
            A function that projects a single result given the result of each
            accumulator.</param>
            <returns>The value returned by <paramref name="resultSelector" />.</returns>
            <remarks>
            This operator executes immediately.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.AggregateExtension.Aggregate``7(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},``2,System.Func{``2,``0,``2},``3,System.Func{``3,``0,``3},``4,System.Func{``4,``0,``4},``5,System.Func{``5,``0,``5},System.Func{``1,``2,``3,``4,``5,``6})">
            <summary>
            Applies five accumulators sequentially in a single pass over a
            sequence.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source" />.</typeparam>
            <typeparam name="TAccumulate1">The type of first accumulator value.</typeparam>
            <typeparam name="TAccumulate2">The type of second accumulator value.</typeparam>
            <typeparam name="TAccumulate3">The type of third accumulator value.</typeparam>
            <typeparam name="TAccumulate4">The type of fourth accumulator value.</typeparam>
            <typeparam name="TAccumulate5">The type of fifth accumulator value.</typeparam>
            <typeparam name="TResult">The type of the accumulated result.</typeparam>
            <param name="source">The source sequence</param>
            <param name="seed1">The seed value for the first accumulator.</param>
            <param name="accumulator1">The first accumulator.</param>
            <param name="seed2">The seed value for the second accumulator.</param>
            <param name="accumulator2">The second accumulator.</param>
            <param name="seed3">The seed value for the third accumulator.</param>
            <param name="accumulator3">The third accumulator.</param>
            <param name="seed4">The seed value for the fourth accumulator.</param>
            <param name="accumulator4">The fourth accumulator.</param>
            <param name="seed5">The seed value for the fifth accumulator.</param>
            <param name="accumulator5">The fifth accumulator.</param>
            <param name="resultSelector">
            A function that projects a single result given the result of each
            accumulator.</param>
            <returns>The value returned by <paramref name="resultSelector" />.</returns>
            <remarks>
            This operator executes immediately.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.AggregateExtension.Aggregate``8(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},``2,System.Func{``2,``0,``2},``3,System.Func{``3,``0,``3},``4,System.Func{``4,``0,``4},``5,System.Func{``5,``0,``5},``6,System.Func{``6,``0,``6},System.Func{``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Applies six accumulators sequentially in a single pass over a
            sequence.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source" />.</typeparam>
            <typeparam name="TAccumulate1">The type of first accumulator value.</typeparam>
            <typeparam name="TAccumulate2">The type of second accumulator value.</typeparam>
            <typeparam name="TAccumulate3">The type of third accumulator value.</typeparam>
            <typeparam name="TAccumulate4">The type of fourth accumulator value.</typeparam>
            <typeparam name="TAccumulate5">The type of fifth accumulator value.</typeparam>
            <typeparam name="TAccumulate6">The type of sixth accumulator value.</typeparam>
            <typeparam name="TResult">The type of the accumulated result.</typeparam>
            <param name="source">The source sequence</param>
            <param name="seed1">The seed value for the first accumulator.</param>
            <param name="accumulator1">The first accumulator.</param>
            <param name="seed2">The seed value for the second accumulator.</param>
            <param name="accumulator2">The second accumulator.</param>
            <param name="seed3">The seed value for the third accumulator.</param>
            <param name="accumulator3">The third accumulator.</param>
            <param name="seed4">The seed value for the fourth accumulator.</param>
            <param name="accumulator4">The fourth accumulator.</param>
            <param name="seed5">The seed value for the fifth accumulator.</param>
            <param name="accumulator5">The fifth accumulator.</param>
            <param name="seed6">The seed value for the sixth accumulator.</param>
            <param name="accumulator6">The sixth accumulator.</param>
            <param name="resultSelector">
            A function that projects a single result given the result of each
            accumulator.</param>
            <returns>The value returned by <paramref name="resultSelector" />.</returns>
            <remarks>
            This operator executes immediately.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.AggregateExtension.Aggregate``9(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},``2,System.Func{``2,``0,``2},``3,System.Func{``3,``0,``3},``4,System.Func{``4,``0,``4},``5,System.Func{``5,``0,``5},``6,System.Func{``6,``0,``6},``7,System.Func{``7,``0,``7},System.Func{``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Applies seven accumulators sequentially in a single pass over a
            sequence.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source" />.</typeparam>
            <typeparam name="TAccumulate1">The type of first accumulator value.</typeparam>
            <typeparam name="TAccumulate2">The type of second accumulator value.</typeparam>
            <typeparam name="TAccumulate3">The type of third accumulator value.</typeparam>
            <typeparam name="TAccumulate4">The type of fourth accumulator value.</typeparam>
            <typeparam name="TAccumulate5">The type of fifth accumulator value.</typeparam>
            <typeparam name="TAccumulate6">The type of sixth accumulator value.</typeparam>
            <typeparam name="TAccumulate7">The type of seventh accumulator value.</typeparam>
            <typeparam name="TResult">The type of the accumulated result.</typeparam>
            <param name="source">The source sequence</param>
            <param name="seed1">The seed value for the first accumulator.</param>
            <param name="accumulator1">The first accumulator.</param>
            <param name="seed2">The seed value for the second accumulator.</param>
            <param name="accumulator2">The second accumulator.</param>
            <param name="seed3">The seed value for the third accumulator.</param>
            <param name="accumulator3">The third accumulator.</param>
            <param name="seed4">The seed value for the fourth accumulator.</param>
            <param name="accumulator4">The fourth accumulator.</param>
            <param name="seed5">The seed value for the fifth accumulator.</param>
            <param name="accumulator5">The fifth accumulator.</param>
            <param name="seed6">The seed value for the sixth accumulator.</param>
            <param name="accumulator6">The sixth accumulator.</param>
            <param name="seed7">The seed value for the seventh accumulator.</param>
            <param name="accumulator7">The seventh accumulator.</param>
            <param name="resultSelector">
            A function that projects a single result given the result of each
            accumulator.</param>
            <returns>The value returned by <paramref name="resultSelector" />.</returns>
            <remarks>
            This operator executes immediately.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.AggregateExtension.Aggregate``10(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},``2,System.Func{``2,``0,``2},``3,System.Func{``3,``0,``3},``4,System.Func{``4,``0,``4},``5,System.Func{``5,``0,``5},``6,System.Func{``6,``0,``6},``7,System.Func{``7,``0,``7},``8,System.Func{``8,``0,``8},System.Func{``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Applies eight accumulators sequentially in a single pass over a
            sequence.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="source" />.</typeparam>
            <typeparam name="TAccumulate1">The type of first accumulator value.</typeparam>
            <typeparam name="TAccumulate2">The type of second accumulator value.</typeparam>
            <typeparam name="TAccumulate3">The type of third accumulator value.</typeparam>
            <typeparam name="TAccumulate4">The type of fourth accumulator value.</typeparam>
            <typeparam name="TAccumulate5">The type of fifth accumulator value.</typeparam>
            <typeparam name="TAccumulate6">The type of sixth accumulator value.</typeparam>
            <typeparam name="TAccumulate7">The type of seventh accumulator value.</typeparam>
            <typeparam name="TAccumulate8">The type of eighth accumulator value.</typeparam>
            <typeparam name="TResult">The type of the accumulated result.</typeparam>
            <param name="source">The source sequence</param>
            <param name="seed1">The seed value for the first accumulator.</param>
            <param name="accumulator1">The first accumulator.</param>
            <param name="seed2">The seed value for the second accumulator.</param>
            <param name="accumulator2">The second accumulator.</param>
            <param name="seed3">The seed value for the third accumulator.</param>
            <param name="accumulator3">The third accumulator.</param>
            <param name="seed4">The seed value for the fourth accumulator.</param>
            <param name="accumulator4">The fourth accumulator.</param>
            <param name="seed5">The seed value for the fifth accumulator.</param>
            <param name="accumulator5">The fifth accumulator.</param>
            <param name="seed6">The seed value for the sixth accumulator.</param>
            <param name="accumulator6">The sixth accumulator.</param>
            <param name="seed7">The seed value for the seventh accumulator.</param>
            <param name="accumulator7">The seventh accumulator.</param>
            <param name="seed8">The seed value for the eighth accumulator.</param>
            <param name="accumulator8">The eighth accumulator.</param>
            <param name="resultSelector">
            A function that projects a single result given the result of each
            accumulator.</param>
            <returns>The value returned by <paramref name="resultSelector" />.</returns>
            <remarks>
            This operator executes immediately.
            </remarks>
        </member>
        <member name="T:MoreLinq.Extensions.AggregateRightExtension">
            <summary>
                <c>AggregateRight</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.AggregateRightExtension.AggregateRight``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
            <summary>
            Applies a right-associative accumulator function over a sequence.
            This operator is the right-associative version of the
            <see cref="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" /> LINQ operator.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="func">A right-associative accumulator function to be invoked on each element.</param>
            <returns>The final accumulator value.</returns>
            <example>
                <code><![CDATA[
            string result = Enumerable.Range(1, 5).Select(i => i.ToString()).AggregateRight((a, b) => string.Format("({0}/{1})", a, b));
            ]]></code>
            The <c>result</c> variable will contain <c>"(1/(2/(3/(4/5))))"</c>.
            </example>
            <remarks>
            This operator executes immediately.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.AggregateRightExtension.AggregateRight``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``0,``1,``1})">
            <summary>
            Applies a right-associative accumulator function over a sequence.
            The specified seed value is used as the initial accumulator value.
            This operator is the right-associative version of the
            <see cref="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" /> LINQ operator.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="seed">The initial accumulator value.</param>
            <param name="func">A right-associative accumulator function to be invoked on each element.</param>
            <returns>The final accumulator value.</returns>
            <example>
                <code><![CDATA[
            var numbers = Enumerable.Range(1, 5);
            string result = numbers.AggregateRight("6", (a, b) => string.Format("({0}/{1})", a, b));
            ]]></code>
            The <c>result</c> variable will contain <c>"(1/(2/(3/(4/(5/6)))))"</c>.
            </example>
            <remarks>
            This operator executes immediately.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.AggregateRightExtension.AggregateRight``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``0,``1,``1},System.Func{``1,``2})">
            <summary>
            Applies a right-associative accumulator function over a sequence.
            The specified seed value is used as the initial accumulator value,
            and the specified function is used to select the result value.
            This operator is the right-associative version of the
            <see cref="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" /> LINQ operator.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
            <typeparam name="TResult">The type of the resulting value.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="seed">The initial accumulator value.</param>
            <param name="func">A right-associative accumulator function to be invoked on each element.</param>
            <param name="resultSelector">A function to transform the final accumulator value into the result value.</param>
            <returns>The transformed final accumulator value.</returns>
            <example>
                <code><![CDATA[
            var numbers = Enumerable.Range(1, 5);
            int result = numbers.AggregateRight("6", (a, b) => string.Format("({0}/{1})", a, b), str => str.Length);
            ]]></code>
            The <c>result</c> variable will contain <c>21</c>.
            </example>
            <remarks>
            This operator executes immediately.
            </remarks>
        </member>
        <member name="T:MoreLinq.Extensions.AppendExtension">
            <summary>
                <c>Append</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.AppendExtension.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns a sequence consisting of the head elements and the given tail element.
            </summary>
            <typeparam name="T">Type of sequence</typeparam>
            <param name="head">All elements of the head. Must not be null.</param>
            <param name="tail">Tail element of the new sequence.</param>
            <returns>A sequence consisting of the head elements and the given tail element.</returns>
            <remarks>This operator uses deferred execution and streams its results.</remarks>
        </member>
        <member name="T:MoreLinq.Extensions.AssertExtension">
            <summary>
                <c>Assert</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.AssertExtension.Assert``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Asserts that all elements of a sequence meet a given condition
            otherwise throws an <see cref="T:System.Exception" /> object.
            </summary>
            <typeparam name="TSource">Type of elements in <paramref name="source" /> sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="predicate">Function that asserts an element of the <paramref name="source" /> sequence for a condition.</param>
            <returns>
            Returns the original sequence.
            </returns>
            <exception cref="T:System.InvalidOperationException">The input sequence
            contains an element that does not meet the condition being
            asserted.</exception>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.AssertExtension.Assert``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Exception})">
            <summary>
            Asserts that all elements of a sequence meet a given condition
            otherwise throws an <see cref="T:System.Exception" /> object.
            </summary>
            <typeparam name="TSource">Type of elements in <paramref name="source" /> sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="predicate">Function that asserts an element of the input sequence for a condition.</param>
            <param name="errorSelector">Function that returns the <see cref="T:System.Exception" /> object to throw.</param>
            <returns>
            Returns the original sequence.
            </returns>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
        </member>
        <member name="T:MoreLinq.Extensions.AssertCountExtension">
            <summary>
                <c>AssertCount</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.AssertCountExtension.AssertCount``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Asserts that a source sequence contains a given count of elements.
            </summary>
            <typeparam name="TSource">Type of elements in <paramref name="source" /> sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="count">Count to assert.</param>
            <returns>
            Returns the original sequence as long it is contains the
            number of elements specified by <paramref name="count" />.
            Otherwise it throws <see cref="T:System.Exception" />.
            </returns>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.AssertCountExtension.AssertCount``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Int32,System.Int32,System.Exception})">
            <summary>
            Asserts that a source sequence contains a given count of elements.
            A parameter specifies the exception to be thrown.
            </summary>
            <typeparam name="TSource">Type of elements in <paramref name="source" /> sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="count">Count to assert.</param>
            <param name="errorSelector">
            Function that receives a comparison (a negative integer if actual
            count is less than <paramref name="count" /> and a positive integer
            if actual count is greater than <paramref name="count" />) and
            <paramref name="count" /> as arguments and which returns the
            <see cref="T:System.Exception" /> object to throw.</param>
            <returns>
            Returns the original sequence as long it is contains the
            number of elements specified by <paramref name="count" />.
            Otherwise it throws the <see cref="T:System.Exception" /> object
            returned by calling <paramref name="errorSelector" />.
            </returns>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
        </member>
        <member name="T:MoreLinq.Extensions.AtLeastExtension">
            <summary>
                <c>AtLeast</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.AtLeastExtension.AtLeast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Determines whether or not the number of elements in the sequence is greater than
            or equal to the given integer.
            </summary>
            <typeparam name="T">Element type of sequence</typeparam>
            <param name="source">The source sequence</param>
            <param name="count">The minimum number of items a sequence must have for this
            function to return true</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="count" /> is negative</exception>
            <returns>
                <c>true</c> if the number of elements in the sequence is greater than
            or equal to the given integer or <c>false</c> otherwise.</returns>
            <example>
                <code><![CDATA[
            var numbers = new[] { 123, 456, 789 };
            var result = numbers.AtLeast(2);
            ]]></code>
            The <c>result</c> variable will contain <c>true</c>.
            </example>
        </member>
        <member name="T:MoreLinq.Extensions.AtMostExtension">
            <summary>
                <c>AtMost</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.AtMostExtension.AtMost``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Determines whether or not the number of elements in the sequence is lesser than
            or equal to the given integer.
            </summary>
            <typeparam name="T">Element type of sequence</typeparam>
            <param name="source">The source sequence</param>
            <param name="count">The maximun number of items a sequence must have for this
            function to return true</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="count" /> is negative</exception>
            <returns>
                <c>true</c> if the number of elements in the sequence is lesser than
            or equal to the given integer or <c>false</c> otherwise.</returns>
            <example>
                <code><![CDATA[
            var numbers = new[] { 123, 456, 789 };
            var result = numbers.AtMost(2);
            ]]></code>
            The <c>result</c> variable will contain <c>false</c>.
            </example>
        </member>
        <member name="T:MoreLinq.Extensions.BacksertExtension">
            <summary>
                <c>Backsert</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.BacksertExtension.Backsert``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Inserts the elements of a sequence into another sequence at a
            specified index from the tail of the sequence, where zero always
            represents the last position, one represents the second-last
            element, two represents the third-last element and so on.
            </summary>
            <typeparam name="T">
            Type of elements in all sequences.</typeparam>
            <param name="first">The source sequence.</param>
            <param name="second">The sequence that will be inserted.</param>
            <param name="index">
            The zero-based index from the end of <paramref name="first" /> where
            elements from <paramref name="second" /> should be inserted.
            <paramref name="second" />.</param>
            <returns>
            A sequence that contains the elements of <paramref name="first" />
            plus the elements of <paramref name="second" /> inserted at
            the given index from the end of <paramref name="first" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="first" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="second" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="index" /> is negative.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown lazily if <paramref name="index" /> is greater than the
            length of <paramref name="first" />. The validation occurs when
            the resulting sequence is iterated.
            </exception>
            <remarks>
            This method uses deferred execution and streams its results.
            </remarks>
        </member>
        <member name="T:MoreLinq.Extensions.BatchExtension">
            <summary>
                <c>Batch</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.BatchExtension.Batch``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Batches the source sequence into sized buckets.
            </summary>
            <typeparam name="TSource">Type of elements in <paramref name="source" /> sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="size">Size of buckets.</param>
            <returns>A sequence of equally sized buckets containing elements of the source collection.</returns>
            <remarks>
                <para>
            This operator uses deferred execution and streams its results
            (buckets are streamed but their content buffered).</para>
                <para>
            When more than one bucket is streamed, all buckets except the last
            is guaranteed to have <paramref name="size" /> elements. The last
            bucket may be smaller depending on the remaining elements in the
            <paramref name="source" /> sequence.</para>
                <para>
            Each bucket is pre-allocated to <paramref name="size" /> elements.
            If <paramref name="size" /> is set to a very large value, e.g.
            <see cref="F:System.Int32.MaxValue" /> to effectively disable batching by just
            hoping for a single bucket, then it can lead to memory exhaustion
            (<see cref="T:System.OutOfMemoryException" />).
            </para>
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.BatchExtension.Batch``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            Batches the source sequence into sized buckets and applies a projection to each bucket.
            </summary>
            <typeparam name="TSource">Type of elements in <paramref name="source" /> sequence.</typeparam>
            <typeparam name="TResult">Type of result returned by <paramref name="resultSelector" />.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="size">Size of buckets.</param>
            <param name="resultSelector">The projection to apply to each bucket.</param>
            <returns>A sequence of projections on equally sized buckets containing elements of the source collection.</returns>
            <para>
            This operator uses deferred execution and streams its results
            (buckets are streamed but their content buffered).</para>
            <para>
                <para>
            When more than one bucket is streamed, all buckets except the last
            is guaranteed to have <paramref name="size" /> elements. The last
            bucket may be smaller depending on the remaining elements in the
            <paramref name="source" /> sequence.</para>
            Each bucket is pre-allocated to <paramref name="size" /> elements.
            If <paramref name="size" /> is set to a very large value, e.g.
            <see cref="F:System.Int32.MaxValue" /> to effectively disable batching by just
            hoping for a single bucket, then it can lead to memory exhaustion
            (<see cref="T:System.OutOfMemoryException" />).
            </para>
        </member>
        <member name="T:MoreLinq.Extensions.CartesianExtension">
            <summary>
                <c>Cartesian</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.CartesianExtension.Cartesian``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Returns the Cartesian product of two sequences by enumerating all
            possible combinations of one item from each sequence, and applying
            a user-defined projection to the items in a given combination.
            </summary>
            <typeparam name="T1">
            The type of the elements of <paramref name="first" />.</typeparam>
            <typeparam name="T2">
            The type of the elements of <paramref name="second" />.</typeparam>
            <typeparam name="TResult">
            The type of the elements of the result sequence.</typeparam>
            <param name="first">The first sequence of elements.</param>
            <param name="second">The second sequence of elements.</param>
            <param name="resultSelector">A projection function that combines
            elements from all of the sequences.</param>
            <returns>A sequence of elements returned by
            <paramref name="resultSelector" />.</returns>
            <remarks>
                <para>
            The method returns items in the same order as a nested foreach
            loop, but all sequences except for <paramref name="first" /> are
            cached when iterated over. The cache is then re-used for any
            subsequent iterations.</para>
                <para>
            This method uses deferred execution and stream its results.</para>
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.CartesianExtension.Cartesian``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Func{``0,``1,``2,``3})">
            <summary>
            Returns the Cartesian product of three sequences by enumerating all
            possible combinations of one item from each sequence, and applying
            a user-defined projection to the items in a given combination.
            </summary>
            <typeparam name="T1">
            The type of the elements of <paramref name="first" />.</typeparam>
            <typeparam name="T2">
            The type of the elements of <paramref name="second" />.</typeparam>
            <typeparam name="T3">
            The type of the elements of <paramref name="third" />.</typeparam>
            <typeparam name="TResult">
            The type of the elements of the result sequence.</typeparam>
            <param name="first">The first sequence of elements.</param>
            <param name="second">The second sequence of elements.</param>
            <param name="third">The third sequence of elements.</param>
            <param name="resultSelector">A projection function that combines
            elements from all of the sequences.</param>
            <returns>A sequence of elements returned by
            <paramref name="resultSelector" />.</returns>
            <remarks>
                <para>
            The method returns items in the same order as a nested foreach
            loop, but all sequences except for <paramref name="first" /> are
            cached when iterated over. The cache is then re-used for any
            subsequent iterations.</para>
                <para>
            This method uses deferred execution and stream its results.</para>
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.CartesianExtension.Cartesian``5(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Returns the Cartesian product of four sequences by enumerating all
            possible combinations of one item from each sequence, and applying
            a user-defined projection to the items in a given combination.
            </summary>
            <typeparam name="T1">
            The type of the elements of <paramref name="first" />.</typeparam>
            <typeparam name="T2">
            The type of the elements of <paramref name="second" />.</typeparam>
            <typeparam name="T3">
            The type of the elements of <paramref name="third" />.</typeparam>
            <typeparam name="T4">
            The type of the elements of <paramref name="fourth" />.</typeparam>
            <typeparam name="TResult">
            The type of the elements of the result sequence.</typeparam>
            <param name="first">The first sequence of elements.</param>
            <param name="second">The second sequence of elements.</param>
            <param name="third">The third sequence of elements.</param>
            <param name="fourth">The fourth sequence of elements.</param>
            <param name="resultSelector">A projection function that combines
            elements from all of the sequences.</param>
            <returns>A sequence of elements returned by
            <paramref name="resultSelector" />.</returns>
            <remarks>
                <para>
            The method returns items in the same order as a nested foreach
            loop, but all sequences except for <paramref name="first" /> are
            cached when iterated over. The cache is then re-used for any
            subsequent iterations.</para>
                <para>
            This method uses deferred execution and stream its results.</para>
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.CartesianExtension.Cartesian``6(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            Returns the Cartesian product of five sequences by enumerating all
            possible combinations of one item from each sequence, and applying
            a user-defined projection to the items in a given combination.
            </summary>
            <typeparam name="T1">
            The type of the elements of <paramref name="first" />.</typeparam>
            <typeparam name="T2">
            The type of the elements of <paramref name="second" />.</typeparam>
            <typeparam name="T3">
            The type of the elements of <paramref name="third" />.</typeparam>
            <typeparam name="T4">
            The type of the elements of <paramref name="fourth" />.</typeparam>
            <typeparam name="T5">
            The type of the elements of <paramref name="fifth" />.</typeparam>
            <typeparam name="TResult">
            The type of the elements of the result sequence.</typeparam>
            <param name="first">The first sequence of elements.</param>
            <param name="second">The second sequence of elements.</param>
            <param name="third">The third sequence of elements.</param>
            <param name="fourth">The fourth sequence of elements.</param>
            <param name="fifth">The fifth sequence of elements.</param>
            <param name="resultSelector">A projection function that combines
            elements from all of the sequences.</param>
            <returns>A sequence of elements returned by
            <paramref name="resultSelector" />.</returns>
            <remarks>
                <para>
            The method returns items in the same order as a nested foreach
            loop, but all sequences except for <paramref name="first" /> are
            cached when iterated over. The cache is then re-used for any
            subsequent iterations.</para>
                <para>
            This method uses deferred execution and stream its results.</para>
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.CartesianExtension.Cartesian``7(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Returns the Cartesian product of six sequences by enumerating all
            possible combinations of one item from each sequence, and applying
            a user-defined projection to the items in a given combination.
            </summary>
            <typeparam name="T1">
            The type of the elements of <paramref name="first" />.</typeparam>
            <typeparam name="T2">
            The type of the elements of <paramref name="second" />.</typeparam>
            <typeparam name="T3">
            The type of the elements of <paramref name="third" />.</typeparam>
            <typeparam name="T4">
            The type of the elements of <paramref name="fourth" />.</typeparam>
            <typeparam name="T5">
            The type of the elements of <paramref name="fifth" />.</typeparam>
            <typeparam name="T6">
            The type of the elements of <paramref name="sixth" />.</typeparam>
            <typeparam name="TResult">
            The type of the elements of the result sequence.</typeparam>
            <param name="first">The first sequence of elements.</param>
            <param name="second">The second sequence of elements.</param>
            <param name="third">The third sequence of elements.</param>
            <param name="fourth">The fourth sequence of elements.</param>
            <param name="fifth">The fifth sequence of elements.</param>
            <param name="sixth">The sixth sequence of elements.</param>
            <param name="resultSelector">A projection function that combines
            elements from all of the sequences.</param>
            <returns>A sequence of elements returned by
            <paramref name="resultSelector" />.</returns>
            <remarks>
                <para>
            The method returns items in the same order as a nested foreach
            loop, but all sequences except for <paramref name="first" /> are
            cached when iterated over. The cache is then re-used for any
            subsequent iterations.</para>
                <para>
            This method uses deferred execution and stream its results.</para>
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.CartesianExtension.Cartesian``8(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Returns the Cartesian product of seven sequences by enumerating all
            possible combinations of one item from each sequence, and applying
            a user-defined projection to the items in a given combination.
            </summary>
            <typeparam name="T1">
            The type of the elements of <paramref name="first" />.</typeparam>
            <typeparam name="T2">
            The type of the elements of <paramref name="second" />.</typeparam>
            <typeparam name="T3">
            The type of the elements of <paramref name="third" />.</typeparam>
            <typeparam name="T4">
            The type of the elements of <paramref name="fourth" />.</typeparam>
            <typeparam name="T5">
            The type of the elements of <paramref name="fifth" />.</typeparam>
            <typeparam name="T6">
            The type of the elements of <paramref name="sixth" />.</typeparam>
            <typeparam name="T7">
            The type of the elements of <paramref name="seventh" />.</typeparam>
            <typeparam name="TResult">
            The type of the elements of the result sequence.</typeparam>
            <param name="first">The first sequence of elements.</param>
            <param name="second">The second sequence of elements.</param>
            <param name="third">The third sequence of elements.</param>
            <param name="fourth">The fourth sequence of elements.</param>
            <param name="fifth">The fifth sequence of elements.</param>
            <param name="sixth">The sixth sequence of elements.</param>
            <param name="seventh">The seventh sequence of elements.</param>
            <param name="resultSelector">A projection function that combines
            elements from all of the sequences.</param>
            <returns>A sequence of elements returned by
            <paramref name="resultSelector" />.</returns>
            <remarks>
                <para>
            The method returns items in the same order as a nested foreach
            loop, but all sequences except for <paramref name="first" /> are
            cached when iterated over. The cache is then re-used for any
            subsequent iterations.</para>
                <para>
            This method uses deferred execution and stream its results.</para>
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.CartesianExtension.Cartesian``9(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Returns the Cartesian product of eight sequences by enumerating all
            possible combinations of one item from each sequence, and applying
            a user-defined projection to the items in a given combination.
            </summary>
            <typeparam name="T1">
            The type of the elements of <paramref name="first" />.</typeparam>
            <typeparam name="T2">
            The type of the elements of <paramref name="second" />.</typeparam>
            <typeparam name="T3">
            The type of the elements of <paramref name="third" />.</typeparam>
            <typeparam name="T4">
            The type of the elements of <paramref name="fourth" />.</typeparam>
            <typeparam name="T5">
            The type of the elements of <paramref name="fifth" />.</typeparam>
            <typeparam name="T6">
            The type of the elements of <paramref name="sixth" />.</typeparam>
            <typeparam name="T7">
            The type of the elements of <paramref name="seventh" />.</typeparam>
            <typeparam name="T8">
            The type of the elements of <paramref name="eighth" />.</typeparam>
            <typeparam name="TResult">
            The type of the elements of the result sequence.</typeparam>
            <param name="first">The first sequence of elements.</param>
            <param name="second">The second sequence of elements.</param>
            <param name="third">The third sequence of elements.</param>
            <param name="fourth">The fourth sequence of elements.</param>
            <param name="fifth">The fifth sequence of elements.</param>
            <param name="sixth">The sixth sequence of elements.</param>
            <param name="seventh">The seventh sequence of elements.</param>
            <param name="eighth">The eighth sequence of elements.</param>
            <param name="resultSelector">A projection function that combines
            elements from all of the sequences.</param>
            <returns>A sequence of elements returned by
            <paramref name="resultSelector" />.</returns>
            <remarks>
                <para>
            The method returns items in the same order as a nested foreach
            loop, but all sequences except for <paramref name="first" /> are
            cached when iterated over. The cache is then re-used for any
            subsequent iterations.</para>
                <para>
            This method uses deferred execution and stream its results.</para>
            </remarks>
        </member>
        <member name="T:MoreLinq.Extensions.ChooseExtension">
            <summary>
                <c>Choose</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.ChooseExtension.Choose``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.ValueTuple{System.Boolean,``1}})">
            <summary>
            Applies a function to each element of the source sequence and
            returns a new sequence of result elements for source elements
            where the function returns a couple (2-tuple) having a <c>true</c>
            as its first element and result as the second.
            </summary>
            <typeparam name="T">
            The type of the elements in <paramref name="source" />.</typeparam>
            <typeparam name="TResult">
            The type of the elements in the returned sequence.</typeparam>
            <param name="source"> The source sequence.</param>
            <param name="chooser">The function that is applied to each source
            element.</param>
            <returns>A sequence <typeparamref name="TResult" /> elements.</returns>
            <remarks>
            This method uses deferred execution semantics and streams its
            results.
            </remarks>
            <example>
                <code><![CDATA[
            var str = "O,l,2,3,4,S,6,7,B,9";
            var xs = str.Split(',').Choose(s => (int.TryParse(s, out var n), n));
            ]]></code>
            The <c>xs</c> variable will be a sequence of the integers 2, 3, 4,
            6, 7 and 9.
            </example>
        </member>
        <member name="T:MoreLinq.Extensions.CompareCountExtension">
            <summary>
                <c>CompareCount</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.CompareCountExtension.CompareCount``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Compares two sequences and returns an integer that indicates whether the first sequence
            has fewer, the same or more elements than the second sequence.
            </summary>
            <typeparam name="TFirst">Element type of the first sequence</typeparam>
            <typeparam name="TSecond">Element type of the second sequence</typeparam>
            <param name="first">The first sequence</param>
            <param name="second">The second sequence</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="first" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="second" /> is null</exception>
            <returns>
                <c>-1</c> if the first sequence has the fewest elements, <c>0</c> if the two sequences have the same number of elements
            or <c>1</c> if the first sequence has the most elements.</returns>
            <example>
                <code><![CDATA[
            var first = new[] { 123, 456 };
            var second = new[] { 789 };
            var result = first.CompareCount(second);
            ]]></code>
            The <c>result</c> variable will contain <c>1</c>.
            </example>
        </member>
        <member name="T:MoreLinq.Extensions.ConsumeExtension">
            <summary>
                <c>Consume</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.ConsumeExtension.Consume``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Completely consumes the given sequence. This method uses immediate execution,
            and doesn't store any data during execution.
            </summary>
            <typeparam name="T">Element type of the sequence</typeparam>
            <param name="source">Source to consume</param>
        </member>
        <member name="T:MoreLinq.Extensions.CountBetweenExtension">
            <summary>
                <c>CountBetween</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.CountBetweenExtension.CountBetween``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Determines whether or not the number of elements in the sequence is between
            an inclusive range of minimum and maximum integers.
            </summary>
            <typeparam name="T">Element type of sequence</typeparam>
            <param name="source">The source sequence</param>
            <param name="min">The minimum number of items a sequence must have for this
            function to return true</param>
            <param name="max">The maximun number of items a sequence must have for this
            function to return true</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="min" /> is negative or <paramref name="max" /> is less than min</exception>
            <returns>
                <c>true</c> if the number of elements in the sequence is between (inclusive)
            the min and max given integers or <c>false</c> otherwise.</returns>
            <example>
                <code><![CDATA[
            var numbers = new[] { 123, 456, 789 };
            var result = numbers.CountBetween(1, 2);
            ]]></code>
            The <c>result</c> variable will contain <c>false</c>.
            </example>
        </member>
        <member name="T:MoreLinq.Extensions.CountByExtension">
            <summary>
                <c>CountBy</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.CountByExtension.CountBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Applies a key-generating function to each element of a sequence and returns a sequence of
            unique keys and their number of occurrences in the original sequence.
            </summary>
            <typeparam name="TSource">Type of the elements of the source sequence.</typeparam>
            <typeparam name="TKey">Type of the projected element.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="keySelector">Function that transforms each item of source sequence into a key to be compared against the others.</param>
            <returns>A sequence of unique keys and their number of occurrences in the original sequence.</returns>
        </member>
        <member name="M:MoreLinq.Extensions.CountByExtension.CountBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Applies a key-generating function to each element of a sequence and returns a sequence of
            unique keys and their number of occurrences in the original sequence.
            An additional argument specifies a comparer to use for testing equivalence of keys.
            </summary>
            <typeparam name="TSource">Type of the elements of the source sequence.</typeparam>
            <typeparam name="TKey">Type of the projected element.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="keySelector">Function that transforms each item of source sequence into a key to be compared against the others.</param>
            <param name="comparer">The equality comparer to use to determine whether or not keys are equal.
            If null, the default equality comparer for <typeparamref name="TSource" /> is used.</param>
            <returns>A sequence of unique keys and their number of occurrences in the original sequence.</returns>
        </member>
        <member name="T:MoreLinq.Extensions.CountDownExtension">
            <summary>
                <c>CountDown</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.CountDownExtension.CountDown``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Int32},``1})">
            <summary>
            Provides a countdown counter for a given count of elements at the
            tail of the sequence where zero always represents the last element,
            one represents the second-last element, two represents the
            third-last element and so on.
            </summary>
            <typeparam name="T">
            The type of elements of <paramref name="source" /></typeparam>
            <typeparam name="TResult">
            The type of elements of the resulting sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="count">Count of tail elements of
            <paramref name="source" /> to count down.</param>
            <param name="resultSelector">
            A function that receives the element and the current countdown
            value for the element and which returns those mapped to a
            result returned in the resulting sequence. For elements before
            the last <paramref name="count" />, the coundown value is
            <c>null</c>.</param>
            <returns>
            A sequence of results returned by
            <paramref name="resultSelector" />.</returns>
            <remarks>
            This method uses deferred execution semantics and streams its
            results. At most, <paramref name="count" /> elements of the source
            sequence may be buffered at any one time unless
            <paramref name="source" /> is a collection or a list.
            </remarks>
        </member>
        <member name="T:MoreLinq.Extensions.DistinctByExtension">
            <summary>
                <c>DistinctBy</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.DistinctByExtension.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns all distinct elements of the given source, where "distinctness"
            is determined via a projection and the default equality comparer for the projected type.
            </summary>
            <remarks>
            This operator uses deferred execution and streams the results, although
            a set of already-seen keys is retained. If a key is seen multiple times,
            only the first element with that key is returned.
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <typeparam name="TKey">Type of the projected element</typeparam>
            <param name="source">Source sequence</param>
            <param name="keySelector">Projection for determining "distinctness"</param>
            <returns>A sequence consisting of distinct elements from the source sequence,
            comparing them by the specified key projection.</returns>
        </member>
        <member name="M:MoreLinq.Extensions.DistinctByExtension.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Returns all distinct elements of the given source, where "distinctness"
            is determined via a projection and the specified comparer for the projected type.
            </summary>
            <remarks>
            This operator uses deferred execution and streams the results, although
            a set of already-seen keys is retained. If a key is seen multiple times,
            only the first element with that key is returned.
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <typeparam name="TKey">Type of the projected element</typeparam>
            <param name="source">Source sequence</param>
            <param name="keySelector">Projection for determining "distinctness"</param>
            <param name="comparer">The equality comparer to use to determine whether or not keys are equal.
            If null, the default equality comparer for <c>TSource</c> is used.</param>
            <returns>A sequence consisting of distinct elements from the source sequence,
            comparing them by the specified key projection.</returns>
        </member>
        <member name="T:MoreLinq.Extensions.EndsWithExtension">
            <summary>
                <c>EndsWith</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.EndsWithExtension.EndsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether the end of the first sequence is equivalent to
            the second sequence, using the default equality comparer.
            </summary>
            <typeparam name="T">Type of elements.</typeparam>
            <param name="first">The sequence to check.</param>
            <param name="second">The sequence to compare to.</param>
            <returns>
                <c>true</c> if <paramref name="first" /> ends with elements
            equivalent to <paramref name="second" />.
            </returns>
            <remarks>
            This is the <see cref="T:System.Collections.Generic.IEnumerable`1" /> equivalent of
            <see cref="M:System.String.EndsWith(System.String)" /> and
            it calls <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)" /> using
            <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" /> on pairs of elements at
            the same index.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.EndsWithExtension.EndsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether the end of the first sequence is equivalent to
            the second sequence, using the specified element equality comparer.
            </summary>
            <typeparam name="T">Type of elements.</typeparam>
            <param name="first">The sequence to check.</param>
            <param name="second">The sequence to compare to.</param>
            <param name="comparer">Equality comparer to use.</param>
            <returns>
                <c>true</c> if <paramref name="first" /> ends with elements
            equivalent to <paramref name="second" />.
            </returns>
            <remarks>
            This is the <see cref="T:System.Collections.Generic.IEnumerable`1" /> equivalent of
            <see cref="M:System.String.EndsWith(System.String)" /> and it calls
            <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)" /> on pairs of
            elements at the same index.
            </remarks>
        </member>
        <member name="T:MoreLinq.Extensions.EquiZipExtension">
            <summary>
                <c>EquiZip</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.EquiZipExtension.EquiZip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Returns a projection of tuples, where each tuple contains the N-th
            element from each of the argument sequences. An exception is thrown
            if the input sequences are of different lengths.
            </summary>
            <typeparam name="TFirst">Type of elements in first sequence.</typeparam>
            <typeparam name="TSecond">Type of elements in second sequence.</typeparam>
            <typeparam name="TResult">Type of elements in result sequence.</typeparam>
            <param name="first">The first sequence.</param>
            <param name="second">The second sequence.</param>
            <param name="resultSelector">
            Function to apply to each pair of elements.</param>
            <returns>
            A sequence that contains elements of the two input sequences,
            combined by <paramref name="resultSelector" />.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The input sequences are of different lengths.
            </exception>
            <example>
                <code><![CDATA[
            var numbers = new[] { 1, 2, 3, 4 };
            var letters = new[] { "A", "B", "C", "D" };
            var zipped  = numbers.EquiZip(letters, (n, l) => n + l);
            ]]></code>
            The <c>zipped</c> variable, when iterated over, will yield "1A",
            "2B", "3C", "4D" in turn.
            </example>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.EquiZipExtension.EquiZip``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Func{``0,``1,``2,``3})">
            <summary>
            Returns a projection of tuples, where each tuple contains the N-th
            element from each of the argument sequences. An exception is thrown
            if the input sequences are of different lengths.
            </summary>
            <typeparam name="T1">Type of elements in first sequence.</typeparam>
            <typeparam name="T2">Type of elements in second sequence.</typeparam>
            <typeparam name="T3">Type of elements in third sequence.</typeparam>
            <typeparam name="TResult">Type of elements in result sequence.</typeparam>
            <param name="first">The first sequence.</param>
            <param name="second">The second sequence.</param>
            <param name="third">The third sequence.</param>
            <param name="resultSelector">
            Function to apply to each triplet of elements.</param>
            <returns>
            A sequence that contains elements of the three input sequences,
            combined by <paramref name="resultSelector" />.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The input sequences are of different lengths.
            </exception>
            <example>
                <code><![CDATA[
            var numbers = new[] { 1, 2, 3, 4 };
            var letters = new[] { "A", "B", "C", "D" };
            var chars   = new[] { 'a', 'b', 'c', 'd' };
            var zipped  = numbers.EquiZip(letters, chars, (n, l, c) => n + l + c);
            ]]></code>
            The <c>zipped</c> variable, when iterated over, will yield "1Aa",
            "2Bb", "3Cc", "4Dd" in turn.
            </example>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.EquiZipExtension.EquiZip``5(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Returns a projection of tuples, where each tuple contains the N-th
            element from each of the argument sequences. An exception is thrown
            if the input sequences are of different lengths.
            </summary>
            <typeparam name="T1">Type of elements in first sequence</typeparam>
            <typeparam name="T2">Type of elements in second sequence</typeparam>
            <typeparam name="T3">Type of elements in third sequence</typeparam>
            <typeparam name="T4">Type of elements in fourth sequence</typeparam>
            <typeparam name="TResult">Type of elements in result sequence</typeparam>
            <param name="first">The first sequence.</param>
            <param name="second">The second sequence.</param>
            <param name="third">The third sequence.</param>
            <param name="fourth">The fourth sequence.</param>
            <param name="resultSelector">
            Function to apply to each quadruplet of elements.</param>
            <returns>
            A sequence that contains elements of the four input sequences,
            combined by <paramref name="resultSelector" />.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The input sequences are of different lengths.
            </exception>
            <example>
                <code><![CDATA[
            var numbers = new[] { 1, 2, 3, 4 };
            var letters = new[] { "A", "B", "C", "D" };
            var chars   = new[] { 'a', 'b', 'c', 'd' };
            var flags   = new[] { true, false, true, false };
            var zipped = numbers.EquiZip(letters, chars, flags, (n, l, c, f) => n + l + c + f);
            ]]></code>
            The <c>zipped</c> variable, when iterated over, will yield "1AaTrue",
            "2BbFalse", "3CcTrue", "4DdFalse" in turn.
            </example>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
        </member>
        <member name="T:MoreLinq.Extensions.EvaluateExtension">
            <summary>
                <c>Evaluate</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.EvaluateExtension.Evaluate``1(System.Collections.Generic.IEnumerable{System.Func{``0}})">
            <summary>
            Returns a sequence containing the values resulting from invoking (in order) each function in the source sequence of functions.
            </summary>
            <remarks>
            This operator uses deferred execution and streams the results.
            If the resulting sequence is enumerated multiple times, the functions will be
            evaluated multiple times too.
            </remarks>
            <typeparam name="T">The type of the object returned by the functions.</typeparam>
            <param name="functions">The functions to evaluate.</param>
            <returns>A sequence with results from invoking <paramref name="functions" />.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="functions" /> is <c>null</c>.</exception>
        </member>
        <member name="T:MoreLinq.Extensions.ExactlyExtension">
            <summary>
                <c>Exactly</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.ExactlyExtension.Exactly``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Determines whether or not the number of elements in the sequence is equals to the given integer.
            </summary>
            <typeparam name="T">Element type of sequence</typeparam>
            <param name="source">The source sequence</param>
            <param name="count">The exactly number of items a sequence must have for this
            function to return true</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="count" /> is negative</exception>
            <returns>
                <c>true</c> if the number of elements in the sequence is equals
            to the given integer or <c>false</c> otherwise.</returns>
            <example>
                <code><![CDATA[
            var numbers = new[] { 123, 456, 789 };
            var result = numbers.Exactly(3);
            ]]></code>
            The <c>result</c> variable will contain <c>true</c>.
            </example>
        </member>
        <member name="T:MoreLinq.Extensions.ExceptByExtension">
            <summary>
                <c>ExceptBy</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.ExceptByExtension.ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the set of elements in the first sequence which aren't
            in the second sequence, according to a given key selector.
            </summary>
            <remarks>
            This is a set operation; if multiple elements in <paramref name="first" /> have
            equal keys, only the first such element is returned.
            This operator uses deferred execution and streams the results, although
            a set of keys from <paramref name="second" /> is immediately selected and retained.
            </remarks>
            <typeparam name="TSource">The type of the elements in the input sequences.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
            <param name="first">The sequence of potentially included elements.</param>
            <param name="second">The sequence of elements whose keys may prevent elements in
            <paramref name="first" /> from being returned.</param>
            <param name="keySelector">The mapping from source element to key.</param>
            <returns>A sequence of elements from <paramref name="first" /> whose key was not also a key for
            any element in <paramref name="second" />.</returns>
        </member>
        <member name="M:MoreLinq.Extensions.ExceptByExtension.ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Returns the set of elements in the first sequence which aren't
            in the second sequence, according to a given key selector.
            </summary>
            <remarks>
            This is a set operation; if multiple elements in <paramref name="first" /> have
            equal keys, only the first such element is returned.
            This operator uses deferred execution and streams the results, although
            a set of keys from <paramref name="second" /> is immediately selected and retained.
            </remarks>
            <typeparam name="TSource">The type of the elements in the input sequences.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
            <param name="first">The sequence of potentially included elements.</param>
            <param name="second">The sequence of elements whose keys may prevent elements in
            <paramref name="first" /> from being returned.</param>
            <param name="keySelector">The mapping from source element to key.</param>
            <param name="keyComparer">The equality comparer to use to determine whether or not keys are equal.
            If null, the default equality comparer for <c>TSource</c> is used.</param>
            <returns>A sequence of elements from <paramref name="first" /> whose key was not also a key for
            any element in <paramref name="second" />.</returns>
        </member>
        <member name="T:MoreLinq.Extensions.ExcludeExtension">
            <summary>
                <c>Exclude</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.ExcludeExtension.Exclude``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Excludes a contiguous number of elements from a sequence starting
            at a given index.
            </summary>
            <typeparam name="T">The type of the elements of the sequence</typeparam>
            <param name="sequence">The sequence to exclude elements from</param>
            <param name="startIndex">The zero-based index at which to begin excluding elements</param>
            <param name="count">The number of elements to exclude</param>
            <returns>A sequence that excludes the specified portion of elements</returns>
        </member>
        <member name="T:MoreLinq.Extensions.FallbackIfEmptyExtension">
            <summary>
                <c>FallbackIfEmpty</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.FallbackIfEmptyExtension.FallbackIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns the elements of the specified sequence or the specified
            value in a singleton collection if the sequence is empty.
            </summary>
            <typeparam name="T">The type of the elements in the sequences.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="fallback">The value to return in a singleton
            collection if <paramref name="source" /> is empty.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <paramref name="fallback" />
            if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.
            </returns>
            <example>
                <code><![CDATA[
            var numbers = new[] { 123, 456, 789 };
            var result = numbers.Where(x => x == 100).FallbackIfEmpty(-1).Single();
            ]]></code>
            The <c>result</c> variable will contain <c>-1</c>.
            </example>
        </member>
        <member name="M:MoreLinq.Extensions.FallbackIfEmptyExtension.FallbackIfEmpty``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the elements of a sequence, but if it is empty then
            returns an alternate sequence of values.
            </summary>
            <typeparam name="T">The type of the elements in the sequences.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="fallback">The alternate sequence that is returned
            if <paramref name="source" /> is empty.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that containing fallback values
            if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.
            </returns>
        </member>
        <member name="M:MoreLinq.Extensions.FallbackIfEmptyExtension.FallbackIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Returns the elements of a sequence, but if it is empty then
            returns an alternate sequence from an array of values.
            </summary>
            <typeparam name="T">The type of the elements in the sequences.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="fallback">The array that is returned as the alternate
            sequence if <paramref name="source" /> is empty.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that containing fallback values
            if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.
            </returns>
        </member>
        <member name="M:MoreLinq.Extensions.FallbackIfEmptyExtension.FallbackIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0,``0)">
            <summary>
            Returns the elements of a sequence, but if it is empty then
            returns an alternate sequence of values.
            </summary>
            <typeparam name="T">The type of the elements in the sequences.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="fallback1">First value of the alternate sequence that
            is returned if <paramref name="source" /> is empty.</param>
            <param name="fallback2">Second value of the alternate sequence that
            is returned if <paramref name="source" /> is empty.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that containing fallback values
            if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.
            </returns>
        </member>
        <member name="M:MoreLinq.Extensions.FallbackIfEmptyExtension.FallbackIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0,``0,``0)">
            <summary>
            Returns the elements of a sequence, but if it is empty then
            returns an alternate sequence of values.
            </summary>
            <typeparam name="T">The type of the elements in the sequences.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="fallback1">First value of the alternate sequence that
            is returned if <paramref name="source" /> is empty.</param>
            <param name="fallback2">Second value of the alternate sequence that
            is returned if <paramref name="source" /> is empty.</param>
            <param name="fallback3">Third value of the alternate sequence that
            is returned if <paramref name="source" /> is empty.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that containing fallback values
            if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.
            </returns>
        </member>
        <member name="M:MoreLinq.Extensions.FallbackIfEmptyExtension.FallbackIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0,``0,``0,``0)">
            <summary>
            Returns the elements of a sequence, but if it is empty then
            returns an alternate sequence of values.
            </summary>
            <typeparam name="T">The type of the elements in the sequences.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="fallback1">First value of the alternate sequence that
            is returned if <paramref name="source" /> is empty.</param>
            <param name="fallback2">Second value of the alternate sequence that
            is returned if <paramref name="source" /> is empty.</param>
            <param name="fallback3">Third value of the alternate sequence that
            is returned if <paramref name="source" /> is empty.</param>
            <param name="fallback4">Fourth value of the alternate sequence that
            is returned if <paramref name="source" /> is empty.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that containing fallback values
            if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.
            </returns>
        </member>
        <member name="T:MoreLinq.Extensions.FillBackwardExtension">
            <summary>
                <c>FillBackward</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.FillBackwardExtension.FillBackward``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a sequence with each null reference or value in the source
            replaced with the following non-null reference or value in
            that sequence.
            </summary>
            <param name="source">The source sequence.</param>
            <typeparam name="T">Type of the elements in the source sequence.</typeparam>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> with null references or values
            replaced.
            </returns>
            <remarks>
            This method uses deferred execution semantics and streams its
            results. If references or values are null at the end of the
            sequence then they remain null.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.FillBackwardExtension.FillBackward``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns a sequence with each missing element in the source replaced
            with the following non-missing element in that sequence. An
            additional parameter specifies a function used to determine if an
            element is considered missing or not.
            </summary>
            <param name="source">The source sequence.</param>
            <param name="predicate">The function used to determine if
            an element in the sequence is considered missing.</param>
            <typeparam name="T">Type of the elements in the source sequence.</typeparam>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> with missing values replaced.
            </returns>
            <remarks>
            This method uses deferred execution semantics and streams its
            results. If elements are missing at the end of the sequence then
            they remain missing.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.FillBackwardExtension.FillBackward``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``0,``0})">
            <summary>
            Returns a sequence with each missing element in the source replaced
            with the following non-missing element in that sequence. Additional
            parameters specifiy two functions, one used to determine if an
            element is considered missing or not and another to provide the
            replacement for the missing element.
            </summary>
            <param name="source">The source sequence.</param>
            <param name="predicate">The function used to determine if
            an element in the sequence is considered missing.</param>
            <param name="fillSelector">The function used to produce the element
            that will replace the missing one. Its first argument receives the
            current element considered missing while the second argument
            receives the next non-missing element.</param>
            <typeparam name="T">Type of the elements in the source sequence.</typeparam>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> with missing values replaced.
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> with missing elements filled.
            </returns><remarks>
            This method uses deferred execution semantics and streams its
            results. If elements are missing at the end of the sequence then
            they remain missing.
            </remarks></member>
        <member name="T:MoreLinq.Extensions.FillForwardExtension">
            <summary>
                <c>FillForward</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.FillForwardExtension.FillForward``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a sequence with each null reference or value in the source
            replaced with the previous non-null reference or value seen in
            that sequence.
            </summary>
            <param name="source">The source sequence.</param>
            <typeparam name="T">Type of the elements in the source sequence.</typeparam>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> with null references or values
            replaced.
            </returns>
            <remarks>
            This method uses deferred execution semantics and streams its
            results. If references or values are null at the start of the
            sequence then they remain null.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.FillForwardExtension.FillForward``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns a sequence with each missing element in the source replaced
            with the previous non-missing element seen in that sequence. An
            additional parameter specifies a function used to determine if an
            element is considered missing or not.
            </summary>
            <param name="source">The source sequence.</param>
            <param name="predicate">The function used to determine if
            an element in the sequence is considered missing.</param>
            <typeparam name="T">Type of the elements in the source sequence.</typeparam>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> with missing values replaced.
            </returns>
            <remarks>
            This method uses deferred execution semantics and streams its
            results. If elements are missing at the start of the sequence then
            they remain missing.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.FillForwardExtension.FillForward``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``0,``0})">
            <summary>
            Returns a sequence with each missing element in the source replaced
            with one based on the previous non-missing element seen in that
            sequence. Additional parameters specifiy two functions, one used to
            determine if an element is considered missing or not and another
            to provide the replacement for the missing element.
            </summary>
            <param name="source">The source sequence.</param>
            <param name="predicate">The function used to determine if
            an element in the sequence is considered missing.</param>
            <param name="fillSelector">The function used to produce the element
            that will replace the missing one. Its first argument receives the
            current element considered missing while the second argument
            receives the previous non-missing element.</param>
            <typeparam name="T">Type of the elements in the source sequence.</typeparam>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> with missing values replaced.
            </returns>
            <remarks>
            This method uses deferred execution semantics and streams its
            results. If elements are missing at the start of the sequence then
            they remain missing.
            </remarks>
        </member>
        <member name="T:MoreLinq.Extensions.FirstExtension">
            <summary>
                <c>First</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.FirstExtension.First``1(MoreLinq.IExtremaEnumerable{``0})">
            <summary>
            Returns the first element of a sequence.
            </summary>
            <typeparam name="T">
            The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The input sequence.</param>
            <exception cref="T:System.InvalidOperationException">
            The input sequence is empty.</exception>
            <returns>
            The first element of the input sequence.
            </returns>
        </member>
        <member name="T:MoreLinq.Extensions.FirstOrDefaultExtension">
            <summary>
                <c>FirstOrDefault</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.FirstOrDefaultExtension.FirstOrDefault``1(MoreLinq.IExtremaEnumerable{``0})">
            <summary>
            Returns the first element of a sequence, or a default value if the
            sequence contains no elements.
            </summary>
            <typeparam name="T">
            The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The input sequence.</param>
            <returns>
            Default value of type <typeparamref name="T" /> if source is empty;
            otherwise, the first element in source.
            </returns>
        </member>
        <member name="T:MoreLinq.Extensions.FlattenExtension">
            <summary>
                <c>Flatten</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.FlattenExtension.Flatten(System.Collections.IEnumerable)">
            <summary>
            Flattens a sequence containing arbitrarily-nested sequences.
            </summary>
            <param name="source">The sequence that will be flattened.</param>
            <returns>
            A sequence that contains the elements of <paramref name="source" />
            and all nested sequences (except strings).
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null.</exception>
        </member>
        <member name="M:MoreLinq.Extensions.FlattenExtension.Flatten(System.Collections.IEnumerable,System.Func{System.Collections.IEnumerable,System.Boolean})">
            <summary>
            Flattens a sequence containing arbitrarily-nested sequences. An
            additional parameter specifies a predicate function used to
            determine whether a nested <see cref="T:System.Collections.IEnumerable" /> should be
            flattened or not.
            </summary>
            <param name="source">The sequence that will be flattened.</param>
            <param name="predicate">
            A function that receives each element that implements
            <see cref="T:System.Collections.IEnumerable" /> and indicates if its elements should be
            recursively flattened into the resulting sequence.
            </param>
            <returns>
            A sequence that contains the elements of <paramref name="source" />
            and all nested sequences for which the predicate function
            returned <c>true</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="predicate" /> is <c>null</c>.</exception>
        </member>
        <member name="M:MoreLinq.Extensions.FlattenExtension.Flatten(System.Collections.IEnumerable,System.Func{System.Object,System.Collections.IEnumerable})">
            <summary>
            Flattens a sequence containing arbitrarily-nested sequences. An
            additional parameter specifies a function that projects an inner
            sequence via a property of an object.
            </summary>
            <param name="source">The sequence that will be flattened.</param>
            <param name="selector">
            A function that receives each element of the sequence as an object
            and projects an inner sequence to be flattened. If the function
            returns <c>null</c> then the object argument is considered a leaf
            of the flattening process.
            </param>
            <returns>
            A sequence that contains the elements of <paramref name="source" />
            and all nested sequences projected via the
            <paramref name="selector" /> function.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="selector" /> is <c>null</c>.</exception>
        </member>
        <member name="T:MoreLinq.Extensions.FoldExtension">
            <summary>
                <c>Fold</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.FoldExtension.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the result of applying a function to a sequence of
            1 element.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers
            as many items of the source sequence as necessary.
            </remarks>
            <typeparam name="T">Type of element in the source sequence</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="source">The sequence of items to fold.</param>
            <param name="folder">Function to apply to the elements in the sequence.</param>
            <returns>The folded value returned by <paramref name="folder" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="folder" /> is null</exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="source" /> does not contain exactly 1 element</exception>
        </member>
        <member name="M:MoreLinq.Extensions.FoldExtension.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``1})">
            <summary>
            Returns the result of applying a function to a sequence of
            2 elements.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers
            as many items of the source sequence as necessary.
            </remarks>
            <typeparam name="T">Type of element in the source sequence</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="source">The sequence of items to fold.</param>
            <param name="folder">Function to apply to the elements in the sequence.</param>
            <returns>The folded value returned by <paramref name="folder" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="folder" /> is null</exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="source" /> does not contain exactly 2 elements</exception>
        </member>
        <member name="M:MoreLinq.Extensions.FoldExtension.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``1})">
            <summary>
            Returns the result of applying a function to a sequence of
            3 elements.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers
            as many items of the source sequence as necessary.
            </remarks>
            <typeparam name="T">Type of element in the source sequence</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="source">The sequence of items to fold.</param>
            <param name="folder">Function to apply to the elements in the sequence.</param>
            <returns>The folded value returned by <paramref name="folder" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="folder" /> is null</exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="source" /> does not contain exactly 3 elements</exception>
        </member>
        <member name="M:MoreLinq.Extensions.FoldExtension.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``1})">
            <summary>
            Returns the result of applying a function to a sequence of
            4 elements.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers
            as many items of the source sequence as necessary.
            </remarks>
            <typeparam name="T">Type of element in the source sequence</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="source">The sequence of items to fold.</param>
            <param name="folder">Function to apply to the elements in the sequence.</param>
            <returns>The folded value returned by <paramref name="folder" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="folder" /> is null</exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="source" /> does not contain exactly 4 elements</exception>
        </member>
        <member name="M:MoreLinq.Extensions.FoldExtension.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``0,``1})">
            <summary>
            Returns the result of applying a function to a sequence of
            5 elements.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers
            as many items of the source sequence as necessary.
            </remarks>
            <typeparam name="T">Type of element in the source sequence</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="source">The sequence of items to fold.</param>
            <param name="folder">Function to apply to the elements in the sequence.</param>
            <returns>The folded value returned by <paramref name="folder" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="folder" /> is null</exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="source" /> does not contain exactly 5 elements</exception>
        </member>
        <member name="M:MoreLinq.Extensions.FoldExtension.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``0,``0,``1})">
            <summary>
            Returns the result of applying a function to a sequence of
            6 elements.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers
            as many items of the source sequence as necessary.
            </remarks>
            <typeparam name="T">Type of element in the source sequence</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="source">The sequence of items to fold.</param>
            <param name="folder">Function to apply to the elements in the sequence.</param>
            <returns>The folded value returned by <paramref name="folder" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="folder" /> is null</exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="source" /> does not contain exactly 6 elements</exception>
        </member>
        <member name="M:MoreLinq.Extensions.FoldExtension.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``0,``0,``0,``1})">
            <summary>
            Returns the result of applying a function to a sequence of
            7 elements.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers
            as many items of the source sequence as necessary.
            </remarks>
            <typeparam name="T">Type of element in the source sequence</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="source">The sequence of items to fold.</param>
            <param name="folder">Function to apply to the elements in the sequence.</param>
            <returns>The folded value returned by <paramref name="folder" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="folder" /> is null</exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="source" /> does not contain exactly 7 elements</exception>
        </member>
        <member name="M:MoreLinq.Extensions.FoldExtension.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``1})">
            <summary>
            Returns the result of applying a function to a sequence of
            8 elements.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers
            as many items of the source sequence as necessary.
            </remarks>
            <typeparam name="T">Type of element in the source sequence</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="source">The sequence of items to fold.</param>
            <param name="folder">Function to apply to the elements in the sequence.</param>
            <returns>The folded value returned by <paramref name="folder" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="folder" /> is null</exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="source" /> does not contain exactly 8 elements</exception>
        </member>
        <member name="M:MoreLinq.Extensions.FoldExtension.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``1})">
            <summary>
            Returns the result of applying a function to a sequence of
            9 elements.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers
            as many items of the source sequence as necessary.
            </remarks>
            <typeparam name="T">Type of element in the source sequence</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="source">The sequence of items to fold.</param>
            <param name="folder">Function to apply to the elements in the sequence.</param>
            <returns>The folded value returned by <paramref name="folder" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="folder" /> is null</exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="source" /> does not contain exactly 9 elements</exception>
        </member>
        <member name="M:MoreLinq.Extensions.FoldExtension.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``1})">
            <summary>
            Returns the result of applying a function to a sequence of
            10 elements.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers
            as many items of the source sequence as necessary.
            </remarks>
            <typeparam name="T">Type of element in the source sequence</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="source">The sequence of items to fold.</param>
            <param name="folder">Function to apply to the elements in the sequence.</param>
            <returns>The folded value returned by <paramref name="folder" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="folder" /> is null</exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="source" /> does not contain exactly 10 elements</exception>
        </member>
        <member name="M:MoreLinq.Extensions.FoldExtension.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``1})">
            <summary>
            Returns the result of applying a function to a sequence of
            11 elements.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers
            as many items of the source sequence as necessary.
            </remarks>
            <typeparam name="T">Type of element in the source sequence</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="source">The sequence of items to fold.</param>
            <param name="folder">Function to apply to the elements in the sequence.</param>
            <returns>The folded value returned by <paramref name="folder" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="folder" /> is null</exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="source" /> does not contain exactly 11 elements</exception>
        </member>
        <member name="M:MoreLinq.Extensions.FoldExtension.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``1})">
            <summary>
            Returns the result of applying a function to a sequence of
            12 elements.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers
            as many items of the source sequence as necessary.
            </remarks>
            <typeparam name="T">Type of element in the source sequence</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="source">The sequence of items to fold.</param>
            <param name="folder">Function to apply to the elements in the sequence.</param>
            <returns>The folded value returned by <paramref name="folder" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="folder" /> is null</exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="source" /> does not contain exactly 12 elements</exception>
        </member>
        <member name="M:MoreLinq.Extensions.FoldExtension.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``1})">
            <summary>
            Returns the result of applying a function to a sequence of
            13 elements.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers
            as many items of the source sequence as necessary.
            </remarks>
            <typeparam name="T">Type of element in the source sequence</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="source">The sequence of items to fold.</param>
            <param name="folder">Function to apply to the elements in the sequence.</param>
            <returns>The folded value returned by <paramref name="folder" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="folder" /> is null</exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="source" /> does not contain exactly 13 elements</exception>
        </member>
        <member name="M:MoreLinq.Extensions.FoldExtension.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``1})">
            <summary>
            Returns the result of applying a function to a sequence of
            14 elements.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers
            as many items of the source sequence as necessary.
            </remarks>
            <typeparam name="T">Type of element in the source sequence</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="source">The sequence of items to fold.</param>
            <param name="folder">Function to apply to the elements in the sequence.</param>
            <returns>The folded value returned by <paramref name="folder" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="folder" /> is null</exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="source" /> does not contain exactly 14 elements</exception>
        </member>
        <member name="M:MoreLinq.Extensions.FoldExtension.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``1})">
            <summary>
            Returns the result of applying a function to a sequence of
            15 elements.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers
            as many items of the source sequence as necessary.
            </remarks>
            <typeparam name="T">Type of element in the source sequence</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="source">The sequence of items to fold.</param>
            <param name="folder">Function to apply to the elements in the sequence.</param>
            <returns>The folded value returned by <paramref name="folder" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="folder" /> is null</exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="source" /> does not contain exactly 15 elements</exception>
        </member>
        <member name="M:MoreLinq.Extensions.FoldExtension.Fold``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``1})">
            <summary>
            Returns the result of applying a function to a sequence of
            16 elements.
            </summary>
            <remarks>
            This operator uses immediate execution and effectively buffers
            as many items of the source sequence as necessary.
            </remarks>
            <typeparam name="T">Type of element in the source sequence</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="source">The sequence of items to fold.</param>
            <param name="folder">Function to apply to the elements in the sequence.</param>
            <returns>The folded value returned by <paramref name="folder" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="folder" /> is null</exception>
            <exception cref="T:System.InvalidOperationException">
                <paramref name="source" /> does not contain exactly 16 elements</exception>
        </member>
        <member name="T:MoreLinq.Extensions.ForEachExtension">
            <summary>
                <c>ForEach</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.ForEachExtension.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Immediately executes the given action on each element in the source sequence.
            </summary>
            <typeparam name="T">The type of the elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="action">The action to execute on each element</param>
        </member>
        <member name="M:MoreLinq.Extensions.ForEachExtension.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Immediately executes the given action on each element in the source sequence.
            Each element's index is used in the logic of the action.
            </summary>
            <typeparam name="T">The type of the elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="action">The action to execute on each element; the second parameter
            of the action represents the index of the source element.</param>
        </member>
        <member name="T:MoreLinq.Extensions.FullGroupJoinExtension">
            <summary>
                <c>FullGroupJoin</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.FullGroupJoinExtension.FullGroupJoin``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2})">
            <summary>
            Performs a Full Group Join between the <paramref name="first" /> and <paramref name="second" /> sequences.
            </summary>
            <remarks>
            This operator uses deferred execution and streams the results.
            The results are yielded in the order of the elements found in the first sequence
            followed by those found only in the second. In addition, the callback responsible
            for projecting the results is supplied with sequences which preserve their source order.
            </remarks>
            <typeparam name="TFirst">The type of the elements in the first input sequence</typeparam>
            <typeparam name="TSecond">The type of the elements in the second input sequence</typeparam>
            <typeparam name="TKey">The type of the key to use to join</typeparam>
            <param name="first">First sequence</param>
            <param name="second">Second sequence</param>
            <param name="firstKeySelector">The mapping from first sequence to key</param>
            <param name="secondKeySelector">The mapping from second sequence to key</param>
            <returns>A sequence of elements joined from <paramref name="first" /> and <paramref name="second" />.
            </returns>
        </member>
        <member name="M:MoreLinq.Extensions.FullGroupJoinExtension.FullGroupJoin``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Performs a Full Group Join between the <paramref name="first" /> and <paramref name="second" /> sequences.
            </summary>
            <remarks>
            This operator uses deferred execution and streams the results.
            The results are yielded in the order of the elements found in the first sequence
            followed by those found only in the second. In addition, the callback responsible
            for projecting the results is supplied with sequences which preserve their source order.
            </remarks>
            <typeparam name="TFirst">The type of the elements in the first input sequence</typeparam>
            <typeparam name="TSecond">The type of the elements in the second input sequence</typeparam>
            <typeparam name="TKey">The type of the key to use to join</typeparam>
            <param name="first">First sequence</param>
            <param name="second">Second sequence</param>
            <param name="firstKeySelector">The mapping from first sequence to key</param>
            <param name="secondKeySelector">The mapping from second sequence to key</param>
            <param name="comparer">The equality comparer to use to determine whether or not keys are equal.
            If null, the default equality comparer for <c>TKey</c> is used.</param>
            <returns>A sequence of elements joined from <paramref name="first" /> and <paramref name="second" />.
            </returns>
        </member>
        <member name="M:MoreLinq.Extensions.FullGroupJoinExtension.FullGroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``2,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},``3})">
            <summary>
            Performs a full group-join between two sequences.
            </summary>
            <remarks>
            This operator uses deferred execution and streams the results.
            The results are yielded in the order of the elements found in the first sequence
            followed by those found only in the second. In addition, the callback responsible
            for projecting the results is supplied with sequences which preserve their source order.
            </remarks>
            <typeparam name="TFirst">The type of the elements in the first input sequence</typeparam>
            <typeparam name="TSecond">The type of the elements in the second input sequence</typeparam>
            <typeparam name="TKey">The type of the key to use to join</typeparam>
            <typeparam name="TResult">The type of the elements of the resulting sequence</typeparam>
            <param name="first">First sequence</param>
            <param name="second">Second sequence</param>
            <param name="firstKeySelector">The mapping from first sequence to key</param>
            <param name="secondKeySelector">The mapping from second sequence to key</param>
            <param name="resultSelector">Function to apply to each pair of elements plus the key</param>
            <returns>A sequence of elements joined from <paramref name="first" /> and <paramref name="second" />.
            </returns>
        </member>
        <member name="M:MoreLinq.Extensions.FullGroupJoinExtension.FullGroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``2,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Performs a full group-join between two sequences.
            </summary>
            <remarks>
            This operator uses deferred execution and streams the results.
            The results are yielded in the order of the elements found in the first sequence
            followed by those found only in the second. In addition, the callback responsible
            for projecting the results is supplied with sequences which preserve their source order.
            </remarks>
            <typeparam name="TFirst">The type of the elements in the first input sequence</typeparam>
            <typeparam name="TSecond">The type of the elements in the second input sequence</typeparam>
            <typeparam name="TKey">The type of the key to use to join</typeparam>
            <typeparam name="TResult">The type of the elements of the resulting sequence</typeparam>
            <param name="first">First sequence</param>
            <param name="second">Second sequence</param>
            <param name="firstKeySelector">The mapping from first sequence to key</param>
            <param name="secondKeySelector">The mapping from second sequence to key</param>
            <param name="resultSelector">Function to apply to each pair of elements plus the key</param>
            <param name="comparer">The equality comparer to use to determine whether or not keys are equal.
            If null, the default equality comparer for <c>TKey</c> is used.</param>
            <returns>A sequence of elements joined from <paramref name="first" /> and <paramref name="second" />.
            </returns>
        </member>
        <member name="T:MoreLinq.Extensions.FullJoinExtension">
            <summary>
                <c>FullJoin</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.FullJoinExtension.FullJoin``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``2},System.Func{``0,``0,``2})">
            <summary>
            Performs a full outer join on two homogeneous sequences.
            Additional arguments specify key selection functions and result
            projection functions.
            </summary>
            <typeparam name="TSource">
            The type of elements in the source sequence.</typeparam>
            <typeparam name="TKey">
            The type of the key returned by the key selector function.</typeparam>
            <typeparam name="TResult">
            The type of the result elements.</typeparam>
            <param name="first">
            The first sequence to join fully.</param>
            <param name="second">
            The second sequence to join fully.</param>
            <param name="keySelector">
            Function that projects the key given an element of one of the
            sequences to join.</param>
            <param name="firstSelector">
            Function that projects the result given just an element from
            <paramref name="first" /> where there is no corresponding element
            in <paramref name="second" />.</param>
            <param name="secondSelector">
            Function that projects the result given just an element from
            <paramref name="second" /> where there is no corresponding element
            in <paramref name="first" />.</param>
            <param name="bothSelector">
            Function that projects the result given an element from
            <paramref name="first" /> and an element from <paramref name="second" />
            that match on a common key.</param>
            <returns>A sequence containing results projected from a full
            outer join of the two input sequences.</returns>
        </member>
        <member name="M:MoreLinq.Extensions.FullJoinExtension.FullJoin``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``2},System.Func{``0,``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Performs a full outer join on two homogeneous sequences.
            Additional arguments specify key selection functions, result
            projection functions and a key comparer.
            </summary>
            <typeparam name="TSource">
            The type of elements in the source sequence.</typeparam>
            <typeparam name="TKey">
            The type of the key returned by the key selector function.</typeparam>
            <typeparam name="TResult">
            The type of the result elements.</typeparam>
            <param name="first">
            The first sequence to join fully.</param>
            <param name="second">
            The second sequence to join fully.</param>
            <param name="keySelector">
            Function that projects the key given an element of one of the
            sequences to join.</param>
            <param name="firstSelector">
            Function that projects the result given just an element from
            <paramref name="first" /> where there is no corresponding element
            in <paramref name="second" />.</param>
            <param name="secondSelector">
            Function that projects the result given just an element from
            <paramref name="second" /> where there is no corresponding element
            in <paramref name="first" />.</param>
            <param name="bothSelector">
            Function that projects the result given an element from
            <paramref name="first" /> and an element from <paramref name="second" />
            that match on a common key.</param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> instance used to compare
            keys for equality.</param>
            <returns>A sequence containing results projected from a full
            outer join of the two input sequences.</returns>
        </member>
        <member name="M:MoreLinq.Extensions.FullJoinExtension.FullJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``3},System.Func{``1,``3},System.Func{``0,``1,``3})">
            <summary>
            Performs a full outer join on two heterogeneous sequences.
            Additional arguments specify key selection functions and result
            projection functions.
            </summary>
            <typeparam name="TFirst">
            The type of elements in the first sequence.</typeparam>
            <typeparam name="TSecond">
            The type of elements in the second sequence.</typeparam>
            <typeparam name="TKey">
            The type of the key returned by the key selector functions.</typeparam>
            <typeparam name="TResult">
            The type of the result elements.</typeparam>
            <param name="first">
            The first sequence to join fully.</param>
            <param name="second">
            The second sequence to join fully.</param>
            <param name="firstKeySelector">
            Function that projects the key given an element from <paramref name="first" />.</param>
            <param name="secondKeySelector">
            Function that projects the key given an element from <paramref name="second" />.</param>
            <param name="firstSelector">
            Function that projects the result given just an element from
            <paramref name="first" /> where there is no corresponding element
            in <paramref name="second" />.</param>
            <param name="secondSelector">
            Function that projects the result given just an element from
            <paramref name="second" /> where there is no corresponding element
            in <paramref name="first" />.</param>
            <param name="bothSelector">
            Function that projects the result given an element from
            <paramref name="first" /> and an element from <paramref name="second" />
            that match on a common key.</param>
            <returns>A sequence containing results projected from a full
            outer join of the two input sequences.</returns>
        </member>
        <member name="M:MoreLinq.Extensions.FullJoinExtension.FullJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``3},System.Func{``1,``3},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Performs a full outer join on two heterogeneous sequences.
            Additional arguments specify key selection functions, result
            projection functions and a key comparer.
            </summary>
            <typeparam name="TFirst">
            The type of elements in the first sequence.</typeparam>
            <typeparam name="TSecond">
            The type of elements in the second sequence.</typeparam>
            <typeparam name="TKey">
            The type of the key returned by the key selector functions.</typeparam>
            <typeparam name="TResult">
            The type of the result elements.</typeparam>
            <param name="first">
            The first sequence to join fully.</param>
            <param name="second">
            The second sequence to join fully.</param>
            <param name="firstKeySelector">
            Function that projects the key given an element from <paramref name="first" />.</param>
            <param name="secondKeySelector">
            Function that projects the key given an element from <paramref name="second" />.</param>
            <param name="firstSelector">
            Function that projects the result given just an element from
            <paramref name="first" /> where there is no corresponding element
            in <paramref name="second" />.</param>
            <param name="secondSelector">
            Function that projects the result given just an element from
            <paramref name="second" /> where there is no corresponding element
            in <paramref name="first" />.</param>
            <param name="bothSelector">
            Function that projects the result given an element from
            <paramref name="first" /> and an element from <paramref name="second" />
            that match on a common key.</param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> instance used to compare
            keys for equality.</param>
            <returns>A sequence containing results projected from a full
            outer join of the two input sequences.</returns>
        </member>
        <member name="T:MoreLinq.Extensions.GroupAdjacentExtension">
            <summary>
                <c>GroupAdjacent</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.GroupAdjacentExtension.GroupAdjacent``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Groups the adjacent elements of a sequence according to a
            specified key selector function.
            </summary>
            <typeparam name="TSource">The type of the elements of
            <paramref name="source" />.</typeparam>
            <typeparam name="TKey">The type of the key returned by
            <paramref name="keySelector" />.</typeparam>
            <param name="source">A sequence whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each
            element.</param>
            <returns>A sequence of groupings where each grouping
            (<see cref="T:System.Linq.IGrouping`2" />) contains the key
            and the adjacent elements in the same order as found in the
            source sequence.</returns>
            <remarks>
            This method is implemented by using deferred execution and
            streams the groupings. The grouping elements, however, are
            buffered. Each grouping is therefore yielded as soon as it
            is complete and before the next grouping occurs.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.GroupAdjacentExtension.GroupAdjacent``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the adjacent elements of a sequence according to a
            specified key selector function and compares the keys by using a
            specified comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of
            <paramref name="source" />.</typeparam>
            <typeparam name="TKey">The type of the key returned by
            <paramref name="keySelector" />.</typeparam>
            <param name="source">A sequence whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each
            element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to
            compare keys.</param>
            <returns>A sequence of groupings where each grouping
            (<see cref="T:System.Linq.IGrouping`2" />) contains the key
            and the adjacent elements in the same order as found in the
            source sequence.</returns>
            <remarks>
            This method is implemented by using deferred execution and
            streams the groupings. The grouping elements, however, are
            buffered. Each grouping is therefore yielded as soon as it
            is complete and before the next grouping occurs.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.GroupAdjacentExtension.GroupAdjacent``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Groups the adjacent elements of a sequence according to a
            specified key selector function and projects the elements for
            each group by using a specified function.
            </summary>
            <typeparam name="TSource">The type of the elements of
            <paramref name="source" />.</typeparam>
            <typeparam name="TKey">The type of the key returned by
            <paramref name="keySelector" />.</typeparam>
            <typeparam name="TElement">The type of the elements in the
            resulting groupings.</typeparam>
            <param name="source">A sequence whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each
            element.</param>
            <param name="elementSelector">A function to map each source
            element to an element in the resulting grouping.</param>
            <returns>A sequence of groupings where each grouping
            (<see cref="T:System.Linq.IGrouping`2" />) contains the key
            and the adjacent elements (of type <typeparamref name="TElement" />)
            in the same order as found in the source sequence.</returns>
            <remarks>
            This method is implemented by using deferred execution and
            streams the groupings. The grouping elements, however, are
            buffered. Each grouping is therefore yielded as soon as it
            is complete and before the next grouping occurs.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.GroupAdjacentExtension.GroupAdjacent``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
            <summary>
            Groups the adjacent elements of a sequence according to a
            specified key selector function. The keys are compared by using
            a comparer and each group's elements are projected by using a
            specified function.
            </summary>
            <typeparam name="TSource">The type of the elements of
            <paramref name="source" />.</typeparam>
            <typeparam name="TKey">The type of the key returned by
            <paramref name="keySelector" />.</typeparam>
            <typeparam name="TResult">The type of the elements in the
            resulting sequence.</typeparam>
            <param name="source">A sequence whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each
            element.</param>
            <param name="resultSelector">A function to map each key and
            associated source elements to a result object.</param>
            <returns>A collection of elements of type
            <typeparamref name="TResult" /> where each element represents
            a projection over a group and its key.</returns>
            <remarks>
            This method is implemented by using deferred execution and
            streams the groupings. The grouping elements, however, are
            buffered. Each grouping is therefore yielded as soon as it
            is complete and before the next grouping occurs.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.GroupAdjacentExtension.GroupAdjacent``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the adjacent elements of a sequence according to a
            specified key selector function. The keys are compared by using
            a comparer and each group's elements are projected by using a
            specified function.
            </summary>
            <typeparam name="TSource">The type of the elements of
            <paramref name="source" />.</typeparam>
            <typeparam name="TKey">The type of the key returned by
            <paramref name="keySelector" />.</typeparam>
            <typeparam name="TElement">The type of the elements in the
            resulting groupings.</typeparam>
            <param name="source">A sequence whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each
            element.</param>
            <param name="elementSelector">A function to map each source
            element to an element in the resulting grouping.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to
            compare keys.</param>
            <returns>A sequence of groupings where each grouping
            (<see cref="T:System.Linq.IGrouping`2" />) contains the key
            and the adjacent elements (of type <typeparamref name="TElement" />)
            in the same order as found in the source sequence.</returns>
            <remarks>
            This method is implemented by using deferred execution and
            streams the groupings. The grouping elements, however, are
            buffered. Each grouping is therefore yielded as soon as it
            is complete and before the next grouping occurs.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.GroupAdjacentExtension.GroupAdjacent``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the adjacent elements of a sequence according to a
            specified key selector function. The keys are compared by using
            a comparer and each group's elements are projected by using a
            specified function.
            </summary>
            <typeparam name="TSource">The type of the elements of
            <paramref name="source" />.</typeparam>
            <typeparam name="TKey">The type of the key returned by
            <paramref name="keySelector" />.</typeparam>
            <typeparam name="TResult">The type of the elements in the
            resulting sequence.</typeparam>
            <param name="source">A sequence whose elements to group.</param>
            <param name="keySelector">A function to extract the key for each
            element.</param>
            <param name="resultSelector">A function to map each key and
            associated source elements to a result object.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to
            compare keys.</param>
            <returns>A collection of elements of type
            <typeparamref name="TResult" /> where each element represents
            a projection over a group and its key.</returns>
            <remarks>
            This method is implemented by using deferred execution and
            streams the groupings. The grouping elements, however, are
            buffered. Each grouping is therefore yielded as soon as it
            is complete and before the next grouping occurs.
            </remarks>
        </member>
        <member name="T:MoreLinq.Extensions.IndexExtension">
            <summary>
                <c>Index</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.IndexExtension.Index``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2" />
            where the key is the zero-based index of the value in the source
            sequence.
            </summary>
            <typeparam name="TSource">Type of elements in <paramref name="source" /> sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <returns>A sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2" />.</returns>
            <remarks>This operator uses deferred execution and streams its
            results.</remarks>
        </member>
        <member name="M:MoreLinq.Extensions.IndexExtension.Index``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns a sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2" />
            where the key is the index of the value in the source sequence.
            An additional parameter specifies the starting index.
            </summary>
            <typeparam name="TSource">Type of elements in <paramref name="source" /> sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="startIndex" />
            <returns>A sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2" />.</returns>
            <remarks>This operator uses deferred execution and streams its
            results.</remarks>
        </member>
        <member name="T:MoreLinq.Extensions.IndexByExtension">
            <summary>
                <c>IndexBy</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.IndexByExtension.IndexBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Applies a key-generating function to each element of a sequence and
            returns a sequence that contains the elements of the original
            sequence as well its key and index inside the group of its key.
            </summary>
            <typeparam name="TSource">Type of the source sequence elements.</typeparam>
            <typeparam name="TKey">Type of the projected key.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="keySelector">
            Function that projects the key given an element in the source sequence.</param>
            <returns>
            A sequence of elements paired with their index within the key-group.
            The index is the key and the element is the value of the pair.
            </returns>
        </member>
        <member name="M:MoreLinq.Extensions.IndexByExtension.IndexBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Applies a key-generating function to each element of a sequence and
            returns a sequence that contains the elements of the original
            sequence as well its key and index inside the group of its key.
            An additional parameter specifies a comparer to use for testing the
            equivalence of keys.
            </summary>
            <typeparam name="TSource">Type of the source sequence elements.</typeparam>
            <typeparam name="TKey">Type of the projected key.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="keySelector">
            Function that projects the key given an element in the source sequence.</param>
            <param name="comparer">
            The equality comparer to use to determine whether or not keys are
            equal. If <c>null</c>, the default equality comparer for
            <typeparamref name="TSource" /> is used.</param>
            <returns>
            A sequence of elements paired with their index within the key-group.
            The index is the key and the element is the value of the pair.
            </returns>
        </member>
        <member name="T:MoreLinq.Extensions.InsertExtension">
            <summary>
                <c>Insert</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.InsertExtension.Insert``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Inserts the elements of a sequence into another sequence at a
            specified index.
            </summary>
            <typeparam name="T">Type of the elements of the source sequence.</typeparam>
            <param name="first">The source sequence.</param>
            <param name="second">The sequence that will be inserted.</param>
            <param name="index">
            The zero-based index at which to insert elements from
            <paramref name="second" />.</param>
            <returns>
            A sequence that contains the elements of <paramref name="first" />
            plus the elements of <paramref name="second" /> inserted at
            the given index.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="first" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="second" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="index" /> is negative.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown lazily if <paramref name="index" /> is greater than the
            length of <paramref name="first" />. The validation occurs when
            yielding the next element after having iterated
            <paramref name="first" /> entirely.
            </exception>
        </member>
        <member name="T:MoreLinq.Extensions.InterleaveExtension">
            <summary>
                <c>Interleave</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.InterleaveExtension.Interleave``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Interleaves the elements of two or more sequences into a single sequence, skipping sequences as they are consumed
            </summary>
            <remarks>
            Interleave combines sequences by visiting each in turn, and returning the first element of each, followed
            by the second, then the third, and so on. So, for example:<br /><code><![CDATA[
            {1,1,1}.Interleave( {2,2,2}, {3,3,3} ) => { 1,2,3,1,2,3,1,2,3 }
            ]]></code>
            This operator behaves in a deferred and streaming manner.<br />
            When sequences are of unequal length, this method will skip those sequences that have been fully consumed
            and continue interleaving the remaining sequences.<br />
            The sequences are interleaved in the order that they appear in the <paramref name="otherSequences" />
            collection, with <paramref name="sequence" /> as the first sequence.
            </remarks>
            <typeparam name="T">The type of the elements of the source sequences</typeparam>
            <param name="sequence">The first sequence in the interleave group</param>
            <param name="otherSequences">The other sequences in the interleave group</param>
            <returns>A sequence of interleaved elements from all of the source sequences</returns>
        </member>
        <member name="T:MoreLinq.Extensions.LagExtension">
            <summary>
                <c>Lag</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.LagExtension.Lag``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,``0,``1})">
            <summary>
            Produces a projection of a sequence by evaluating pairs of elements separated by a negative offset.
            </summary>
            <remarks>
            This operator evaluates in a deferred and streaming manner.<br />
            For elements prior to the lag offset, <c>default(T)</c> is used as the lagged value.<br /></remarks>
            <typeparam name="TSource">The type of the elements of the source sequence</typeparam>
            <typeparam name="TResult">The type of the elements of the result sequence</typeparam>
            <param name="source">The sequence over which to evaluate lag</param>
            <param name="offset">The offset (expressed as a positive number) by which to lag each value of the sequence</param>
            <param name="resultSelector">A projection function which accepts the current and lagged items (in that order) and returns a result</param>
            <returns>A sequence produced by projecting each element of the sequence with its lagged pairing</returns>
        </member>
        <member name="M:MoreLinq.Extensions.LagExtension.Lag``2(System.Collections.Generic.IEnumerable{``0},System.Int32,``0,System.Func{``0,``0,``1})">
            <summary>
            Produces a projection of a sequence by evaluating pairs of elements separated by a negative offset.
            </summary>
            <remarks>
            This operator evaluates in a deferred and streaming manner.<br /></remarks>
            <typeparam name="TSource">The type of the elements of the source sequence</typeparam>
            <typeparam name="TResult">The type of the elements of the result sequence</typeparam>
            <param name="source">The sequence over which to evaluate lag</param>
            <param name="offset">The offset (expressed as a positive number) by which to lag each value of the sequence</param>
            <param name="defaultLagValue">A default value supplied for the lagged value prior to the lag offset</param>
            <param name="resultSelector">A projection function which accepts the current and lagged items (in that order) and returns a result</param>
            <returns>A sequence produced by projecting each element of the sequence with its lagged pairing</returns>
        </member>
        <member name="T:MoreLinq.Extensions.LastExtension">
            <summary>
                <c>Last</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.LastExtension.Last``1(MoreLinq.IExtremaEnumerable{``0})">
            <summary>
            Returns the last element of a sequence.
            </summary>
            <typeparam name="T">
            The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The input sequence.</param>
            <exception cref="T:System.InvalidOperationException">
            The input sequence is empty.</exception>
            <returns>
            The last element of the input sequence.
            </returns>
        </member>
        <member name="T:MoreLinq.Extensions.LastOrDefaultExtension">
            <summary>
                <c>LastOrDefault</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.LastOrDefaultExtension.LastOrDefault``1(MoreLinq.IExtremaEnumerable{``0})">
            <summary>
            Returns the last element of a sequence, or a default value if the
            sequence contains no elements.
            </summary>
            <typeparam name="T">
            The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The input sequence.</param>
            <returns>
            Default value of type <typeparamref name="T" /> if source is empty;
            otherwise, the last element in source.
            </returns>
        </member>
        <member name="T:MoreLinq.Extensions.LeadExtension">
            <summary>
                <c>Lead</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.LeadExtension.Lead``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,``0,``1})">
            <summary>
            Produces a projection of a sequence by evaluating pairs of elements separated by a positive offset.
            </summary>
            <remarks>
            This operator evaluates in a deferred and streaming manner.<br />
            For elements of the sequence that are less than <paramref name="offset" /> items from the end,
            default(T) is used as the lead value.<br /></remarks>
            <typeparam name="TSource">The type of the elements in the source sequence</typeparam>
            <typeparam name="TResult">The type of the elements in the result sequence</typeparam>
            <param name="source">The sequence over which to evaluate Lead</param>
            <param name="offset">The offset (expressed as a positive number) by which to lead each element of the sequence</param>
            <param name="resultSelector">A projection function which accepts the current and subsequent (lead) element (in that order) and produces a result</param>
            <returns>A sequence produced by projecting each element of the sequence with its lead pairing</returns>
        </member>
        <member name="M:MoreLinq.Extensions.LeadExtension.Lead``2(System.Collections.Generic.IEnumerable{``0},System.Int32,``0,System.Func{``0,``0,``1})">
            <summary>
            Produces a projection of a sequence by evaluating pairs of elements separated by a positive offset.
            </summary>
            <remarks>
            This operator evaluates in a deferred and streaming manner.<br /></remarks>
            <typeparam name="TSource">The type of the elements in the source sequence</typeparam>
            <typeparam name="TResult">The type of the elements in the result sequence</typeparam>
            <param name="source">The sequence over which to evaluate Lead</param>
            <param name="offset">The offset (expressed as a positive number) by which to lead each element of the sequence</param>
            <param name="defaultLeadValue">A default value supplied for the leading element when none is available</param>
            <param name="resultSelector">A projection function which accepts the current and subsequent (lead) element (in that order) and produces a result</param>
            <returns>A sequence produced by projecting each element of the sequence with its lead pairing</returns>
        </member>
        <member name="T:MoreLinq.Extensions.LeftJoinExtension">
            <summary>
                <c>LeftJoin</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.LeftJoinExtension.LeftJoin``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``0,``2})">
            <summary>
            Performs a left outer join on two homogeneous sequences.
            Additional arguments specify key selection functions and result
            projection functions.
            </summary>
            <typeparam name="TSource">
            The type of elements in the source sequence.</typeparam>
            <typeparam name="TKey">
            The type of the key returned by the key selector function.</typeparam>
            <typeparam name="TResult">
            The type of the result elements.</typeparam>
            <param name="first">
            The first sequence of the join operation.</param>
            <param name="second">
            The second sequence of the join operation.</param>
            <param name="keySelector">
            Function that projects the key given an element of one of the
            sequences to join.</param>
            <param name="firstSelector">
            Function that projects the result given just an element from
            <paramref name="first" /> where there is no corresponding element
            in <paramref name="second" />.</param>
            <param name="bothSelector">
            Function that projects the result given an element from
            <paramref name="first" /> and an element from <paramref name="second" />
            that match on a common key.</param>
            <returns>A sequence containing results projected from a left
            outer join of the two input sequences.</returns>
        </member>
        <member name="M:MoreLinq.Extensions.LeftJoinExtension.LeftJoin``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Performs a left outer join on two homogeneous sequences.
            Additional arguments specify key selection functions, result
            projection functions and a key comparer.
            </summary>
            <typeparam name="TSource">
            The type of elements in the source sequence.</typeparam>
            <typeparam name="TKey">
            The type of the key returned by the key selector function.</typeparam>
            <typeparam name="TResult">
            The type of the result elements.</typeparam>
            <param name="first">
            The first sequence of the join operation.</param>
            <param name="second">
            The second sequence of the join operation.</param>
            <param name="keySelector">
            Function that projects the key given an element of one of the
            sequences to join.</param>
            <param name="firstSelector">
            Function that projects the result given just an element from
            <paramref name="first" /> where there is no corresponding element
            in <paramref name="second" />.</param>
            <param name="bothSelector">
            Function that projects the result given an element from
            <paramref name="first" /> and an element from <paramref name="second" />
            that match on a common key.</param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> instance used to compare
            keys for equality.</param>
            <returns>A sequence containing results projected from a left
            outer join of the two input sequences.</returns>
        </member>
        <member name="M:MoreLinq.Extensions.LeftJoinExtension.LeftJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``3},System.Func{``0,``1,``3})">
            <summary>
            Performs a left outer join on two heterogeneous sequences.
            Additional arguments specify key selection functions and result
            projection functions.
            </summary>
            <typeparam name="TFirst">
            The type of elements in the first sequence.</typeparam>
            <typeparam name="TSecond">
            The type of elements in the second sequence.</typeparam>
            <typeparam name="TKey">
            The type of the key returned by the key selector functions.</typeparam>
            <typeparam name="TResult">
            The type of the result elements.</typeparam>
            <param name="first">
            The first sequence of the join operation.</param>
            <param name="second">
            The second sequence of the join operation.</param>
            <param name="firstKeySelector">
            Function that projects the key given an element from <paramref name="first" />.</param>
            <param name="secondKeySelector">
            Function that projects the key given an element from <paramref name="second" />.</param>
            <param name="firstSelector">
            Function that projects the result given just an element from
            <paramref name="first" /> where there is no corresponding element
            in <paramref name="second" />.</param>
            <param name="bothSelector">
            Function that projects the result given an element from
            <paramref name="first" /> and an element from <paramref name="second" />
            that match on a common key.</param>
            <returns>A sequence containing results projected from a left
            outer join of the two input sequences.</returns>
        </member>
        <member name="M:MoreLinq.Extensions.LeftJoinExtension.LeftJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``3},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Performs a left outer join on two heterogeneous sequences.
            Additional arguments specify key selection functions, result
            projection functions and a key comparer.
            </summary>
            <typeparam name="TFirst">
            The type of elements in the first sequence.</typeparam>
            <typeparam name="TSecond">
            The type of elements in the second sequence.</typeparam>
            <typeparam name="TKey">
            The type of the key returned by the key selector functions.</typeparam>
            <typeparam name="TResult">
            The type of the result elements.</typeparam>
            <param name="first">
            The first sequence of the join operation.</param>
            <param name="second">
            The second sequence of the join operation.</param>
            <param name="firstKeySelector">
            Function that projects the key given an element from <paramref name="first" />.</param>
            <param name="secondKeySelector">
            Function that projects the key given an element from <paramref name="second" />.</param>
            <param name="firstSelector">
            Function that projects the result given just an element from
            <paramref name="first" /> where there is no corresponding element
            in <paramref name="second" />.</param>
            <param name="bothSelector">
            Function that projects the result given an element from
            <paramref name="first" /> and an element from <paramref name="second" />
            that match on a common key.</param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> instance used to compare
            keys for equality.</param>
            <returns>A sequence containing results projected from a left
            outer join of the two input sequences.</returns>
        </member>
        <member name="T:MoreLinq.Extensions.MaxByExtension">
            <summary>
                <c>MaxBy</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.MaxByExtension.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the maximal elements of the given sequence, based on
            the given projection.
            </summary>
            <remarks>
            This overload uses the default comparer  for the projected type.
            This operator uses deferred execution. The results are evaluated
            and cached on first use to returned sequence.
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <typeparam name="TKey">Type of the projected element</typeparam>
            <param name="source">Source sequence</param>
            <param name="selector">Selector to use to pick the results to compare</param>
            <returns>The maximal element, according to the projection.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="selector" /> is null</exception>
        </member>
        <member name="M:MoreLinq.Extensions.MaxByExtension.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Returns the maximal elements of the given sequence, based on
            the given projection and the specified comparer for projected values.
            </summary>
            <remarks>
            This operator uses deferred execution. The results are evaluated
            and cached on first use to returned sequence.
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <typeparam name="TKey">Type of the projected element</typeparam>
            <param name="source">Source sequence</param>
            <param name="selector">Selector to use to pick the results to compare</param>
            <param name="comparer">Comparer to use to compare projected values</param>
            <returns>The maximal element, according to the projection.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" />, <paramref name="selector" />
            or <paramref name="comparer" /> is null</exception>
        </member>
        <member name="T:MoreLinq.Extensions.MinByExtension">
            <summary>
                <c>MinBy</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.MinByExtension.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the minimal elements of the given sequence, based on
            the given projection.
            </summary>
            <remarks>
            This overload uses the default comparer for the projected type.
            This operator uses deferred execution. The results are evaluated
            and cached on first use to returned sequence.
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <typeparam name="TKey">Type of the projected element</typeparam>
            <param name="source">Source sequence</param>
            <param name="selector">Selector to use to pick the results to compare</param>
            <returns>The minimal element, according to the projection.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="selector" /> is null</exception>
        </member>
        <member name="M:MoreLinq.Extensions.MinByExtension.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Returns the minimal elements of the given sequence, based on
            the given projection and the specified comparer for projected values.
            </summary>
            <remarks>
            This operator uses deferred execution. The results are evaluated
            and cached on first use to returned sequence.
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <typeparam name="TKey">Type of the projected element</typeparam>
            <param name="source">Source sequence</param>
            <param name="selector">Selector to use to pick the results to compare</param>
            <param name="comparer">Comparer to use to compare projected values</param>
            <returns>The minimal element, according to the projection.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" />, <paramref name="selector" />
            or <paramref name="comparer" /> is null</exception>
        </member>
        <member name="T:MoreLinq.Extensions.MoveExtension">
            <summary>
                <c>Move</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.MoveExtension.Move``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a sequence with a range of elements in the source sequence
            moved to a new offset.
            </summary>
            <typeparam name="T">Type of the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="fromIndex">
            The zero-based index identifying the first element in the range of
            elements to move.</param>
            <param name="count">The count of items to move.</param>
            <param name="toIndex">
            The index where the specified range will be moved.</param>
            <returns>
            A sequence with the specified range moved to the new position.
            </returns>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
            <example>
                <code><![CDATA[
            var result = Enumerable.Range(0, 6).Move(3, 2, 0);
            ]]></code>
            The <c>result</c> variable will contain <c>{ 3, 4, 0, 1, 2, 5 }</c>.
            </example>
        </member>
        <member name="T:MoreLinq.Extensions.OrderByExtension">
            <summary>
                <c>OrderBy</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.OrderByExtension.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},MoreLinq.OrderByDirection)">
            <summary>
            Sorts the elements of a sequence in a particular direction (ascending, descending) according to a key
            </summary>
            <typeparam name="T">The type of the elements in the source sequence</typeparam>
            <typeparam name="TKey">The type of the key used to order elements</typeparam>
            <param name="source">The sequence to order</param>
            <param name="keySelector">A key selector function</param>
            <param name="direction">A direction in which to order the elements (ascending, descending)</param>
            <returns>An ordered copy of the source sequence</returns>
        </member>
        <member name="M:MoreLinq.Extensions.OrderByExtension.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},MoreLinq.OrderByDirection)">
            <summary>
            Sorts the elements of a sequence in a particular direction (ascending, descending) according to a key
            </summary>
            <typeparam name="T">The type of the elements in the source sequence</typeparam>
            <typeparam name="TKey">The type of the key used to order elements</typeparam>
            <param name="source">The sequence to order</param>
            <param name="keySelector">A key selector function</param>
            <param name="direction">A direction in which to order the elements (ascending, descending)</param>
            <param name="comparer">A comparer used to define the semantics of element comparison</param>
            <returns>An ordered copy of the source sequence</returns>
        </member>
        <member name="T:MoreLinq.Extensions.OrderedMergeExtension">
            <summary>
                <c>OrderedMerge</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.OrderedMergeExtension.OrderedMerge``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Merges two ordered sequences into one. Where the elements equal
            in both sequences, the element from the first sequence is
            returned in the resulting sequence.
            </summary>
            <typeparam name="T">Type of elements in input and output sequences.</typeparam>
            <param name="first">The first input sequence.</param>
            <param name="second">The second input sequence.</param>
            <returns>
            A sequence with elements from the two input sequences merged, as
            in a full outer join.</returns>
            <remarks>
            This method uses deferred execution. The behavior is undefined
            if the sequences are unordered as inputs.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.OrderedMergeExtension.OrderedMerge``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Merges two ordered sequences into one with an additional
            parameter specifying how to compare the elements of the
            sequences. Where the elements equal in both sequences, the
            element from the first sequence is returned in the resulting
            sequence.
            </summary>
            <typeparam name="T">Type of elements in input and output sequences.</typeparam>
            <param name="first">The first input sequence.</param>
            <param name="second">The second input sequence.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare elements.</param>
            <returns>
            A sequence with elements from the two input sequences merged, as
            in a full outer join.</returns>
            <remarks>
            This method uses deferred execution. The behavior is undefined
            if the sequences are unordered as inputs.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.OrderedMergeExtension.OrderedMerge``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Merges two ordered sequences into one with an additional
            parameter specifying the element key by which the sequences are
            ordered. Where the keys equal in both sequences, the
            element from the first sequence is returned in the resulting
            sequence.
            </summary>
            <typeparam name="T">Type of elements in input and output sequences.</typeparam>
            <typeparam name="TKey">Type of keys used for merging.</typeparam>
            <param name="first">The first input sequence.</param>
            <param name="second">The second input sequence.</param>
            <param name="keySelector">Function to extract a key given an element.</param>
            <returns>
            A sequence with elements from the two input sequences merged
            according to a key, as in a full outer join.</returns>
            <remarks>
            This method uses deferred execution. The behavior is undefined
            if the sequences are unordered (by key) as inputs.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.OrderedMergeExtension.OrderedMerge``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``2},System.Func{``0,``0,``2})">
            <summary>
            Merges two ordered sequences into one. Additional parameters
            specify the element key by which the sequences are ordered,
            the result when element is found in first sequence but not in
            the second, the result when element is found in second sequence
            but not in the first and the result when elements are found in
            both sequences.
            </summary>
            <typeparam name="T">Type of elements in source sequences.</typeparam>
            <typeparam name="TKey">Type of keys used for merging.</typeparam>
            <typeparam name="TResult">Type of elements in the returned sequence.</typeparam>
            <param name="first">The first input sequence.</param>
            <param name="second">The second input sequence.</param>
            <param name="keySelector">Function to extract a key given an element.</param>
            <param name="firstSelector">Function to project the result element
            when only the first sequence yields a source element.</param>
            <param name="secondSelector">Function to project the result element
            when only the second sequence yields a source element.</param>
            <param name="bothSelector">Function to project the result element
            when only both sequences yield a source element whose keys are
            equal.</param>
            <returns>
            A sequence with projections from the two input sequences merged
            according to a key, as in a full outer join.</returns>
            <remarks>
            This method uses deferred execution. The behavior is undefined
            if the sequences are unordered (by key) as inputs.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.OrderedMergeExtension.OrderedMerge``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``2},System.Func{``0,``0,``2},System.Collections.Generic.IComparer{``1})">
            <summary>
            Merges two ordered sequences into one. Additional parameters
            specify the element key by which the sequences are ordered,
            the result when element is found in first sequence but not in
            the second, the result when element is found in second sequence
            but not in the first, the result when elements are found in
            both sequences and a method for comparing keys.
            </summary>
            <typeparam name="T">Type of elements in source sequences.</typeparam>
            <typeparam name="TKey">Type of keys used for merging.</typeparam>
            <typeparam name="TResult">Type of elements in the returned sequence.</typeparam>
            <param name="first">The first input sequence.</param>
            <param name="second">The second input sequence.</param>
            <param name="keySelector">Function to extract a key given an element.</param>
            <param name="firstSelector">Function to project the result element
            when only the first sequence yields a source element.</param>
            <param name="secondSelector">Function to project the result element
            when only the second sequence yields a source element.</param>
            <param name="bothSelector">Function to project the result element
            when only both sequences yield a source element whose keys are
            equal.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
            <returns>
            A sequence with projections from the two input sequences merged
            according to a key, as in a full outer join.</returns>
            <remarks>
            This method uses deferred execution. The behavior is undefined
            if the sequences are unordered (by key) as inputs.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.OrderedMergeExtension.OrderedMerge``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``3},System.Func{``1,``3},System.Func{``0,``1,``3})">
            <summary>
            Merges two heterogeneous sequences ordered by a common key type
            into a homogeneous one. Additional parameters specify the
            element key by which the sequences are ordered, the result when
            element is found in first sequence but not in the second and
            the result when element is found in second sequence but not in
            the first, the result when elements are found in both sequences.
            </summary>
            <typeparam name="TFirst">Type of elements in the first sequence.</typeparam>
            <typeparam name="TSecond">Type of elements in the second sequence.</typeparam>
            <typeparam name="TKey">Type of keys used for merging.</typeparam>
            <typeparam name="TResult">Type of elements in the returned sequence.</typeparam>
            <param name="first">The first input sequence.</param>
            <param name="second">The second input sequence.</param>
            <param name="firstKeySelector">Function to extract a key given an
            element from the first sequence.</param>
            <param name="secondKeySelector">Function to extract a key given an
            element from the second sequence.</param>
            <param name="firstSelector">Function to project the result element
            when only the first sequence yields a source element.</param>
            <param name="secondSelector">Function to project the result element
            when only the second sequence yields a source element.</param>
            <param name="bothSelector">Function to project the result element
            when only both sequences yield a source element whose keys are
            equal.</param>
            <returns>
            A sequence with projections from the two input sequences merged
            according to a key, as in a full outer join.</returns>
            <remarks>
            This method uses deferred execution. The behavior is undefined
            if the sequences are unordered (by key) as inputs.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.OrderedMergeExtension.OrderedMerge``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``3},System.Func{``1,``3},System.Func{``0,``1,``3},System.Collections.Generic.IComparer{``2})">
            <summary>
            Merges two heterogeneous sequences ordered by a common key type
            into a homogeneous one. Additional parameters specify the
            element key by which the sequences are ordered, the result when
            element is found in first sequence but not in the second,
            the result when element is found in second sequence but not in
            the first, the result when elements are found in both sequences
            and a method for comparing keys.
            </summary>
            <typeparam name="TFirst">Type of elements in the first sequence.</typeparam>
            <typeparam name="TSecond">Type of elements in the second sequence.</typeparam>
            <typeparam name="TKey">Type of keys used for merging.</typeparam>
            <typeparam name="TResult">Type of elements in the returned sequence.</typeparam>
            <param name="first">The first input sequence.</param>
            <param name="second">The second input sequence.</param>
            <param name="firstKeySelector">Function to extract a key given an
            element from the first sequence.</param>
            <param name="secondKeySelector">Function to extract a key given an
            element from the second sequence.</param>
            <param name="firstSelector">Function to project the result element
            when only the first sequence yields a source element.</param>
            <param name="secondSelector">Function to project the result element
            when only the second sequence yields a source element.</param>
            <param name="bothSelector">Function to project the result element
            when only both sequences yield a source element whose keys are
            equal.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
            <returns>
            A sequence with projections from the two input sequences merged
            according to a key, as in a full outer join.</returns>
            <remarks>
            This method uses deferred execution. The behavior is undefined
            if the sequences are unordered (by key) as inputs.
            </remarks>
        </member>
        <member name="T:MoreLinq.Extensions.PadExtension">
            <summary>
                <c>Pad</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.PadExtension.Pad``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Pads a sequence with default values if it is narrower (shorter
            in length) than a given width.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The sequence to pad.</param>
            <param name="width">The width/length below which to pad.</param>
            <returns>
            Returns a sequence that is at least as wide/long as the width/length
            specified by the <paramref name="width" /> parameter.
            </returns>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
            <example>
                <code><![CDATA[
            int[] numbers = { 123, 456, 789 };
            var result = numbers.Pad(5);
            ]]></code>
            The <c>result</c> variable, when iterated over, will yield
            123, 456, 789 and two zeroes, in turn.
            </example>
        </member>
        <member name="M:MoreLinq.Extensions.PadExtension.Pad``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)">
            <summary>
            Pads a sequence with a given filler value if it is narrower (shorter
            in length) than a given width.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The sequence to pad.</param>
            <param name="width">The width/length below which to pad.</param>
            <param name="padding">The value to use for padding.</param>
            <returns>
            Returns a sequence that is at least as wide/long as the width/length
            specified by the <paramref name="width" /> parameter.
            </returns>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
            <example>
                <code><![CDATA[
            int[] numbers = { 123, 456, 789 };
            var result = numbers.Pad(5, -1);
            ]]></code>
            The <c>result</c> variable, when iterated over, will yield
            123, 456, and 789 followed by two occurrences of -1, in turn.
            </example>
        </member>
        <member name="M:MoreLinq.Extensions.PadExtension.Pad``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Int32,``0})">
            <summary>
            Pads a sequence with a dynamic filler value if it is narrower (shorter
            in length) than a given width.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The sequence to pad.</param>
            <param name="width">The width/length below which to pad.</param>
            <param name="paddingSelector">Function to calculate padding.</param>
            <returns>
            Returns a sequence that is at least as wide/long as the width/length
            specified by the <paramref name="width" /> parameter.
            </returns>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
            <example>
                <code><![CDATA[
            int[] numbers = { 0, 1, 2 };
            var result = numbers.Pad(5, i => -i);
            ]]></code>
            The <c>result</c> variable, when iterated over, will yield
            0, 1, 2, -3 and -4, in turn.
            </example>
        </member>
        <member name="T:MoreLinq.Extensions.PadStartExtension">
            <summary>
                <c>PadStart</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.PadStartExtension.PadStart``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Pads a sequence with default values in the beginning if it is narrower (shorter
            in length) than a given width.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The sequence to pad.</param>
            <param name="width">The width/length below which to pad.</param>
            <returns>
            Returns a sequence that is at least as wide/long as the width/length
            specified by the <paramref name="width" /> parameter.
            </returns>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
            <example>
                <code><![CDATA[
            int[] numbers = { 123, 456, 789 };
            var result = numbers.PadStart(5);
            ]]></code>
            The <c>result</c> variable will contain <c>{ 0, 0, 123, 456, 789 }</c>.
            </example>
        </member>
        <member name="M:MoreLinq.Extensions.PadStartExtension.PadStart``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)">
            <summary>
            Pads a sequence with a given filler value in the beginning if it is narrower (shorter
            in length) than a given width.
            An additional parameter specifies the value to use for padding.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The sequence to pad.</param>
            <param name="width">The width/length below which to pad.</param>
            <param name="padding">The value to use for padding.</param>
            <returns>
            Returns a sequence that is at least as wide/long as the width/length
            specified by the <paramref name="width" /> parameter.
            </returns>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
            <example>
                <code><![CDATA[
            int[] numbers = { 123, 456, 789 };
            var result = numbers.PadStart(5, -1);
            ]]></code>
            The <c>result</c> variable will contain <c>{ -1, -1, 123, 456, 789 }</c>.
            </example>
        </member>
        <member name="M:MoreLinq.Extensions.PadStartExtension.PadStart``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Int32,``0})">
            <summary>
            Pads a sequence with a dynamic filler value in the beginning if it is narrower (shorter
            in length) than a given width.
            An additional parameter specifies the function to calculate padding.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The sequence to pad.</param>
            <param name="width">The width/length below which to pad.</param>
            <param name="paddingSelector">
            Function to calculate padding given the index of the missing element.
            </param>
            <returns>
            Returns a sequence that is at least as wide/long as the width/length
            specified by the <paramref name="width" /> parameter.
            </returns>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
            <example>
                <code><![CDATA[
            int[] numbers = { 123, 456, 789 };
            var result = numbers.PadStart(6, i => -i);
            ]]></code>
            The <c>result</c> variable will contain <c>{ 0, -1, -2, 123, 456, 789 }</c>.
            </example>
        </member>
        <member name="T:MoreLinq.Extensions.PairwiseExtension">
            <summary>
                <c>Pairwise</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.PairwiseExtension.Pairwise``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``1})">
            <summary>
            Returns a sequence resulting from applying a function to each
            element in the source sequence and its
            predecessor, with the exception of the first element which is
            only returned as the predecessor of the second element.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <typeparam name="TResult">The type of the element of the returned sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="resultSelector">A transform function to apply to
            each pair of sequence.</param>
            <returns>
            Returns the resulting sequence.
            </returns>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
            <example>
                <code><![CDATA[
            var source = new[] { "a", "b", "c", "d" };
            var result = source.Pairwise((a, b) => a + b);
            ]]></code>
            The <c>result</c> variable, when iterated over, will yield
            "ab", "bc" and "cd", in turn.
            </example>
        </member>
        <member name="T:MoreLinq.Extensions.PartialSortExtension">
            <summary>
                <c>PartialSort</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.PartialSortExtension.PartialSort``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Combines <see cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />,
            where each element is its key, and <see cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
            in a single operation.
            </summary>
            <typeparam name="T">Type of elements in the sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="count">Number of (maximum) elements to return.</param>
            <returns>A sequence containing at most top <paramref name="count" />
            elements from source, in their ascending order.</returns>
            <remarks>
            This operator uses deferred execution and streams it results.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.PartialSortExtension.PartialSort``1(System.Collections.Generic.IEnumerable{``0},System.Int32,MoreLinq.OrderByDirection)">
            <summary>
            Combines <see cref="M:MoreLinq.MoreEnumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},MoreLinq.OrderByDirection)" />,
            where each element is its key, and <see cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
            in a single operation.
            An additional parameter specifies the direction of the sort
            </summary>
            <typeparam name="T">Type of elements in the sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="count">Number of (maximum) elements to return.</param>
            <param name="direction">The direction in which to sort the elements</param>
            <returns>A sequence containing at most top <paramref name="count" />
            elements from source, in the specified order.</returns>
            <remarks>
            This operator uses deferred execution and streams it results.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.PartialSortExtension.PartialSort``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
            Combines <see cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />,
            where each element is its key, and <see cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
            in a single operation. An additional parameter specifies how the
            elements compare to each other.
            </summary>
            <typeparam name="T">Type of elements in the sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="count">Number of (maximum) elements to return.</param>
            <param name="comparer">A <see cref="T:System.Collections.Generic.IComparer`1" /> to compare elements.</param>
            <returns>A sequence containing at most top <paramref name="count" />
            elements from source, in their ascending order.</returns>
            <remarks>
            This operator uses deferred execution and streams it results.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.PartialSortExtension.PartialSort``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IComparer{``0},MoreLinq.OrderByDirection)">
            <summary>
            Combines <see cref="M:MoreLinq.MoreEnumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},MoreLinq.OrderByDirection)" />,
            where each element is its key, and <see cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
            in a single operation.
            Additional parameters specify how the elements compare to each other and
            the direction of the sort.
            </summary>
            <typeparam name="T">Type of elements in the sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="count">Number of (maximum) elements to return.</param>
            <param name="comparer">A <see cref="T:System.Collections.Generic.IComparer`1" /> to compare elements.</param>
            <param name="direction">The direction in which to sort the elements</param>
            <returns>A sequence containing at most top <paramref name="count" />
            elements from source, in the specified order.</returns>
            <remarks>
            This operator uses deferred execution and streams it results.
            </remarks>
        </member>
        <member name="T:MoreLinq.Extensions.PartialSortByExtension">
            <summary>
                <c>PartialSortBy</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.PartialSortByExtension.PartialSortBy``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,``1})">
            <summary>
            Combines <see cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />,
            and <see cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" /> in a single operation.
            </summary>
            <typeparam name="TSource">Type of elements in the sequence.</typeparam>
            <typeparam name="TKey">Type of keys.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="count">Number of (maximum) elements to return.</param>
            <returns>A sequence containing at most top <paramref name="count" />
            elements from source, in ascending order of their keys.</returns>
            <remarks>
            This operator uses deferred execution and streams it results.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.PartialSortByExtension.PartialSortBy``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,``1},MoreLinq.OrderByDirection)">
            <summary>
            Combines <see cref="M:MoreLinq.MoreEnumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},MoreLinq.OrderByDirection)" />,
            and <see cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" /> in a single operation.
            An additional parameter specifies the direction of the sort
            </summary>
            <typeparam name="TSource">Type of elements in the sequence.</typeparam>
            <typeparam name="TKey">Type of keys.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="count">Number of (maximum) elements to return.</param>
            <param name="direction">The direction in which to sort the elements</param>
            <returns>A sequence containing at most top <paramref name="count" />
            elements from source, in the specified order of their keys.</returns>
            <remarks>
            This operator uses deferred execution and streams it results.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.PartialSortByExtension.PartialSortBy``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Combines <see cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />,
            and <see cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" /> in a single operation.
            An additional parameter specifies how the keys compare to each other.
            </summary>
            <typeparam name="TSource">Type of elements in the sequence.</typeparam>
            <typeparam name="TKey">Type of keys.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="count">Number of (maximum) elements to return.</param>
            <param name="comparer">A <see cref="T:System.Collections.Generic.IComparer`1" /> to compare elements.</param>
            <returns>A sequence containing at most top <paramref name="count" />
            elements from source, in ascending order of their keys.</returns>
            <remarks>
            This operator uses deferred execution and streams it results.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.PartialSortByExtension.PartialSortBy``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,``1},System.Collections.Generic.IComparer{``1},MoreLinq.OrderByDirection)">
            <summary>
            Combines <see cref="M:MoreLinq.MoreEnumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},MoreLinq.OrderByDirection)" />,
            and <see cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" /> in a single operation.
            Additional parameters specify how the elements compare to each other and
            the direction of the sort.
            </summary>
            <typeparam name="TSource">Type of elements in the sequence.</typeparam>
            <typeparam name="TKey">Type of keys.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <param name="count">Number of (maximum) elements to return.</param>
            <param name="comparer">A <see cref="T:System.Collections.Generic.IComparer`1" /> to compare elements.</param>
            <param name="direction">The direction in which to sort the elements</param>
            <returns>A sequence containing at most top <paramref name="count" />
            elements from source, in the specified order of their keys.</returns>
            <remarks>
            This operator uses deferred execution and streams it results.
            </remarks>
        </member>
        <member name="T:MoreLinq.Extensions.PartitionExtension">
            <summary>
                <c>Partition</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.PartitionExtension.Partition``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Partitions or splits a sequence in two using a predicate.
            </summary>
            <param name="source">The source sequence.</param>
            <param name="predicate">The predicate function.</param>
            <typeparam name="T">Type of source elements.</typeparam>
            <returns>
            A tuple of elements staisfying the predicate and those that do not,
            respectively.
            </returns>
            <example>
                <code><![CDATA[
            var (evens, odds) =
                Enumerable.Range(0, 10).Partition(x => x % 2 == 0);
            ]]></code>
            The <c>evens</c> variable, when iterated over, will yield 0, 2, 4, 6
            and then 8. The <c>odds</c> variable, when iterated over, will yield
            1, 3, 5, 7 and then 9.
            </example>
        </member>
        <member name="M:MoreLinq.Extensions.PartitionExtension.Partition``2(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{System.Boolean,``0}},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            Partitions a grouping by Boolean keys into a projection of true
            elements and false elements, respectively.
            </summary>
            <typeparam name="T">Type of elements in source groupings.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="resultSelector">
            Function that projects the result from sequences of true elements
            and false elements, respectively, passed as arguments.
            </param>
            <returns>
            The return value from <paramref name="resultSelector" />.
            </returns>
        </member>
        <member name="M:MoreLinq.Extensions.PartitionExtension.Partition``2(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{System.Nullable{System.Boolean},``0}},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            Partitions a grouping by nullable Boolean keys into a projection of
            true elements, false elements and null elements, respectively.
            </summary>
            <typeparam name="T">Type of elements in source groupings.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="resultSelector">
            Function that projects the result from sequences of true elements,
            false elements and null elements, respectively, passed as
            arguments.
            </param>
            <returns>
            The return value from <paramref name="resultSelector" />.
            </returns>
        </member>
        <member name="M:MoreLinq.Extensions.PartitionExtension.Partition``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            Partitions or splits a sequence in two using a predicate and then
            projects a result from the two.
            </summary>
            <param name="source">The source sequence.</param>
            <param name="predicate">The predicate function.</param>
            <param name="resultSelector">
            Function that projects the result from sequences of elements that
            satisfy the predicate and those that do not, respectively, passed as
            arguments.
            </param>
            <typeparam name="T">Type of source elements.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <returns>
            The return value from <paramref name="resultSelector" />.
            </returns>
            <example>
                <code><![CDATA[
            var (evens, odds) =
                Enumerable.Range(0, 10)
                          .Partition(x => x % 2 == 0, ValueTuple.Create);
            ]]></code>
            The <c>evens</c> variable, when iterated over, will yield 0, 2, 4, 6
            and then 8. The <c>odds</c> variable, when iterated over, will yield
            1, 3, 5, 7 and then 9.
            </example>
        </member>
        <member name="M:MoreLinq.Extensions.PartitionExtension.Partition``3(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``0,System.Func{System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``2})">
            <summary>
            Partitions a grouping and projects a result from group elements
            matching a key and those groups that do not.
            </summary>
            <typeparam name="TKey">Type of keys in source groupings.</typeparam>
            <typeparam name="TElement">Type of elements in source groupings.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="key">The key to partition.</param>
            <param name="resultSelector">
            Function that projects the result from sequences of elements
            matching <paramref name="key" /> and those groups that do not (in
            the order in which they appear in <paramref name="source" />),
            passed as arguments.
            </param>
            <returns>
            The return value from <paramref name="resultSelector" />.
            </returns>
        </member>
        <member name="M:MoreLinq.Extensions.PartitionExtension.Partition``3(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``0,``0,System.Func{System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``2})">
            <summary>
            Partitions a grouping and projects a result from elements of
            groups matching a set of two keys and those groups that do not.
            </summary>
            <typeparam name="TKey">Type of keys in source groupings.</typeparam>
            <typeparam name="TElement">Type of elements in source groupings.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="key1">The first key to partition on.</param>
            <param name="key2">The second key to partition on.</param>
            <param name="resultSelector">
            Function that projects the result from elements of the group
            matching <paramref name="key1" />, elements of the group matching
            <paramref name="key2" /> and those groups that do not (in the order
            in which they appear in <paramref name="source" />), passed as
            arguments.
            </param>
            <returns>
            The return value from <paramref name="resultSelector" />.
            </returns>
        </member>
        <member name="M:MoreLinq.Extensions.PartitionExtension.Partition``3(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``0,System.Collections.Generic.IEqualityComparer{``0},System.Func{System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``2})">
            <summary>
            Partitions a grouping and projects a result from group elements
            matching a key and those groups that do not. An additional parameter
            specifies how to compare keys for equality.
            </summary>
            <typeparam name="TKey">Type of keys in source groupings.</typeparam>
            <typeparam name="TElement">Type of elements in source groupings.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="key">The key to partition on.</param>
            <param name="comparer">The comparer for keys.</param>
            <param name="resultSelector">
            Function that projects the result from elements of the group
            matching <paramref name="key" /> and those groups that do not (in
            the order in which they appear in <paramref name="source" />),
            passed as arguments.
            </param>
            <returns>
            The return value from <paramref name="resultSelector" />.
            </returns>
        </member>
        <member name="M:MoreLinq.Extensions.PartitionExtension.Partition``3(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``0,``0,``0,System.Func{System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``2})">
            <summary>
            Partitions a grouping and projects a result from elements groups
            matching a set of three keys and those groups that do not.
            </summary>
            <typeparam name="TKey">Type of keys in source groupings.</typeparam>
            <typeparam name="TElement">Type of elements in source groupings.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="key1">The first key to partition on.</param>
            <param name="key2">The second key to partition on.</param>
            <param name="key3">The third key to partition on.</param>
            <param name="resultSelector">
            Function that projects the result from elements of groups
            matching <paramref name="key1" />, <paramref name="key2" /> and
            <paramref name="key3" /> and those groups that do not (in the order
            in which they appear in <paramref name="source" />), passed as
            arguments.
            </param>
            <returns>
            The return value from <paramref name="resultSelector" />.
            </returns>
        </member>
        <member name="M:MoreLinq.Extensions.PartitionExtension.Partition``3(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.Func{System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``2})">
            <summary>
            Partitions a grouping and projects a result from elements of
            groups matching a set of two keys and those groups that do not.
            An additional parameter specifies how to compare keys for equality.
            </summary>
            <typeparam name="TKey">Type of keys in source groupings.</typeparam>
            <typeparam name="TElement">Type of elements in source groupings.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="key1">The first key to partition on.</param>
            <param name="key2">The second key to partition on.</param>
            <param name="comparer">The comparer for keys.</param>
            <param name="resultSelector">
            Function that projects the result from elements of the group
            matching <paramref name="key1" />, elements of the group matching
            <paramref name="key2" /> and those groups that do not (in the order
            in which they appear in <paramref name="source" />), passed as
            arguments.
            </param>
            <returns>
            The return value from <paramref name="resultSelector" />.
            </returns>
        </member>
        <member name="M:MoreLinq.Extensions.PartitionExtension.Partition``3(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``0,``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.Func{System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},``2})">
            <summary>
            Partitions a grouping and projects a result from elements groups
            matching a set of three keys and those groups that do not. An
            additional parameter specifies how to compare keys for equality.
            </summary>
            <typeparam name="TKey">Type of keys in source groupings.</typeparam>
            <typeparam name="TElement">Type of elements in source groupings.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="key1">The first key to partition on.</param>
            <param name="key2">The second key to partition on.</param>
            <param name="key3">The third key to partition on.</param>
            <param name="comparer">The comparer for keys.</param>
            <param name="resultSelector">
            Function that projects the result from elements of groups
            matching <paramref name="key1" />, <paramref name="key2" /> and
            <paramref name="key3" /> and those groups that do not (in
            the order in which they appear in <paramref name="source" />),
            passed as arguments.
            </param>
            <returns>
            The return value from <paramref name="resultSelector" />.
            </returns>
        </member>
        <member name="T:MoreLinq.Extensions.PermutationsExtension">
            <summary>
                <c>Permutations</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.PermutationsExtension.Permutations``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Generates a sequence of lists that represent the permutations of the original sequence.
            </summary>
            <remarks>
            A permutation is a unique re-ordering of the elements of the sequence.<br />
            This operator returns permutations in a deferred, streaming fashion; however, each
            permutation is materialized into a new list. There are N! permutations of a sequence,
            where N =&gt; sequence.Count().<br />
            Be aware that the original sequence is considered one of the permutations and will be
            returned as one of the results.
            </remarks>
            <typeparam name="T">The type of the elements in the sequence</typeparam>
            <param name="sequence">The original sequence to permute</param>
            <returns>A sequence of lists representing permutations of the original sequence</returns>
        </member>
        <member name="T:MoreLinq.Extensions.PipeExtension">
            <summary>
                <c>Pipe</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.PipeExtension.Pipe``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes the given action on each element in the source sequence
            and yields it.
            </summary>
            <typeparam name="T">The type of the elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="action">The action to execute on each element</param>
            <returns>A sequence with source elements in their original order.</returns>
            <remarks>
            The returned sequence is essentially a duplicate of
            the original, but with the extra action being executed while the
            sequence is evaluated. The action is always taken before the element
            is yielded, so any changes made by the action will be visible in the
            returned sequence. This operator uses deferred execution and streams it results.
            </remarks>
        </member>
        <member name="T:MoreLinq.Extensions.PrependExtension">
            <summary>
                <c>Prepend</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.PrependExtension.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Prepends a single value to a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The sequence to prepend to.</param>
            <param name="value">The value to prepend.</param>
            <returns>
            Returns a sequence where a value is prepended to it.
            </returns>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
            <code><![CDATA[
            int[] numbers = { 1, 2, 3 };
            var result = numbers.Prepend(0);
            ]]></code>
            The <c>result</c> variable, when iterated over, will yield
            0, 1, 2 and 3, in turn.
        </member>
        <member name="T:MoreLinq.Extensions.PreScanExtension">
            <summary>
                <c>PreScan</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.PreScanExtension.PreScan``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0},``0)">
            <summary>
            Performs a pre-scan (exclusive prefix sum) on a sequence of elements.
            </summary>
            <remarks>
            An exclusive prefix sum returns an equal-length sequence where the
            N-th element is the sum of the first N-1 input elements (the first
            element is a special case, it is set to the identity). More
            generally, the pre-scan allows any commutative binary operation,
            not just a sum.
            The inclusive version of PreScan is <see cref="M:MoreLinq.MoreEnumerable.Scan``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" />.
            This operator uses deferred execution and streams its result.
            </remarks>
            <example>
                <code><![CDATA[
            int[] values = { 1, 2, 3, 4 };
            var prescan = values.PreScan((a, b) => a + b, 0);
            var scan = values.Scan((a, b) => a + b);
            var result = values.EquiZip(prescan, ValueTuple.Create);
            ]]></code>
                <c>prescan</c> will yield <c>{ 0, 1, 3, 6 }</c>, while <c>scan</c>
            and <c>result</c> will both yield <c>{ 1, 3, 6, 10 }</c>. This
            shows the relationship between the inclusive and exclusive prefix sum.
            </example>
            <typeparam name="TSource">Type of elements in source sequence</typeparam>
            <param name="source">Source sequence</param>
            <param name="transformation">Transformation operation</param>
            <param name="identity">Identity element (see remarks)</param>
            <returns>The scanned sequence</returns>
        </member>
        <member name="T:MoreLinq.Extensions.RandomSubsetExtension">
            <summary>
                <c>RandomSubset</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.RandomSubsetExtension.RandomSubset``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns a sequence of a specified size of random elements from the
            original sequence.
            </summary>
            <typeparam name="T">The type of source sequence elements.</typeparam>
            <param name="source">
            The sequence from which to return random elements.</param>
            <param name="subsetSize">The size of the random subset to return.</param>
            <returns>
            A random sequence of elements in random order from the original
            sequence.</returns>
        </member>
        <member name="M:MoreLinq.Extensions.RandomSubsetExtension.RandomSubset``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Random)">
            <summary>
            Returns a sequence of a specified size of random elements from the
            original sequence. An additional parameter specifies a random
            generator to be used for the random selection algorithm.
            </summary>
            <typeparam name="T">The type of source sequence elements.</typeparam>
            <param name="source">
            The sequence from which to return random elements.</param>
            <param name="subsetSize">The size of the random subset to return.</param>
            <param name="rand">
            A random generator used as part of the selection algorithm.</param>
            <returns>
            A random sequence of elements in random order from the original
            sequence.</returns>
        </member>
        <member name="T:MoreLinq.Extensions.RankExtension">
            <summary>
                <c>Rank</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.RankExtension.Rank``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Ranks each item in the sequence in descending ordering using a default comparer.
            </summary>
            <typeparam name="TSource">Type of item in the sequence</typeparam>
            <param name="source">The sequence whose items will be ranked</param>
            <returns>A sequence of position integers representing the ranks of the corresponding items in the sequence</returns>
        </member>
        <member name="M:MoreLinq.Extensions.RankExtension.Rank``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Rank each item in the sequence using a caller-supplied comparer.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence</typeparam>
            <param name="source">The sequence of items to rank</param>
            <param name="comparer">A object that defines comparison semantics for the elements in the sequence</param>
            <returns>A sequence of position integers representing the ranks of the corresponding items in the sequence</returns>
        </member>
        <member name="T:MoreLinq.Extensions.RankByExtension">
            <summary>
                <c>RankBy</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.RankByExtension.RankBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Ranks each item in the sequence in descending ordering by a specified key using a default comparer
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence</typeparam>
            <typeparam name="TKey">The type of the key used to rank items in the sequence</typeparam>
            <param name="source">The sequence of items to rank</param>
            <param name="keySelector">A key selector function which returns the value by which to rank items in the sequence</param>
            <returns>A sequence of position integers representing the ranks of the corresponding items in the sequence</returns>
        </member>
        <member name="M:MoreLinq.Extensions.RankByExtension.RankBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Ranks each item in a sequence using a specified key and a caller-supplied comparer
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence</typeparam>
            <typeparam name="TKey">The type of the key used to rank items in the sequence</typeparam>
            <param name="source">The sequence of items to rank</param>
            <param name="keySelector">A key selector function which returns the value by which to rank items in the sequence</param>
            <param name="comparer">An object that defines the comparison semantics for keys used to rank items</param>
            <returns>A sequence of position integers representing the ranks of the corresponding items in the sequence</returns>
        </member>
        <member name="T:MoreLinq.Extensions.RepeatExtension">
            <summary>
                <c>Repeat</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.RepeatExtension.Repeat``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Repeats the sequence forever.
            </summary>
            <typeparam name="T">Type of elements in sequence</typeparam>
            <param name="sequence">The sequence to repeat</param>
            <returns>A sequence produced from the infinite repetition of the original source sequence</returns>
        </member>
        <member name="M:MoreLinq.Extensions.RepeatExtension.Repeat``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Repeats the sequence the specified number of times.
            </summary>
            <typeparam name="T">Type of elements in sequence</typeparam>
            <param name="sequence">The sequence to repeat</param>
            <param name="count">Number of times to repeat the sequence</param>
            <returns>A sequence produced from the repetition of the original source sequence</returns>
        </member>
        <member name="T:MoreLinq.Extensions.RightJoinExtension">
            <summary>
                <c>RightJoin</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.RightJoinExtension.RightJoin``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``0,``2})">
            <summary>
            Performs a right outer join on two homogeneous sequences.
            Additional arguments specify key selection functions and result
            projection functions.
            </summary>
            <typeparam name="TSource">
            The type of elements in the source sequence.</typeparam>
            <typeparam name="TKey">
            The type of the key returned by the key selector function.</typeparam>
            <typeparam name="TResult">
            The type of the result elements.</typeparam>
            <param name="first">
            The first sequence of the join operation.</param>
            <param name="second">
            The second sequence of the join operation.</param>
            <param name="keySelector">
            Function that projects the key given an element of one of the
            sequences to join.</param>
            <param name="secondSelector">
            Function that projects the result given just an element from
            <paramref name="second" /> where there is no corresponding element
            in <paramref name="first" />.</param>
            <param name="bothSelector">
            Function that projects the result given an element from
            <paramref name="first" /> and an element from <paramref name="second" />
            that match on a common key.</param>
            <returns>A sequence containing results projected from a right
            outer join of the two input sequences.</returns>
        </member>
        <member name="M:MoreLinq.Extensions.RightJoinExtension.RightJoin``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Performs a right outer join on two homogeneous sequences.
            Additional arguments specify key selection functions, result
            projection functions and a key comparer.
            </summary>
            <typeparam name="TSource">
            The type of elements in the source sequence.</typeparam>
            <typeparam name="TKey">
            The type of the key returned by the key selector function.</typeparam>
            <typeparam name="TResult">
            The type of the result elements.</typeparam>
            <param name="first">
            The first sequence of the join operation.</param>
            <param name="second">
            The second sequence of the join operation.</param>
            <param name="keySelector">
            Function that projects the key given an element of one of the
            sequences to join.</param>
            <param name="secondSelector">
            Function that projects the result given just an element from
            <paramref name="second" /> where there is no corresponding element
            in <paramref name="first" />.</param>
            <param name="bothSelector">
            Function that projects the result given an element from
            <paramref name="first" /> and an element from <paramref name="second" />
            that match on a common key.</param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> instance used to compare
            keys for equality.</param>
            <returns>A sequence containing results projected from a right
            outer join of the two input sequences.</returns>
        </member>
        <member name="M:MoreLinq.Extensions.RightJoinExtension.RightJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``1,``3},System.Func{``0,``1,``3})">
            <summary>
            Performs a right outer join on two heterogeneous sequences.
            Additional arguments specify key selection functions and result
            projection functions.
            </summary>
            <typeparam name="TFirst">
            The type of elements in the first sequence.</typeparam>
            <typeparam name="TSecond">
            The type of elements in the second sequence.</typeparam>
            <typeparam name="TKey">
            The type of the key returned by the key selector functions.</typeparam>
            <typeparam name="TResult">
            The type of the result elements.</typeparam>
            <param name="first">
            The first sequence of the join operation.</param>
            <param name="second">
            The second sequence of the join operation.</param>
            <param name="firstKeySelector">
            Function that projects the key given an element from <paramref name="first" />.</param>
            <param name="secondKeySelector">
            Function that projects the key given an element from <paramref name="second" />.</param>
            <param name="secondSelector">
            Function that projects the result given just an element from
            <paramref name="second" /> where there is no corresponding element
            in <paramref name="first" />.</param>
            <param name="bothSelector">
            Function that projects the result given an element from
            <paramref name="first" /> and an element from <paramref name="second" />
            that match on a common key.</param>
            <returns>A sequence containing results projected from a right
            outer join of the two input sequences.</returns>
        </member>
        <member name="M:MoreLinq.Extensions.RightJoinExtension.RightJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``1,``3},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Performs a right outer join on two heterogeneous sequences.
            Additional arguments specify key selection functions, result
            projection functions and a key comparer.
            </summary>
            <typeparam name="TFirst">
            The type of elements in the first sequence.</typeparam>
            <typeparam name="TSecond">
            The type of elements in the second sequence.</typeparam>
            <typeparam name="TKey">
            The type of the key returned by the key selector functions.</typeparam>
            <typeparam name="TResult">
            The type of the result elements.</typeparam>
            <param name="first">
            The first sequence of the join operation.</param>
            <param name="second">
            The second sequence of the join operation.</param>
            <param name="firstKeySelector">
            Function that projects the key given an element from <paramref name="first" />.</param>
            <param name="secondKeySelector">
            Function that projects the key given an element from <paramref name="second" />.</param>
            <param name="secondSelector">
            Function that projects the result given just an element from
            <paramref name="second" /> where there is no corresponding element
            in <paramref name="first" />.</param>
            <param name="bothSelector">
            Function that projects the result given an element from
            <paramref name="first" /> and an element from <paramref name="second" />
            that match on a common key.</param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> instance used to compare
            keys for equality.</param>
            <returns>A sequence containing results projected from a right
            outer join of the two input sequences.</returns>
        </member>
        <member name="T:MoreLinq.Extensions.RunLengthEncodeExtension">
            <summary>
                <c>RunLengthEncode</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.RunLengthEncodeExtension.RunLengthEncode``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Run-length encodes a sequence by converting consecutive instances of the same element into
            a <c>KeyValuePair{T,int}</c> representing the item and its occurrence count.
            </summary>
            <typeparam name="T">The type of the elements in the sequence</typeparam>
            <param name="sequence">The sequence to run length encode</param>
            <returns>A sequence of <c>KeyValuePair{T,int}</c> where the key is the element and the value is the occurrence count</returns>
        </member>
        <member name="M:MoreLinq.Extensions.RunLengthEncodeExtension.RunLengthEncode``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Run-length encodes a sequence by converting consecutive instances of the same element into
            a <c>KeyValuePair{T,int}</c> representing the item and its occurrence count. This overload
            uses a custom equality comparer to identify equivalent items.
            </summary>
            <typeparam name="T">The type of the elements in the sequence</typeparam>
            <param name="sequence">The sequence to run length encode</param>
            <param name="comparer">The comparer used to identify equivalent items</param>
            <returns>A sequence of <c>KeyValuePair{T,int}</c> where they key is the element and the value is the occurrence count</returns>
        </member>
        <member name="T:MoreLinq.Extensions.ScanExtension">
            <summary>
                <c>Scan</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.ScanExtension.Scan``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
            <summary>
            Performs a scan (inclusive prefix sum) on a sequence of elements.
            </summary>
            <remarks>
            An inclusive prefix sum returns an equal-length sequence where the
            N-th element is the sum of the first N input elements. More
            generally, the scan allows any commutative binary operation, not
            just a sum.
            The exclusive version of Scan is <see cref="M:MoreLinq.MoreEnumerable.PreScan``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0},``0)" />.
            This operator uses deferred execution and streams its result.
            </remarks>
            <example>
                <code><![CDATA[
            int[] values = { 1, 2, 3, 4 };
            var prescan = values.PreScan((a, b) => a + b, 0);
            var scan = values.Scan((a, b) => a + b);
            var result = values.EquiZip(scan, ValueTuple.Create);
            ]]></code>
                <c>prescan</c> will yield <c>{ 0, 1, 3, 6 }</c>, while <c>scan</c>
            and <c>result</c> will both yield <c>{ 1, 3, 6, 10 }</c>. This
            shows the relationship between the inclusive and exclusive prefix sum.
            </example>
            <typeparam name="TSource">Type of elements in source sequence</typeparam>
            <param name="source">Source sequence</param>
            <param name="transformation">Transformation operation</param>
            <returns>The scanned sequence</returns>
        </member>
        <member name="M:MoreLinq.Extensions.ScanExtension.Scan``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            Like <see cref="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" /> except returns
            the sequence of intermediate results as well as the final one.
            An additional parameter specifies a seed.
            </summary>
            <remarks>
            This operator uses deferred execution and streams its result.
            </remarks>
            <example>
                <code><![CDATA[
            var result = Enumerable.Range(1, 5).Scan(0, (a, b) => a + b);
            ]]></code>
            When iterated, <c>result</c> will yield <c>{ 0, 1, 3, 6, 10, 15 }</c>.
            </example>
            <typeparam name="TSource">Type of elements in source sequence</typeparam>
            <typeparam name="TState">Type of state</typeparam>
            <param name="source">Source sequence</param>
            <param name="seed">Initial state to seed</param>
            <param name="transformation">Transformation operation</param>
            <returns>The scanned sequence</returns>
        </member>
        <member name="T:MoreLinq.Extensions.ScanByExtension">
            <summary>
                <c>ScanBy</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.ScanByExtension.ScanBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``1,``0,``2})">
            <summary>
            Applies an accumulator function over sequence element keys,
            returning the keys along with intermediate accumulator states.
            </summary>
            <typeparam name="TSource">Type of the elements of the source sequence.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TState">Type of the state.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="keySelector">
            A function that returns the key given an element.</param>
            <param name="seedSelector">
            A function to determine the initial value for the accumulator that is
            invoked once per key encountered.</param>
            <param name="accumulator">
            An accumulator function invoked for each element.</param>
            <returns>
            A sequence of keys paired with intermediate accumulator states.
            </returns>
        </member>
        <member name="M:MoreLinq.Extensions.ScanByExtension.ScanBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``1,``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Applies an accumulator function over sequence element keys,
            returning the keys along with intermediate accumulator states. An
            additional parameter specifies the comparer to use to compare keys.
            </summary>
            <typeparam name="TSource">Type of the elements of the source sequence.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TState">Type of the state.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="keySelector">
            A function that returns the key given an element.</param>
            <param name="seedSelector">
            A function to determine the initial value for the accumulator that is
            invoked once per key encountered.</param>
            <param name="accumulator">
            An accumulator function invoked for each element.</param>
            <param name="comparer">The equality comparer to use to determine
            whether or not keys are equal. If <c>null</c>, the default equality
            comparer for <typeparamref name="TSource" /> is used.</param>
            <returns>
            A sequence of keys paired with intermediate accumulator states.
            </returns>
        </member>
        <member name="T:MoreLinq.Extensions.ScanRightExtension">
            <summary>
                <c>ScanRight</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.ScanRightExtension.ScanRight``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
            <summary>
            Peforms a right-associative scan (inclusive prefix) on a sequence of elements.
            This operator is the right-associative version of the
            <see cref="M:MoreLinq.MoreEnumerable.Scan``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" /> LINQ operator.
            </summary>
            <typeparam name="TSource">Type of elements in source sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="func">
            A right-associative accumulator function to be invoked on each element.
            Its first argument is the current value in the sequence; second argument is the previous accumulator value.
            </param>
            <returns>The scanned sequence.</returns>
            <example>
                <code><![CDATA[
            var result = Enumerable.Range(1, 5).Select(i => i.ToString()).ScanRight((a, b) => string.Format("({0}/{1})", a, b));
            ]]></code>
            The <c>result</c> variable will contain <c>[ "(1+(2+(3+(4+5))))", "(2+(3+(4+5)))", "(3+(4+5))", "(4+5)", "5" ]</c>.
            </example>
            <remarks>
            This operator uses deferred execution and streams its results.
            Source sequence is consumed greedily when an iteration of the resulting sequence begins.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.ScanRightExtension.ScanRight``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``0,``1,``1})">
            <summary>
            Peforms a right-associative scan (inclusive prefix) on a sequence of elements.
            The specified seed value is used as the initial accumulator value.
            This operator is the right-associative version of the
            <see cref="M:MoreLinq.MoreEnumerable.Scan``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" /> LINQ operator.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="seed">The initial accumulator value.</param>
            <param name="func">A right-associative accumulator function to be invoked on each element.</param>
            <returns>The scanned sequence.</returns>
            <example>
                <code><![CDATA[
            var result = Enumerable.Range(1, 4).ScanRight("5", (a, b) => string.Format("({0}/{1})", a, b));
            ]]></code>
            The <c>result</c> variable will contain <c>[ "(1+(2+(3+(4+5))))", "(2+(3+(4+5)))", "(3+(4+5))", "(4+5)", "5" ]</c>.
            </example>
            <remarks>
            This operator uses deferred execution and streams its results.
            Source sequence is consumed greedily when an iteration of the resulting sequence begins.
            </remarks>
        </member>
        <member name="T:MoreLinq.Extensions.SegmentExtension">
            <summary>
                <c>Segment</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.SegmentExtension.Segment``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Divides a sequence into multiple sequences by using a segment detector based on the original sequence
            </summary>
            <typeparam name="T">The type of the elements in the sequence</typeparam>
            <param name="source">The sequence to segment</param>
            <param name="newSegmentPredicate">A function, which returns <c>true</c> if the given element begins a new segment, and <c>false</c> otherwise</param>
            <returns>A sequence of segment, each of which is a portion of the original sequence</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either <paramref name="source" /> or <paramref name="newSegmentPredicate" /> are <see langword="null" />.
            </exception>
        </member>
        <member name="M:MoreLinq.Extensions.SegmentExtension.Segment``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Divides a sequence into multiple sequences by using a segment detector based on the original sequence
            </summary>
            <typeparam name="T">The type of the elements in the sequence</typeparam>
            <param name="source">The sequence to segment</param>
            <param name="newSegmentPredicate">A function, which returns <c>true</c> if the given element or index indicate a new segment, and <c>false</c> otherwise</param>
            <returns>A sequence of segment, each of which is a portion of the original sequence</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either <paramref name="source" /> or <paramref name="newSegmentPredicate" /> are <see langword="null" />.
            </exception>
        </member>
        <member name="M:MoreLinq.Extensions.SegmentExtension.Segment``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Int32,System.Boolean})">
            <summary>
            Divides a sequence into multiple sequences by using a segment detector based on the original sequence
            </summary>
            <typeparam name="T">The type of the elements in the sequence</typeparam>
            <param name="source">The sequence to segment</param>
            <param name="newSegmentPredicate">A function, which returns <c>true</c> if the given current element, previous element or index indicate a new segment, and <c>false</c> otherwise</param>
            <returns>A sequence of segment, each of which is a portion of the original sequence</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either <paramref name="source" /> or <paramref name="newSegmentPredicate" /> are <see langword="null" />.
            </exception>
        </member>
        <member name="T:MoreLinq.Extensions.ShuffleExtension">
            <summary>
                <c>Shuffle</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.ShuffleExtension.Shuffle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a sequence of elements in random order from the original
            sequence.
            </summary>
            <typeparam name="T">The type of source sequence elements.</typeparam>
            <param name="source">
            The sequence from which to return random elements.</param>
            <returns>
            A sequence of elements <paramref name="source" /> randomized in
            their order.
            </returns>
            <remarks>
            This method uses deferred execution and streams its results. The
            source sequence is entirely buffered before the results are
            streamed.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.ShuffleExtension.Shuffle``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <summary>
            Returns a sequence of elements in random order from the original
            sequence. An additional parameter specifies a random generator to be
            used for the random selection algorithm.
            </summary>
            <typeparam name="T">The type of source sequence elements.</typeparam>
            <param name="source">
            The sequence from which to return random elements.</param>
            <param name="rand">
            A random generator used as part of the selection algorithm.</param>
            <returns>
            A sequence of elements <paramref name="source" /> randomized in
            their order.
            </returns>
            <remarks>
            This method uses deferred execution and streams its results. The
            source sequence is entirely buffered before the results are
            streamed.
            </remarks>
        </member>
        <member name="T:MoreLinq.Extensions.SingleExtension">
            <summary>
                <c>Single</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.SingleExtension.Single``1(MoreLinq.IExtremaEnumerable{``0})">
            <summary>
            Returns the only element of a sequence, and throws an exception if
            there is not exactly one element in the sequence.
            </summary>
            <typeparam name="T">
            The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The input sequence.</param>
            <exception cref="T:System.InvalidOperationException">
            The input sequence contains more than one element.</exception>
            <returns>
            The single element of the input sequence.
            </returns>
        </member>
        <member name="T:MoreLinq.Extensions.SingleOrDefaultExtension">
            <summary>
                <c>SingleOrDefault</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.SingleOrDefaultExtension.SingleOrDefault``1(MoreLinq.IExtremaEnumerable{``0})">
            <summary>
            Returns the only element of a sequence, or a default value if the
            sequence is empty; this method throws an exception if there is more
            than one element in the sequence.
            </summary>
            <typeparam name="T">
            The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The input sequence.</param>
            <returns>
            The single element of the input sequence, or default value of type
            <typeparamref name="T" /> if the sequence contains no elements.
            </returns>
        </member>
        <member name="T:MoreLinq.Extensions.SkipLastExtension">
            <summary>
                <c>SkipLast</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.SkipLastExtension.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Bypasses a specified number of elements at the end of the sequence.
            </summary>
            <typeparam name="T">Type of the source sequence</typeparam>
            <param name="source">The source sequence.</param>
            <param name="count">The number of elements to bypass at the end of the source sequence.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the source sequence elements except for the bypassed ones at the end.
            </returns>
        </member>
        <member name="T:MoreLinq.Extensions.SkipUntilExtension">
            <summary>
                <c>SkipUntil</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.SkipUntilExtension.SkipUntil``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Skips items from the input sequence until the given predicate returns true
            when applied to the current source item; that item will be the last skipped.
            </summary>
            <remarks>
                <para>
            SkipUntil differs from Enumerable.SkipWhile in two respects. Firstly, the sense
            of the predicate is reversed: it is expected that the predicate will return false
            to start with, and then return true - for example, when trying to find a matching
            item in a sequence.
            </para>
                <para>
            Secondly, SkipUntil skips the element which causes the predicate to return true. For
            example, in a sequence <code><![CDATA[{ 1, 2, 3, 4, 5 }]]></code> and with a predicate of
            <code><![CDATA[x => x == 3]]></code>, the result would be <code><![CDATA[{ 4, 5 }]]></code>.
            </para>
                <para>
            SkipUntil is as lazy as possible: it will not iterate over the source sequence
            until it has to, it won't iterate further than it has to, and it won't evaluate
            the predicate until it has to. (This means that an item may be returned which would
            actually cause the predicate to throw an exception if it were evaluated, so long as
            it comes after the first item causing the predicate to return true.)
            </para>
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <param name="source">Source sequence</param>
            <param name="predicate">Predicate used to determine when to stop yielding results from the source.</param>
            <returns>Items from the source sequence after the predicate first returns true when applied to the item.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="predicate" /> is null</exception>
        </member>
        <member name="T:MoreLinq.Extensions.SliceExtension">
            <summary>
                <c>Slice</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.SliceExtension.Slice``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Extracts a contiguous count of elements from a sequence at a particular zero-based starting index
            </summary>
            <remarks>
            If the starting position or count specified result in slice extending past the end of the sequence,
            it will return all elements up to that point. There is no guarantee that the resulting sequence will
            contain the number of elements requested - it may have anywhere from 0 to <paramref name="count" />.<br />
            This method is implemented in an optimized manner for any sequence implementing <c>IList{T}</c>.<br />
            The result of Slice() is identical to: <c>sequence.Skip(startIndex).Take(count)</c></remarks>
            <typeparam name="T">The type of the elements in the source sequence</typeparam>
            <param name="sequence">The sequence from which to extract elements</param>
            <param name="startIndex">The zero-based index at which to begin slicing</param>
            <param name="count">The number of items to slice out of the index</param>
            <returns>A new sequence containing any elements sliced out from the source sequence</returns>
        </member>
        <member name="T:MoreLinq.Extensions.SortedMergeExtension">
            <summary>
                <c>SortedMerge</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.SortedMergeExtension.SortedMerge``1(System.Collections.Generic.IEnumerable{``0},MoreLinq.OrderByDirection,System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
             Merges two or more sequences that are in a common order (either ascending or descending) into
             a single sequence that preserves that order.
             </summary>
            <remarks>
             Using SortedMerge on sequences that are not ordered or are not in the same order produces
             undefined results.<br /><c>SortedMerge</c> uses performs the merge in a deferred, streaming manner. <br />
            
             Here is an example of a merge, as well as the produced result:
             <code><![CDATA[
               var s1 = new[] { 3, 7, 11 };
               var s2 = new[] { 2, 4, 20 };
               var s3 = new[] { 17, 19, 25 };
               var merged = s1.SortedMerge( OrderByDirection.Ascending, s2, s3 );
               var result = merged.ToArray();
               // result will be:
               // { 2, 3, 4, 7, 11, 17, 19, 20, 25 }
             ]]></code></remarks>
            <typeparam name="TSource">The type of the elements of the sequence</typeparam>
            <param name="source">The primary sequence with which to merge</param>
            <param name="direction">The ordering that all sequences must already exhibit</param>
            <param name="otherSequences">A variable argument array of zero or more other sequences to merge with</param>
            <returns>A merged, order-preserving sequence containing all of the elements of the original sequences</returns>
        </member>
        <member name="M:MoreLinq.Extensions.SortedMergeExtension.SortedMerge``1(System.Collections.Generic.IEnumerable{``0},MoreLinq.OrderByDirection,System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Merges two or more sequences that are in a common order (either ascending or descending) into
            a single sequence that preserves that order.
            </summary>
            <typeparam name="TSource">The type of the elements in the sequence</typeparam>
            <param name="source">The primary sequence with which to merge</param>
            <param name="direction">The ordering that all sequences must already exhibit</param>
            <param name="comparer">The comparer used to evaluate the relative order between elements</param>
            <param name="otherSequences">A variable argument array of zero or more other sequences to merge with</param>
            <returns>A merged, order-preserving sequence containing al of the elements of the original sequences</returns>
        </member>
        <member name="T:MoreLinq.Extensions.SplitExtension">
            <summary>
                <c>Split</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.SplitExtension.Split``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Splits the source sequence by a separator.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="separator">Separator element.</param>
            <returns>A sequence of splits of elements.</returns>
        </member>
        <member name="M:MoreLinq.Extensions.SplitExtension.Split``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Splits the source sequence by separator elements identified by a
            function.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="separatorFunc">Predicate function used to determine
            the splitter elements in the source sequence.</param>
            <returns>A sequence of splits of elements.</returns>
        </member>
        <member name="M:MoreLinq.Extensions.SplitExtension.Split``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32)">
            <summary>
            Splits the source sequence by a separator given a maximum count of splits.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="separator">Separator element.</param>
            <param name="count">Maximum number of splits.</param>
            <returns>A sequence of splits of elements.</returns>
        </member>
        <member name="M:MoreLinq.Extensions.SplitExtension.Split``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Splits the source sequence by a separator and then transforms the
            splits into results.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="separator">Separator element.</param>
            <param name="comparer">Comparer used to determine separator
            element equality.</param>
            <returns>A sequence of splits of elements.</returns>
        </member>
        <member name="M:MoreLinq.Extensions.SplitExtension.Split``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Int32)">
            <summary>
            Splits the source sequence by separator elements identified by a
            function, given a maximum count of splits.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="separatorFunc">Predicate function used to determine
            the splitter elements in the source sequence.</param>
            <param name="count">Maximum number of splits.</param>
            <returns>A sequence of splits of elements.</returns>
        </member>
        <member name="M:MoreLinq.Extensions.SplitExtension.Split``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0},System.Int32)">
            <summary>
            Splits the source sequence by a separator, given a maximum count
            of splits. A parameter specifies how the separator is compared
            for equality.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="separator">Separator element.</param>
            <param name="comparer">Comparer used to determine separator
            element equality.</param>
            <param name="count">Maximum number of splits.</param>
            <returns>A sequence of splits of elements.</returns>
        </member>
        <member name="M:MoreLinq.Extensions.SplitExtension.Split``2(System.Collections.Generic.IEnumerable{``0},``0,System.Func{System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            Splits the source sequence by a separator and then transforms
            the splits into results.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence.</typeparam>
            <typeparam name="TResult">Type of the result sequence elements.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="separator">Separator element.</param>
            <param name="resultSelector">Function used to project splits
            of source elements into elements of the resulting sequence.</param>
            <returns>
            A sequence of values typed as <typeparamref name="TResult" />.
            </returns>
        </member>
        <member name="M:MoreLinq.Extensions.SplitExtension.Split``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            Splits the source sequence by separator elements identified by
            a function and then transforms the splits into results.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence.</typeparam>
            <typeparam name="TResult">Type of the result sequence elements.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="separatorFunc">Predicate function used to determine
            the splitter elements in the source sequence.</param>
            <param name="resultSelector">Function used to project splits
            of source elements into elements of the resulting sequence.</param>
            <returns>
            A sequence of values typed as <typeparamref name="TResult" />.
            </returns>
        </member>
        <member name="M:MoreLinq.Extensions.SplitExtension.Split``2(System.Collections.Generic.IEnumerable{``0},``0,System.Int32,System.Func{System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            Splits the source sequence by a separator, given a maximum count
            of splits, and then transforms the splits into results.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence.</typeparam>
            <typeparam name="TResult">Type of the result sequence elements.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="separator">Separator element.</param>
            <param name="count">Maximum number of splits.</param>
            <param name="resultSelector">Function used to project splits
            of source elements into elements of the resulting sequence.</param>
            <returns>
            A sequence of values typed as <typeparamref name="TResult" />.
            </returns>
        </member>
        <member name="M:MoreLinq.Extensions.SplitExtension.Split``2(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0},System.Func{System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            Splits the source sequence by a separator and then transforms the
            splits into results. A parameter specifies how the separator is
            compared for equality.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence.</typeparam>
            <typeparam name="TResult">Type of the result sequence elements.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="separator">Separator element.</param>
            <param name="comparer">Comparer used to determine separator
            element equality.</param>
            <param name="resultSelector">Function used to project splits
            of source elements into elements of the resulting sequence.</param>
            <returns>
            A sequence of values typed as <typeparamref name="TResult" />.
            </returns>
        </member>
        <member name="M:MoreLinq.Extensions.SplitExtension.Split``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Int32,System.Func{System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            Splits the source sequence by separator elements identified by
            a function, given a maximum count of splits, and then transforms
            the splits into results.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence.</typeparam>
            <typeparam name="TResult">Type of the result sequence elements.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="separatorFunc">Predicate function used to determine
            the splitter elements in the source sequence.</param>
            <param name="count">Maximum number of splits.</param>
            <param name="resultSelector">Function used to project a split
            group of source elements into an element of the resulting sequence.</param>
            <returns>
            A sequence of values typed as <typeparamref name="TResult" />.
            </returns>
        </member>
        <member name="M:MoreLinq.Extensions.SplitExtension.Split``2(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0},System.Int32,System.Func{System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            Splits the source sequence by a separator, given a maximum count
            of splits, and then transforms the splits into results. A
            parameter specifies how the separator is compared for equality.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence.</typeparam>
            <typeparam name="TResult">Type of the result sequence elements.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="separator">Separator element.</param>
            <param name="comparer">Comparer used to determine separator
            element equality.</param>
            <param name="count">Maximum number of splits.</param>
            <param name="resultSelector">Function used to project splits
            of source elements into elements of the resulting sequence.</param>
            <returns>
            A sequence of values typed as <typeparamref name="TResult" />.
            </returns>
        </member>
        <member name="T:MoreLinq.Extensions.StartsWithExtension">
            <summary>
                <c>StartsWith</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.StartsWithExtension.StartsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether the beginning of the first sequence is
            equivalent to the second sequence, using the default equality
            comparer.
            </summary>
            <typeparam name="T">Type of elements.</typeparam>
            <param name="first">The sequence to check.</param>
            <param name="second">The sequence to compare to.</param>
            <returns>
                <c>true</c> if <paramref name="first" /> begins with elements
            equivalent to <paramref name="second" />.
            </returns>
            <remarks>
            This is the <see cref="T:System.Collections.Generic.IEnumerable`1" /> equivalent of
            <see cref="M:System.String.StartsWith(System.String)" /> and it calls
            <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)" /> using
            <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" /> on pairs of elements at
            the same index.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.StartsWithExtension.StartsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether the beginning of the first sequence is
            equivalent to the second sequence, using the specified element
            equality comparer.
            </summary>
            <typeparam name="T">Type of elements.</typeparam>
            <param name="first">The sequence to check.</param>
            <param name="second">The sequence to compare to.</param>
            <param name="comparer">Equality comparer to use.</param>
            <returns>
                <c>true</c> if <paramref name="first" /> begins with elements
            equivalent to <paramref name="second" />.
            </returns>
            <remarks>
            This is the <see cref="T:System.Collections.Generic.IEnumerable`1" /> equivalent of
            <see cref="M:System.String.StartsWith(System.String)" /> and
            it calls <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)" /> on pairs
            of elements at the same index.
            </remarks>
        </member>
        <member name="T:MoreLinq.Extensions.SubsetsExtension">
            <summary>
                <c>Subsets</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.SubsetsExtension.Subsets``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a sequence of <see cref="T:System.Collections.Generic.IList`1" /> representing all of
            the subsets of any size that are part of the original sequence. In
            mathematics, it is equivalent to the <em>power set</em> of a set.
            </summary>
            <remarks>
            This operator produces all of the subsets of a given sequence. Subsets are returned
            in increasing cardinality, starting with the empty set and terminating with the
            entire original sequence.<br />
            Subsets are produced in a deferred, streaming manner; however, each subset is returned
            as a materialized list.<br />
            There are 2^N subsets of a given sequence, where N =&gt; sequence.Count().
            </remarks>
            <param name="sequence">Sequence for which to produce subsets</param>
            <typeparam name="T">The type of the elements in the sequence</typeparam>
            <returns>A sequence of lists that represent the all subsets of the original sequence</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="sequence" /> is <see langword="null" /></exception>
        </member>
        <member name="M:MoreLinq.Extensions.SubsetsExtension.Subsets``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns a sequence of <see cref="T:System.Collections.Generic.IList`1" /> representing all
            subsets of a given size that are part of the original sequence. In
            mathematics, it is equivalent to the <em>combinations</em> or
            <em>k-subsets</em> of a set.
            </summary>
            <param name="sequence">Sequence for which to produce subsets</param>
            <param name="subsetSize">The size of the subsets to produce</param>
            <typeparam name="T">The type of the elements in the sequence</typeparam>
            <returns>A sequence of lists that represents of K-sized subsets of the original sequence</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="sequence" /> is <see langword="null" /></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="subsetSize" /> is less than zero.
            </exception>
        </member>
        <member name="T:MoreLinq.Extensions.TagFirstLastExtension">
            <summary>
                <c>TagFirstLast</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.TagFirstLastExtension.TagFirstLast``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean,System.Boolean,``1})">
            <summary>
            Returns a sequence resulting from applying a function to each
            element in the source sequence with additional parameters
            indicating whether the element is the first and/or last of the
            sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <typeparam name="TResult">The type of the element of the returned sequence.</typeparam>
            <param name="source">The source sequence.</param>
            <param name="resultSelector">A function that determines how to
            project the each element along with its first or last tag.</param>
            <returns>
            Returns the resulting sequence.
            </returns>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
            <example>
                <code><![CDATA[
            var numbers = new[] { 123, 456, 789 };
            var result = numbers.TagFirstLast((num, fst, lst) => new
                         {
                             Number = num,
                             IsFirst = fst, IsLast = lst
                         });
            ]]></code>
            The <c>result</c> variable, when iterated over, will yield
            <c>{ Number = 123, IsFirst = True, IsLast = False }</c>,
            <c>{ Number = 456, IsFirst = False, IsLast = False }</c> and
            <c>{ Number = 789, IsFirst = False, IsLast = True }</c> in turn.
            </example>
        </member>
        <member name="T:MoreLinq.Extensions.TakeEveryExtension">
            <summary>
                <c>TakeEvery</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.TakeEveryExtension.TakeEvery``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns every N-th element of a sequence.
            </summary>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <param name="source">Source sequence</param>
            <param name="step">Number of elements to bypass before returning the next element.</param>
            <returns>
            A sequence with every N-th element of the input sequence.
            </returns>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
            <example>
                <code><![CDATA[
            int[] numbers = { 1, 2, 3, 4, 5 };
            var result = numbers.TakeEvery(2);
            ]]></code>
            The <c>result</c> variable, when iterated over, will yield 1, 3 and 5, in turn.
            </example>
        </member>
        <member name="T:MoreLinq.Extensions.TakeLastExtension">
            <summary>
                <c>TakeLast</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.TakeLastExtension.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the end of
            a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The sequence to return the last element of.</param>
            <param name="count">The number of elements to return.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the specified number of
            elements from the end of the input sequence.
            </returns>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
            <example>
                <code><![CDATA[
            int[] numbers = { 12, 34, 56, 78 };
            var result = numbers.TakeLast(2);
            ]]></code>
            The <c>result</c> variable, when iterated over, will yield
            56 and 78 in turn.
            </example>
        </member>
        <member name="T:MoreLinq.Extensions.TakeUntilExtension">
            <summary>
                <c>TakeUntil</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.TakeUntilExtension.TakeUntil``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns items from the input sequence until the given predicate returns true
            when applied to the current source item; that item will be the last returned.
            </summary>
            <remarks>
                <para>
            TakeUntil differs from Enumerable.TakeWhile in two respects. Firstly, the sense
            of the predicate is reversed: it is expected that the predicate will return false
            to start with, and then return true - for example, when trying to find a matching
            item in a sequence.
            </para>
                <para>
            Secondly, TakeUntil yields the element which causes the predicate to return true. For
            example, in a sequence <code><![CDATA[{ 1, 2, 3, 4, 5 }]]></code> and with a predicate of
            <code><![CDATA[x => x == 3]]></code>, the result would be <code><![CDATA[{ 1, 2, 3 }]]></code>.
            </para>
                <para>
            TakeUntil is as lazy as possible: it will not iterate over the source sequence
            until it has to, it won't iterate further than it has to, and it won't evaluate
            the predicate until it has to. (This means that an item may be returned which would
            actually cause the predicate to throw an exception if it were evaluated, so long as
            no more items of data are requested.)
            </para>
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <param name="source">Source sequence</param>
            <param name="predicate">Predicate used to determine when to stop yielding results from the source.</param>
            <returns>Items from the source sequence, until the predicate returns true when applied to the item.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="predicate" /> is null</exception>
        </member>
        <member name="T:MoreLinq.Extensions.ThenByExtension">
            <summary>
                <c>ThenBy</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.ThenByExtension.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},MoreLinq.OrderByDirection)">
            <summary>
            Performs a subsequent ordering of elements in a sequence in a particular direction (ascending, descending) according to a key
            </summary>
            <typeparam name="T">The type of the elements in the source sequence</typeparam>
            <typeparam name="TKey">The type of the key used to order elements</typeparam>
            <param name="source">The sequence to order</param>
            <param name="keySelector">A key selector function</param>
            <param name="direction">A direction in which to order the elements (ascending, descending)</param>
            <returns>An ordered copy of the source sequence</returns>
        </member>
        <member name="M:MoreLinq.Extensions.ThenByExtension.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},MoreLinq.OrderByDirection)">
            <summary>
            Performs a subsequent ordering of elements in a sequence in a particular direction (ascending, descending) according to a key
            </summary>
            <typeparam name="T">The type of the elements in the source sequence</typeparam>
            <typeparam name="TKey">The type of the key used to order elements</typeparam>
            <param name="source">The sequence to order</param>
            <param name="keySelector">A key selector function</param>
            <param name="direction">A direction in which to order the elements (ascending, descending)</param>
            <param name="comparer">A comparer used to define the semantics of element comparison</param>
            <returns>An ordered copy of the source sequence</returns>
        </member>
        <member name="T:MoreLinq.Extensions.ToArrayByIndexExtension">
            <summary>
                <c>ToArrayByIndex</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.ToArrayByIndexExtension.ToArrayByIndex``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Creates an array from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> where a
            function is used to determine the index at which an element will
            be placed in the array.
            </summary>
            <param name="source">The source sequence for the array.</param>
            <param name="indexSelector">
            A function that maps an element to its index.</param>
            <typeparam name="T">
            The type of the element in <paramref name="source" />.</typeparam>
            <returns>
            An array that contains the elements from the input sequence. The
            size of the array will be as large as the highest index returned
            by the <paramref name="indexSelector" /> plus 1.
            </returns>
            <remarks>
            This method forces immediate query evaluation. It should not be
            used on infinite sequences. If more than one element maps to the
            same index then the latter element overwrites the former in the
            resulting array.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.ToArrayByIndexExtension.ToArrayByIndex``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Int32})">
            <summary>
            Creates an array of user-specified length from an
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> where a function is used to determine
            the index at which an element will be placed in the array.
            </summary>
            <param name="source">The source sequence for the array.</param>
            <param name="length">The (non-negative) length of the resulting array.</param>
            <param name="indexSelector">
            A function that maps an element to its index.</param>
            <typeparam name="T">
            The type of the element in <paramref name="source" />.</typeparam>
            <returns>
            An array of size <paramref name="length" /> that contains the
            elements from the input sequence.
            </returns>
            <remarks>
            This method forces immediate query evaluation. It should not be
            used on infinite sequences. If more than one element maps to the
            same index then the latter element overwrites the former in the
            resulting array.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.ToArrayByIndexExtension.ToArrayByIndex``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},System.Func{``0,``1})">
            <summary>
            Creates an array from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> where a
            function is used to determine the index at which an element will
            be placed in the array. The elements are projected into the array
            via an additional function.
            </summary>
            <param name="source">The source sequence for the array.</param>
            <param name="indexSelector">
            A function that maps an element to its index.</param>
            <param name="resultSelector">
            A function to project a source element into an element of the
            resulting array.</param>
            <typeparam name="T">
            The type of the element in <paramref name="source" />.</typeparam>
            <typeparam name="TResult">
            The type of the element in the resulting array.</typeparam>
            <returns>
            An array that contains the projected elements from the input
            sequence. The size of the array will be as large as the highest
            index returned by the <paramref name="indexSelector" /> plus 1.
            </returns>
            <remarks>
            This method forces immediate query evaluation. It should not be
            used on infinite sequences. If more than one element maps to the
            same index then the latter element overwrites the former in the
            resulting array.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.ToArrayByIndexExtension.ToArrayByIndex``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},System.Func{``0,System.Int32,``1})">
            <summary>
            Creates an array from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> where a
            function is used to determine the index at which an element will
            be placed in the array. The elements are projected into the array
            via an additional function.
            </summary>
            <param name="source">The source sequence for the array.</param>
            <param name="indexSelector">
            A function that maps an element to its index.</param>
            <param name="resultSelector">
            A function to project a source element into an element of the
            resulting array.</param>
            <typeparam name="T">
            The type of the element in <paramref name="source" />.</typeparam>
            <typeparam name="TResult">
            The type of the element in the resulting array.</typeparam>
            <returns>
            An array that contains the projected elements from the input
            sequence. The size of the array will be as large as the highest
            index returned by the <paramref name="indexSelector" /> plus 1.
            </returns>
            <remarks>
            This method forces immediate query evaluation. It should not be
            used on infinite sequences. If more than one element maps to the
            same index then the latter element overwrites the former in the
            resulting array.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.ToArrayByIndexExtension.ToArrayByIndex``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Int32},System.Func{``0,``1})">
            <summary>
            Creates an array of user-specified length from an
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> where a function is used to determine
            the index at which an element will be placed in the array. The
            elements are projected into the array via an additional function.
            </summary>
            <param name="source">The source sequence for the array.</param>
            <param name="length">The (non-negative) length of the resulting array.</param>
            <param name="indexSelector">
            A function that maps an element to its index.</param>
            <param name="resultSelector">
            A function to project a source element into an element of the
            resulting array.</param>
            <typeparam name="T">
            The type of the element in <paramref name="source" />.</typeparam>
            <typeparam name="TResult">
            The type of the element in the resulting array.</typeparam>
            <returns>
            An array of size <paramref name="length" /> that contains the
            projected elements from the input sequence.
            </returns>
            <remarks>
            This method forces immediate query evaluation. It should not be
            used on infinite sequences. If more than one element maps to the
            same index then the latter element overwrites the former in the
            resulting array.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.ToArrayByIndexExtension.ToArrayByIndex``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Int32},System.Func{``0,System.Int32,``1})">
            <summary>
            Creates an array of user-specified length from an
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> where a function is used to determine
            the index at which an element will be placed in the array. The
            elements are projected into the array via an additional function.
            </summary>
            <param name="source">The source sequence for the array.</param>
            <param name="length">The (non-negative) length of the resulting array.</param>
            <param name="indexSelector">
            A function that maps an element to its index.</param>
            <param name="resultSelector">
            A function to project a source element into an element of the
            resulting array.</param>
            <typeparam name="T">
            The type of the element in <paramref name="source" />.</typeparam>
            <typeparam name="TResult">
            The type of the element in the resulting array.</typeparam>
            <returns>
            An array of size <paramref name="length" /> that contains the
            projected elements from the input sequence.
            </returns>
            <remarks>
            This method forces immediate query evaluation. It should not be
            used on infinite sequences. If more than one element maps to the
            same index then the latter element overwrites the former in the
            resulting array.
            </remarks>
        </member>
        <member name="T:MoreLinq.Extensions.ToDelimitedStringExtension">
            <summary>
                <c>ToDelimitedString</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.ToDelimitedStringExtension.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Boolean},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements.</param>
            <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="delimiter" /> is <c>null</c>.
            </exception>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.ToDelimitedStringExtension.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Byte},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements.</param>
            <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="delimiter" /> is <c>null</c>.
            </exception>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.ToDelimitedStringExtension.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Char},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements.</param>
            <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="delimiter" /> is <c>null</c>.
            </exception>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.ToDelimitedStringExtension.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Decimal},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements.</param>
            <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="delimiter" /> is <c>null</c>.
            </exception>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.ToDelimitedStringExtension.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Double},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements.</param>
            <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="delimiter" /> is <c>null</c>.
            </exception>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.ToDelimitedStringExtension.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Single},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements.</param>
            <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="delimiter" /> is <c>null</c>.
            </exception>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.ToDelimitedStringExtension.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Int32},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements.</param>
            <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="delimiter" /> is <c>null</c>.
            </exception>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.ToDelimitedStringExtension.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Int64},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements.</param>
            <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="delimiter" /> is <c>null</c>.
            </exception>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.ToDelimitedStringExtension.ToDelimitedString(System.Collections.Generic.IEnumerable{System.SByte},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements.</param>
            <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="delimiter" /> is <c>null</c>.
            </exception>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.ToDelimitedStringExtension.ToDelimitedString(System.Collections.Generic.IEnumerable{System.Int16},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements.</param>
            <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="delimiter" /> is <c>null</c>.
            </exception>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.ToDelimitedStringExtension.ToDelimitedString(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements.</param>
            <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="delimiter" /> is <c>null</c>.
            </exception>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.ToDelimitedStringExtension.ToDelimitedString(System.Collections.Generic.IEnumerable{System.UInt32},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements.</param>
            <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="delimiter" /> is <c>null</c>.
            </exception>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.ToDelimitedStringExtension.ToDelimitedString(System.Collections.Generic.IEnumerable{System.UInt64},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements.</param>
            <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="delimiter" /> is <c>null</c>.
            </exception>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.ToDelimitedStringExtension.ToDelimitedString(System.Collections.Generic.IEnumerable{System.UInt16},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements.</param>
            <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="delimiter" /> is <c>null</c>.
            </exception>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.ToDelimitedStringExtension.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Creates a delimited string from a sequence of values and
            a given delimiter.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence</typeparam>
            <param name="source">The sequence of items to delimit. Each is converted to a string using the
            simple ToString() conversion.</param>
            <param name="delimiter">The delimiter to inject between elements.</param>
            <returns>
            A string that consists of the elements in <paramref name="source" />
            delimited by <paramref name="delimiter" />. If the source sequence
            is empty, the method returns an empty string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> or <paramref name="delimiter" /> is <c>null</c>.
            </exception>
            <remarks>
            This operator uses immediate execution and effectively buffers the sequence.
            </remarks>
        </member>
        <member name="T:MoreLinq.Extensions.ToDictionaryExtension">
            <summary>
                <c>ToDictionary</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.ToDictionaryExtension.ToDictionary``2(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}})">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from a sequence of
            tuples of 2 where the first item is the key and the second the
            value.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source sequence of couples (tuple of 2).</param>
            <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2" /> containing the values
            mapped to their keys.
            </returns>
        </member>
        <member name="M:MoreLinq.Extensions.ToDictionaryExtension.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from a sequence of
            <see cref="T:System.Collections.Generic.KeyValuePair`2" /> elements.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source sequence of key-value pairs.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2" /> containing the values
            mapped to their keys.
            </returns>
        </member>
        <member name="M:MoreLinq.Extensions.ToDictionaryExtension.ToDictionary``2(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from a sequence of
            tuples of 2 where the first item is the key and the second the
            value. An additional parameter specifies a comparer for keys.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source sequence of couples (tuple of 2).</param>
            <param name="comparer">The comparer for keys.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2" /> containing the values
            mapped to their keys.
            </returns>
        </member>
        <member name="M:MoreLinq.Extensions.ToDictionaryExtension.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from a sequence of
            <see cref="T:System.Collections.Generic.KeyValuePair`2" /> elements. An additional
            parameter specifies a comparer for keys.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source sequence of key-value pairs.</param>
            <param name="comparer">The comparer for keys.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2" /> containing the values
            mapped to their keys.
            </returns>
        </member>
        <member name="T:MoreLinq.Extensions.ToHashSetExtension">
            <summary>
                <c>ToHashSet</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.ToHashSetExtension.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.HashSet`1" /> of the source items using the default equality
            comparer for the type.
            </summary>
            <typeparam name="TSource">Type of elements in source sequence.</typeparam>
            <param name="source">Source sequence</param>
            <returns>A hash set of the items in the sequence, using the default equality comparer.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <remarks>
            This evaluates the input sequence completely.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.ToHashSetExtension.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.HashSet`1" /> of the source items using the specified equality
            comparer for the type.
            </summary>
            <typeparam name="TSource">Type of elements in source sequence.</typeparam>
            <param name="source">Source sequence</param>
            <param name="comparer">Equality comparer to use; a value of null will cause the type's default equality comparer to be used</param>
            <returns>A hash set of the items in the sequence, using the default equality comparer.</returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="source" /> is null</exception>
            <remarks>
            This evaluates the input sequence completely.
            </remarks>
        </member>
        <member name="T:MoreLinq.Extensions.ToLookupExtension">
            <summary>
                <c>ToLookup</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.ToLookupExtension.ToLookup``2(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}})">
            <summary>
            Creates a <see cref="T:System.Linq.Lookup`2" /> from a sequence of
            tuples of 2 where the first item is the key and the second the
            value.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source sequence of tuples of 2.</param>
            <returns>
            A <see cref="T:System.Linq.Lookup`2" /> containing the values
            mapped to their keys.
            </returns>
        </member>
        <member name="M:MoreLinq.Extensions.ToLookupExtension.ToLookup``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Creates a <see cref="T:System.Linq.ILookup`2" /> from a sequence of
            <see cref="T:System.Collections.Generic.KeyValuePair`2" /> elements.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source sequence of key-value pairs.</param>
            <returns>
            A <see cref="T:System.Linq.ILookup`2" /> containing the values
            mapped to their keys.
            </returns>
        </member>
        <member name="M:MoreLinq.Extensions.ToLookupExtension.ToLookup``2(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a <see cref="T:System.Linq.Lookup`2" /> from a sequence of
            tuples of 2 where the first item is the key and the second the
            value. An additional parameter specifies a comparer for keys.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source sequence of tuples of 2.</param>
            <param name="comparer">The comparer for keys.</param>
            <returns>
            A <see cref="T:System.Linq.Lookup`2" /> containing the values
            mapped to their keys.
            </returns>
        </member>
        <member name="M:MoreLinq.Extensions.ToLookupExtension.ToLookup``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a <see cref="T:System.Linq.ILookup`2" /> from a sequence of
            <see cref="T:System.Collections.Generic.KeyValuePair`2" /> elements. An additional
            parameter specifies a comparer for keys.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="source">The source sequence of key-value pairs.</param>
            <param name="comparer">The comparer for keys.</param>
            <returns>
            A <see cref="T:System.Linq.ILookup`2" /> containing the values
            mapped to their keys.
            </returns>
        </member>
        <member name="T:MoreLinq.Extensions.TraceExtension">
            <summary>
                <c>Trace</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.TraceExtension.Trace``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Traces the elements of a source sequence for diagnostics.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence</typeparam>
            <param name="source">Source sequence whose elements to trace.</param>
            <returns>
            Return the source sequence unmodified.
            </returns>
            <remarks>
            This a pass-through operator that uses deferred execution and
            streams the results.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.TraceExtension.Trace``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Traces the elements of a source sequence for diagnostics using
            custom formatting.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence</typeparam>
            <param name="source">Source sequence whose elements to trace.</param>
            <param name="format">
            String to use to format the trace message. If null then the
            element value becomes the traced message.
            </param>
            <returns>
            Return the source sequence unmodified.
            </returns>
            <remarks>
            This a pass-through operator that uses deferred execution and
            streams the results.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.TraceExtension.Trace``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
            Traces the elements of a source sequence for diagnostics using
            a custom formatter.
            </summary>
            <typeparam name="TSource">Type of element in the source sequence</typeparam>
            <param name="source">Source sequence whose elements to trace.</param>
            <param name="formatter">Function used to format each source element into a string.</param>
            <returns>
            Return the source sequence unmodified.
            </returns>
            <remarks>
            This a pass-through operator that uses deferred execution and
            streams the results.
            </remarks>
        </member>
        <member name="T:MoreLinq.Extensions.TransposeExtension">
            <summary>
                <c>Transpose</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.TransposeExtension.Transpose``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Transposes a sequence of rows into a sequence of columns.
            </summary>
            <typeparam name="T">Type of source sequence elements.</typeparam>
            <param name="source">Source sequence to transpose.</param>
            <returns>
            Returns a sequence of columns in the source swapped into rows.
            </returns>
            <remarks>
            If a rows is shorter than a follow it then the shorter row's
            elements are skipped in the corresponding column sequences.
            This operator uses deferred execution and streams its results.
            Source sequence is consumed greedily when an iteration begins.
            The inner sequences representing rows are consumed lazily and
            resulting sequences of columns are streamed.
            </remarks>
            <example>
                <code><![CDATA[
            var matrix = new[]
            {
                new[] { 10, 11 },
                new[] { 20 },
                new[] { 30, 31, 32 }
            };
            var result = matrix.Transpose();
            ]]></code>
            The <c>result</c> variable will contain [[10, 20, 30], [11, 31], [32]].
            </example>
        </member>
        <member name="T:MoreLinq.Extensions.WindowExtension">
            <summary>
                <c>Window</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.WindowExtension.Window``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Processes a sequence into a series of subsequences representing a windowed subset of the original
            </summary>
            <remarks>
            The number of sequences returned is: <c>Max(0, sequence.Count() - windowSize) + 1</c><br />
            Returned subsequences are buffered, but the overall operation is streamed.<br /></remarks>
            <typeparam name="TSource">The type of the elements of the source sequence</typeparam>
            <param name="source">The sequence to evaluate a sliding window over</param>
            <param name="size">The size (number of elements) in each window</param>
            <returns>A series of sequences representing each sliding window subsequence</returns>
        </member>
        <member name="T:MoreLinq.Extensions.WindowLeftExtension">
            <summary>
                <c>WindowLeft</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.WindowLeftExtension.WindowLeft``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
             Creates a left-aligned sliding window of a given size over the
             source sequence.
             </summary>
            <typeparam name="TSource">
             The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">
             The sequence over which to create the sliding window.</param>
            <param name="size">Size of the sliding window.</param>
            <returns>A sequence representing each sliding window.</returns>
            <remarks>
                <para>
             A window can contain fewer elements than <paramref name="size" />,
             especially as it slides over the end of the sequence.</para>
                <para>
             This operator uses deferred execution and streams its results.</para>
            </remarks>
            <example>
                <code><![CDATA[
             Console.WriteLine(
                 Enumerable
                     .Range(1, 5)
                     .WindowLeft(3)
                     .Select(w => "AVG(" + w.ToDelimitedString(",") + ") = " + w.Average())
                     .ToDelimitedString(Environment.NewLine));
            
             // Output:
             // AVG(1,2,3) = 2
             // AVG(2,3,4) = 3
             // AVG(3,4,5) = 4
             // AVG(4,5) = 4.5
             // AVG(5) = 5
             ]]></code>
            </example>
        </member>
        <member name="T:MoreLinq.Extensions.WindowRightExtension">
            <summary>
                <c>WindowRight</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.WindowRightExtension.WindowRight``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
             Creates a right-aligned sliding window over the source sequence
             of a given size.
             </summary>
            <typeparam name="TSource">
             The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">
             The sequence over which to create the sliding window.</param>
            <param name="size">Size of the sliding window.</param>
            <returns>A sequence representing each sliding window.</returns>
            <remarks>
                <para>
             A window can contain fewer elements than <paramref name="size" />,
             especially as it slides over the start of the sequence.</para>
                <para>
             This operator uses deferred execution and streams its results.</para>
            </remarks>
            <example>
                <code><![CDATA[
             Console.WriteLine(
                 Enumerable
                     .Range(1, 5)
                     .WindowRight(3)
                     .Select(w => "AVG(" + w.ToDelimitedString(",") + ") = " + w.Average())
                     .ToDelimitedString(Environment.NewLine));
            
             // Output:
             // AVG(1) = 1
             // AVG(1,2) = 1.5
             // AVG(1,2,3) = 2
             // AVG(2,3,4) = 3
             // AVG(3,4,5) = 4
             ]]></code>
            </example>
        </member>
        <member name="T:MoreLinq.Extensions.ZipLongestExtension">
            <summary>
                <c>ZipLongest</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.ZipLongestExtension.ZipLongest``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Returns a projection of tuples, where each tuple contains the N-th
            element from each of the argument sequences. The resulting sequence
            will always be as long as the longest of input sequences where the
            default value of each of the shorter sequence element types is used
            for padding.
            </summary>
            <typeparam name="TFirst">Type of elements in first sequence.</typeparam>
            <typeparam name="TSecond">Type of elements in second sequence.</typeparam>
            <typeparam name="TResult">Type of elements in result sequence.</typeparam>
            <param name="first">The first sequence.</param>
            <param name="second">The second sequence.</param>
            <param name="resultSelector">
            Function to apply to each pair of elements.</param>
            <returns>
            A sequence that contains elements of the two input sequences,
            combined by <paramref name="resultSelector" />.
            </returns>
            <example>
                <code><![CDATA[
            var numbers = { 1, 2, 3 };
            var letters = { "A", "B", "C", "D" };
            var zipped = numbers.ZipLongest(letters, (n, l) => n + l);
            ]]></code>
            The <c>zipped</c> variable, when iterated over, will yield "1A",
            "2B", "3C", "0D" in turn.
            </example>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.ZipLongestExtension.ZipLongest``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Func{``0,``1,``2,``3})">
            <summary>
            Returns a projection of tuples, where each tuple contains the N-th
            element from each of the argument sequences. The resulting sequence
            will always be as long as the longest of input sequences where the
            default value of each of the shorter sequence element types is used
            for padding.
            </summary>
            <typeparam name="T1">Type of elements in first sequence.</typeparam>
            <typeparam name="T2">Type of elements in second sequence.</typeparam>
            <typeparam name="T3">Type of elements in third sequence.</typeparam>
            <typeparam name="TResult">Type of elements in result sequence.</typeparam>
            <param name="first">The first sequence.</param>
            <param name="second">The second sequence.</param>
            <param name="third">The third sequence.</param>
            <param name="resultSelector">
            Function to apply to each triplet of elements.</param>
            <returns>
            A sequence that contains elements of the three input sequences,
            combined by <paramref name="resultSelector" />.
            </returns>
            <example>
                <code><![CDATA[
            var numbers = new[] { 1, 2, 3 };
            var letters = new[] { "A", "B", "C", "D" };
            var chars   = new[] { 'a', 'b', 'c', 'd', 'e' };
            var zipped  = numbers.ZipLongest(letters, chars, (n, l, c) => n + l + c);
            ]]></code>
            The <c>zipped</c> variable, when iterated over, will yield "1Aa",
            "2Bb", "3Cc", "0Dd", "0e" in turn.
            </example>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.ZipLongestExtension.ZipLongest``5(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Returns a projection of tuples, where each tuple contains the N-th
            element from each of the argument sequences. The resulting sequence
            will always be as long as the longest of input sequences where the
            default value of each of the shorter sequence element types is used
            for padding.
            </summary>
            <typeparam name="T1">Type of elements in first sequence</typeparam>
            <typeparam name="T2">Type of elements in second sequence</typeparam>
            <typeparam name="T3">Type of elements in third sequence</typeparam>
            <typeparam name="T4">Type of elements in fourth sequence</typeparam>
            <typeparam name="TResult">Type of elements in result sequence</typeparam>
            <param name="first">The first sequence.</param>
            <param name="second">The second sequence.</param>
            <param name="third">The third sequence.</param>
            <param name="fourth">The fourth sequence.</param>
            <param name="resultSelector">
            Function to apply to each quadruplet of elements.</param>
            <returns>
            A sequence that contains elements of the four input sequences,
            combined by <paramref name="resultSelector" />.
            </returns>
            <example>
                <code><![CDATA[
            var numbers = new[] { 1, 2, 3 };
            var letters = new[] { "A", "B", "C", "D" };
            var chars   = new[] { 'a', 'b', 'c', 'd', 'e' };
            var flags   = new[] { true, false, true, false, true, false };
            var zipped  = numbers.ZipLongest(letters, chars, flags, (n, l, c, f) => n + l + c + f);
            ]]></code>
            The <c>zipped</c> variable, when iterated over, will yield "1AaTrue",
            "2BbFalse", "3CcTrue", "0DdFalse", "0eTrue", "0\0False" in turn.
            </example>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
        </member>
        <member name="T:MoreLinq.Extensions.ZipShortestExtension">
            <summary>
                <c>ZipShortest</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.ZipShortestExtension.ZipShortest``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Returns a projection of tuples, where each tuple contains the N-th
            element from each of the argument sequences. The resulting sequence
            is as short as the shortest input sequence.
            </summary>
            <typeparam name="TFirst">Type of elements in first sequence.</typeparam>
            <typeparam name="TSecond">Type of elements in second sequence.</typeparam>
            <typeparam name="TResult">Type of elements in result sequence.</typeparam>
            <param name="first">The first sequence.</param>
            <param name="second">The second sequence.</param>
            <param name="resultSelector">
            Function to apply to each pair of elements.</param>
            <returns>
            A projection of tuples, where each tuple contains the N-th element
            from each of the argument sequences.</returns>
            <example>
                <code><![CDATA[
            var numbers = new[] { 1, 2, 3 };
            var letters = new[] { "A", "B", "C", "D" };
            var zipped = numbers.ZipShortest(letters, (n, l) => n + l);
            ]]></code>
            The <c>zipped</c> variable, when iterated over, will yield "1A", "2B", "3C", in turn.
            </example>
            <remarks>
                <para>
            If the input sequences are of different lengths, the result sequence
            is terminated as soon as the shortest input sequence is exhausted
            and remainder elements from the longer sequences are never consumed.
            </para>
                <para>
            This operator uses deferred execution and streams its results.</para>
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.ZipShortestExtension.ZipShortest``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Func{``0,``1,``2,``3})">
            <summary>
            Returns a projection of tuples, where each tuple contains the N-th
            element from each of the argument sequences. The resulting sequence
            is as short as the shortest input sequence.
            </summary>
            <typeparam name="T1">Type of elements in first sequence.</typeparam>
            <typeparam name="T2">Type of elements in second sequence.</typeparam>
            <typeparam name="T3">Type of elements in third sequence.</typeparam>
            <typeparam name="TResult">Type of elements in result sequence.</typeparam>
            <param name="first">First sequence</param>
            <param name="second">Second sequence</param>
            <param name="third">Third sequence</param>
            <param name="resultSelector">
            Function to apply to each triplet of elements.</param>
            <returns>
            A projection of tuples, where each tuple contains the N-th element
            from each of the argument sequences.</returns>
            <example>
                <code><![CDATA[
            var numbers = new[] { 1, 2, 3 };
            var letters = new[] { "A", "B", "C", "D" };
            var chars   = new[] { 'a', 'b', 'c', 'd', 'e' };
            var zipped  = numbers.ZipShortest(letters, chars, (n, l, c) => c + n + l);
            ]]></code>
            The <c>zipped</c> variable, when iterated over, will yield
            "98A", "100B", "102C", in turn.
            </example>
            <remarks>
                <para>
            If the input sequences are of different lengths, the result sequence
            is terminated as soon as the shortest input sequence is exhausted
            and remainder elements from the longer sequences are never consumed.
            </para>
                <para>
            This operator uses deferred execution and streams its results.</para>
            </remarks>
        </member>
        <member name="M:MoreLinq.Extensions.ZipShortestExtension.ZipShortest``5(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Returns a projection of tuples, where each tuple contains the N-th
            element from each of the argument sequences. The resulting sequence
            is as short as the shortest input sequence.
            </summary>
            <typeparam name="T1">Type of elements in first sequence.</typeparam>
            <typeparam name="T2">Type of elements in second sequence.</typeparam>
            <typeparam name="T3">Type of elements in third sequence.</typeparam>
            <typeparam name="T4">Type of elements in fourth sequence.</typeparam>
            <typeparam name="TResult">Type of elements in result sequence.</typeparam>
            <param name="first">The first sequence.</param>
            <param name="second">The second sequence.</param>
            <param name="third">The third sequence.</param>
            <param name="fourth">The fourth sequence.</param>
            <param name="resultSelector">
            Function to apply to each quadruplet of elements.</param>
            <returns>
            A projection of tuples, where each tuple contains the N-th element
            from each of the argument sequences.</returns>
            <example>
                <code><![CDATA[
            var numbers = new[] { 1, 2, 3 };
            var letters = new[] { "A", "B", "C", "D" };
            var chars   = new[] { 'a', 'b', 'c', 'd', 'e' };
            var flags   = new[] { true, false };
            var zipped  = numbers.ZipShortest(letters, chars, flags, (n, l, c, f) => n + l + c + f);
            ]]></code>
            The <c>zipped</c> variable, when iterated over, will yield
            "1AaTrue", "2BbFalse" in turn.
            </example>
            <remarks>
                <para>
            If the input sequences are of different lengths, the result sequence
            is terminated as soon as the shortest input sequence is exhausted
            and remainder elements from the longer sequences are never consumed.
            </para>
                <para>
            This operator uses deferred execution and streams its results.</para>
            </remarks>
        </member>
        <member name="T:MoreLinq.Extensions.ToDataTableExtension">
            <summary>
                <c>ToDataTable</c> extension.</summary>
        </member>
        <member name="M:MoreLinq.Extensions.ToDataTableExtension.ToDataTable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts a sequence to a <see cref="T:System.Data.DataTable" /> object.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The source.</param>
            <returns>
            A <see cref="T:System.Data.DataTable" /> representing the source.
            </returns>
            <remarks>This operator uses immediate execution.</remarks>
        </member>
        <member name="M:MoreLinq.Extensions.ToDataTableExtension.ToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Appends elements in the sequence as rows of a given <see cref="T:System.Data.DataTable" />
            object with a set of lambda expressions specifying which members (property
            or field) of each element in the sequence will supply the column values.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source" />.</typeparam>
            <param name="source">The source.</param>
            <param name="expressions">Expressions providing access to element members.</param>
            <returns>
            A <see cref="T:System.Data.DataTable" /> representing the source.
            </returns>
            <remarks>This operator uses immediate execution.</remarks>
        </member>
        <member name="M:MoreLinq.Extensions.ToDataTableExtension.ToDataTable``2(System.Collections.Generic.IEnumerable{``0},``1)">
            <summary>
            Appends elements in the sequence as rows of a given <see cref="T:System.Data.DataTable" /> object.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source" />.</typeparam>
            <typeparam name="TTable" />
            <param name="source">The source.</param>
            <param name="table" />
            <returns>
            A <see cref="T:System.Data.DataTable" /> or subclass representing the source.
            </returns>
            <remarks>This operator uses immediate execution.</remarks>
        </member>
        <member name="M:MoreLinq.Extensions.ToDataTableExtension.ToDataTable``2(System.Collections.Generic.IEnumerable{``0},``1,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Appends elements in the sequence as rows of a given <see cref="T:System.Data.DataTable" />
            object with a set of lambda expressions specifying which members (property
            or field) of each element in the sequence will supply the column values.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source" />.</typeparam>
            <typeparam name="TTable">The type of the input and resulting <see cref="T:System.Data.DataTable" /> object.</typeparam>
            <param name="source">The source.</param>
            <param name="table">The <see cref="T:System.Data.DataTable" /> type of object where to add rows</param>
            <param name="expressions">Expressions providing access to element members.</param>
            <returns>
            A <see cref="T:System.Data.DataTable" /> or subclass representing the source.
            </returns>
            <remarks>This operator uses immediate execution.</remarks>
        </member>
        <member name="T:MoreLinq.IListLike`1">
            <summary>
            Represents an list-like (indexable) data structure.
            </summary>
        </member>
        <member name="T:MoreLinq.Lookup`2">
            <summary>
            A <see cref="T:System.Linq.ILookup`2" /> implementation that preserves insertion order
            </summary>
            <typeparam name="TKey">The type of the keys in the <see cref="T:MoreLinq.Lookup`2" /></typeparam>
            <typeparam name="TElement">The type of the elements in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> sequences that make up the values in the <see cref="T:MoreLinq.Lookup`2" /></typeparam>
            <remarks>
            This implementation preserves insertion order of keys and elements within each <see cref="T:System.Collections.Generic.IEnumerable`1" />
            Copied over from CoreFX on 2015-10-27
            https://github.com/dotnet/corefx/blob/6f1c2a86fb8fa1bdaee7c6e70a684d27842d804c/src/System.Linq/src/System/Linq/Enumerable.cs#L3230-L3403
            Modified to remove internal interfaces
            </remarks>
        </member>
        <member name="T:MoreLinq.IExtremaEnumerable`1">
            <summary>
            Exposes the enumerator, which supports iteration over a sequence of
            some extremum property (maximum or minimum) of a specified type.
            </summary>
            <typeparam name="T">The type of objects to enumerate.</typeparam>
        </member>
        <member name="M:MoreLinq.IExtremaEnumerable`1.Take(System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of
            the sequence.
            </summary>
            <param name="count">The number of elements to return.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the specified number
            of elements from the start of the input sequence.
            </returns>
        </member>
        <member name="M:MoreLinq.IExtremaEnumerable`1.TakeLast(System.Int32)">
            <summary>
            Returns a specified number of contiguous elements at the end of the
            sequence.
            </summary>
            <param name="count">The number of elements to return.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the specified number
            of elements at the end of the input sequence.
            </returns>
        </member>
        <member name="T:MoreLinq.OrderByDirection">
            <summary>
            Enumeration that defines values representing valid ordering directions for a sequence.
            </summary>
        </member>
        <member name="F:MoreLinq.OrderByDirection.Ascending">
            <summary>
            Elements are ordered by increasing value
            </summary>
        </member>
        <member name="F:MoreLinq.OrderByDirection.Descending">
            <summary>
            Elements are ordered by decreasing value
            </summary>
        </member>
        <member name="T:MoreLinq.PendNode`1">
            <summary>
            Prepend-Append node is a single linked-list of the discriminated union
            of an item to prepend, an item to append and the source.
            </summary>
        </member>
        <member name="T:MoreLinq.Reactive.Observable">
            <summary>
            Provides a set of static methods for writing in-memory queries over observable sequences.
            </summary>
        </member>
        <member name="M:MoreLinq.Reactive.Observable.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
            <summary>
            Subscribes an element handler and a completion handler to an
            observable sequence.
            </summary>
            <typeparam name="T">Type of elements in <paramref name="source" />.</typeparam>
            <param name="source">Observable sequence to subscribe to.</param>
            <param name="onNext">
            Action to invoke for each element in <paramref name="source" />.</param>
            <param name="onError">
            Action to invoke upon exceptional termination of the
            <paramref name="source" />.</param>
            <param name="onCompleted">
            Action to invoke upon graceful termination of <paramref name="source" />.</param>
            <returns>The subscription, which when disposed, will unsubscribe
            from <paramref name="source" />.</returns>
        </member>
        <member name="T:MoreLinq.SequenceException">
            <summary>
            The exception that is thrown for a sequence that fails a condition.
            </summary>
        </member>
        <member name="M:MoreLinq.SequenceException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MoreLinq.SequenceException" /> class.
            </summary>
        </member>
        <member name="M:MoreLinq.SequenceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MoreLinq.SequenceException" /> class
            with a given error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:MoreLinq.SequenceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MoreLinq.SequenceException" /> class
            with a given error message and a reference to the inner exception
            that is the cause of the exception.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:MoreLinq.SequenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MoreLinq.SequenceException" /> class
            with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Newtonsoft.Json.Bson.BsonObjectId">
            <summary>
            Represents a BSON Oid (object id).
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonObjectId.Value">
            <summary>
            Gets or sets the value of the Oid.
            </summary>
            <value>The value of the Oid.</value>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonObjectId.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonObjectId" /> class.
            </summary>
            <param name="value">The Oid value.</param>
        </member>
        <member name="T:Newtonsoft.Json.Bson.BsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized BSON data.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonReader.JsonNet35BinaryCompatibility">
            <summary>
            Gets or sets a value indicating whether binary data reading should be compatible with incorrect Json.NET 3.5 written binary.
            </summary>
            <value>
                <c>true</c> if binary data reading will be compatible with incorrect Json.NET 3.5 written binary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonReader.ReadRootValueAsArray">
            <summary>
            Gets or sets a value indicating whether the root object will be read as a JSON array.
            </summary>
            <value>
                <c>true</c> if the root object will be read as a JSON array; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonReader.DateTimeKindHandling">
            <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.
            </summary>
            <value>The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</value>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> containing the BSON data to read.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader" /> containing the BSON data to read.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream,System.Boolean,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> containing the BSON data to read.</param>
            <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
            <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader,System.Boolean,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader" /> containing the BSON data to read.</param>
            <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
            <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.Read">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.Stream" />.
            </summary>
            <returns>
                <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.Close">
            <summary>
            Changes the reader's state to <see cref="F:Newtonsoft.Json.JsonReader.State.Closed" />.
            If <see cref="P:Newtonsoft.Json.JsonReader.CloseInput" /> is set to <c>true</c>, the underlying <see cref="T:System.IO.Stream" /> is also closed.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Bson.BsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating BSON data.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonWriter.DateTimeKindHandling">
            <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime" /> values to BSON.
            When set to <see cref="F:System.DateTimeKind.Unspecified" /> no conversion will occur.
            </summary>
            <value>The <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime" /> values to BSON.</value>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonWriter" /> class.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream" /> to write to.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.BinaryWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonWriter" /> class.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter" /> to write to.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying <see cref="T:System.IO.Stream" /> and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the end.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteComment(System.String)">
            <summary>
            Writes a comment <c>/*...*/</c> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRawValue(System.String)">
            <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.Close">
            <summary>
            Closes this writer.
            If <see cref="P:Newtonsoft.Json.JsonWriter.CloseOutput" /> is set to <c>true</c>, the underlying <see cref="T:System.IO.Stream" /> is also closed.
            If <see cref="P:Newtonsoft.Json.JsonWriter.AutoCompleteOnClose" /> is set to <c>true</c>, the JSON is auto-completed.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
            <param name="value">The <see cref="T:System.String" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Single" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Double" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Char" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte" />[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte" />[] value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteObjectId(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte" />[] value that represents a BSON object id.
            </summary>
            <param name="value">The Object ID value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRegex(System.String,System.String)">
            <summary>
            Writes a BSON regex.
            </summary>
            <param name="pattern">The regex pattern.</param>
            <param name="options">The regex options.</param>
        </member>
        <member name="T:Newtonsoft.Json.ConstructorHandling">
            <summary>
            Specifies how constructors are used when initializing objects during deserialization by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ConstructorHandling.Default">
            <summary>
            First attempt to use the public default constructor, then fall back to a single parameterized constructor, then to the non-public default constructor.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ConstructorHandling.AllowNonPublicDefaultConstructor">
            <summary>
            Json.NET will use a non-public default constructor before falling back to a parameterized constructor.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Converters.BinaryConverter">
            <summary>
            Converts a binary value to and from a base 64 string value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BinaryConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
                <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.BsonObjectIdConverter">
            <summary>
            Converts a <see cref="T:Newtonsoft.Json.Bson.BsonObjectId" /> to and from JSON and BSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
                <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.CustomCreationConverter`1">
            <summary>
            Creates a custom object.
            </summary>
            <typeparam name="T">The object type to convert.</typeparam>
        </member>
        <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.Create(System.Type)">
            <summary>
            Creates an object which will then be populated by the serializer.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>The created object.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
                <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
            <value>
                <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Newtonsoft.Json.Converters.DataSetConverter">
            <summary>
            Converts a <see cref="T:System.Data.DataSet" /> to and from JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataSetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataSetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataSetConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
                <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.DataTableConverter">
            <summary>
            Converts a <see cref="T:System.Data.DataTable" /> to and from JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataTableConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataTableConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
                <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.DateTimeConverterBase">
            <summary>
            Provides a base class for converting a <see cref="T:System.DateTime" /> to and from JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DateTimeConverterBase.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
                <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.DiscriminatedUnionConverter">
            <summary>
            Converts a F# discriminated union type to and from JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DiscriminatedUnionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DiscriminatedUnionConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
                <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.EntityKeyMemberConverter">
            <summary>
            Converts an Entity Framework <see cref="T:System.Data.EntityKeyMember" /> to and from JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
                <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.ExpandoObjectConverter">
            <summary>
            Converts an <see cref="T:System.Dynamic.ExpandoObject" /> to and from JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
                <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Converters.ExpandoObjectConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
            <value>
                <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Newtonsoft.Json.Converters.IsoDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime" /> to and from the ISO 8601 date format (e.g. <c>"2008-04-12T12:53Z"</c>).
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeStyles">
            <summary>
            Gets or sets the date time styles used when converting a date to and from JSON.
            </summary>
            <value>The date time styles used when converting a date to and from JSON.</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeFormat">
            <summary>
            Gets or sets the date time format used when converting a date to and from JSON.
            </summary>
            <value>The date time format used when converting a date to and from JSON.</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.Culture">
            <summary>
            Gets or sets the culture used when converting a date to and from JSON.
            </summary>
            <value>The culture used when converting a date to and from JSON.</value>
        </member>
        <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime" /> to and from a JavaScript <c>Date</c> constructor (e.g. <c>new Date(52231943)</c>).
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing property value of the JSON that is being converted.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.KeyValuePairConverter">
            <summary>
            Converts a <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to and from JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
                <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.RegexConverter">
            <summary>
            Converts a <see cref="T:System.Text.RegularExpressions.Regex" /> to and from JSON and BSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.RegexConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.RegexConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.RegexConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
                <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.StringEnumConverter">
            <summary>
            Converts an <see cref="T:System.Enum" /> to and from its name string value.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.StringEnumConverter.CamelCaseText">
            <summary>
            Gets or sets a value indicating whether the written enum text should be camel case.
            The default value is <c>false</c>.
            </summary>
            <value>
                <c>true</c> if the written enum text will be camel case; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.StringEnumConverter.NamingStrategy">
            <summary>
            Gets or sets the naming strategy used to resolve how enum text is written.
            </summary>
            <value>The naming strategy used to resolve how enum text is written.</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.StringEnumConverter.AllowIntegerValues">
            <summary>
            Gets or sets a value indicating whether integer values are allowed when serializing and deserializing.
            The default value is <c>true</c>.
            </summary>
            <value>
                <c>true</c> if integers are allowed when serializing and deserializing; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Converters.StringEnumConverter" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Converters.StringEnumConverter" /> class.
            </summary>
            <param name="camelCaseText">
                <c>true</c> if the written enum text will be camel case; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.#ctor(Newtonsoft.Json.Serialization.NamingStrategy,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Converters.StringEnumConverter" /> class.
            </summary>
            <param name="namingStrategy">The naming strategy used to resolve how enum text is written.</param>
            <param name="allowIntegerValues">
                <c>true</c> if integers are allowed when serializing and deserializing; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Converters.StringEnumConverter" /> class.
            </summary>
            <param name="namingStrategyType">The <see cref="T:System.Type" /> of the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" /> used to write enum text.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.#ctor(System.Type,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Converters.StringEnumConverter" /> class.
            </summary>
            <param name="namingStrategyType">The <see cref="T:System.Type" /> of the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" /> used to write enum text.</param>
            <param name="namingStrategyParameters">
            The parameter list to use when constructing the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" /> described by <paramref name="namingStrategyType" />.
            If <c>null</c>, the default constructor is used.
            When non-<c>null</c>, there must be a constructor defined in the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" /> that exactly matches the number,
            order, and type of these parameters.
            </param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.#ctor(System.Type,System.Object[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Converters.StringEnumConverter" /> class.
            </summary>
            <param name="namingStrategyType">The <see cref="T:System.Type" /> of the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" /> used to write enum text.</param>
            <param name="namingStrategyParameters">
            The parameter list to use when constructing the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" /> described by <paramref name="namingStrategyType" />.
            If <c>null</c>, the default constructor is used.
            When non-<c>null</c>, there must be a constructor defined in the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" /> that exactly matches the number,
            order, and type of these parameters.
            </param>
            <param name="allowIntegerValues">
                <c>true</c> if integers are allowed when serializing and deserializing; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
                <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.UnixDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime" /> to and from Unix epoch time
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.UnixDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.UnixDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing property value of the JSON that is being converted.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.VersionConverter">
            <summary>
            Converts a <see cref="T:System.Version" /> to and from a string (e.g. <c>"1.2.3.4"</c>).
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.VersionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.VersionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing property value of the JSON that is being converted.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.VersionConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
                <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.XmlNodeConverter">
            <summary>
            Converts XML to and from JSON.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeRootElementName">
            <summary>
            Gets or sets the name of the root element to insert when deserializing to XML if the JSON structure has produced multiple root elements.
            </summary>
            <value>The name of the deserialized root element.</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.WriteArrayAttribute">
            <summary>
            Gets or sets a value to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </summary>
            <value>
                <c>true</c> if the array attribute is written to the XML; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.OmitRootObject">
            <summary>
            Gets or sets a value indicating whether to write the root JSON object.
            </summary>
            <value>
                <c>true</c> if the JSON root object is omitted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.EncodeSpecialCharacters">
            <summary>
            Gets or sets a value indicating whether to encode special characters when converting JSON to XML.
            If <c>true</c>, special characters like ':', '@', '?', '#' and '$' in JSON property names aren't used to specify
            XML namespaces, attributes or processing directives. Instead special characters are encoded and written
            as part of the XML element name.
            </summary>
            <value>
                <c>true</c> if special characters are encoded; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="serializer">The calling serializer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(System.String,System.String@)">
            <summary>
            Checks if the <paramref name="attributeName" /> is a namespace attribute.
            </summary>
            <param name="attributeName">Attribute name to test.</param>
            <param name="prefix">The attribute name prefix if it has one, otherwise an empty string.</param>
            <returns>
                <c>true</c> if attribute name is for a namespace attribute, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
                <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.DateFormatHandling">
            <summary>
            Specifies how dates are formatted when writing JSON text.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DateFormatHandling.IsoDateFormat">
            <summary>
            Dates are written in the ISO 8601 format, e.g. <c>"2012-03-21T05:40Z"</c>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DateFormatHandling.MicrosoftDateFormat">
            <summary>
            Dates are written in the Microsoft JSON format, e.g. <c>"\/Date(1198908717056)\/"</c>.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.DateParseHandling">
            <summary>
            Specifies how date formatted strings, e.g. <c>"\/Date(1198908717056)\/"</c> and <c>"2012-03-21T05:40Z"</c>, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DateParseHandling.None">
            <summary>
            Date formatted strings are not parsed to a date type and are read as strings.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DateParseHandling.DateTime">
            <summary>
            Date formatted strings, e.g. <c>"\/Date(1198908717056)\/"</c> and <c>"2012-03-21T05:40Z"</c>, are parsed to <see cref="T:System.DateTime" />.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DateParseHandling.DateTimeOffset">
            <summary>
            Date formatted strings, e.g. <c>"\/Date(1198908717056)\/"</c> and <c>"2012-03-21T05:40Z"</c>, are parsed to <see cref="T:System.DateTimeOffset" />.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.DateTimeZoneHandling">
            <summary>
            Specifies how to treat the time value when converting between string and <see cref="T:System.DateTime" />.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Local">
            <summary>
            Treat as local time. If the <see cref="T:System.DateTime" /> object represents a Coordinated Universal Time (UTC), it is converted to the local time.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Utc">
            <summary>
            Treat as a UTC. If the <see cref="T:System.DateTime" /> object represents a local time, it is converted to a UTC.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Unspecified">
            <summary>
            Treat as a local time if a <see cref="T:System.DateTime" /> is being converted to a string.
            If a string is being converted to <see cref="T:System.DateTime" />, convert to a local time if a time zone is specified.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DateTimeZoneHandling.RoundtripKind">
            <summary>
            Time zone information should be preserved when converting.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.DefaultJsonNameTable">
            <summary>
            The default JSON name table implementation.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.DefaultJsonNameTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.DefaultJsonNameTable" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.DefaultJsonNameTable.Get(System.Char[],System.Int32,System.Int32)">
            <summary>
            Gets a string containing the same characters as the specified range of characters in the given array.
            </summary>
            <param name="key">The character array containing the name to find.</param>
            <param name="start">The zero-based index into the array specifying the first character of the name.</param>
            <param name="length">The number of characters in the name.</param>
            <returns>A string containing the same characters as the specified range of characters in the given array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.DefaultJsonNameTable.Add(System.String)">
            <summary>
            Adds the specified string into name table.
            </summary>
            <param name="key">The string to add.</param>
            <remarks>This method is not thread-safe.</remarks>
            <returns>The resolved string.</returns>
        </member>
        <member name="T:Newtonsoft.Json.DefaultValueHandling">
            <summary>
            Specifies default value handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
            <example>
                <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingObject" title="DefaultValueHandling Class" />
                <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingExample" title="DefaultValueHandling Ignore Example" />
            </example>
        </member>
        <member name="F:Newtonsoft.Json.DefaultValueHandling.Include">
            <summary>
            Include members where the member value is the same as the member's default value when serializing objects.
            Included members are written to JSON. Has no effect when deserializing.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DefaultValueHandling.Ignore">
            <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            so that it is not written to JSON.
            This option will ignore all default values (e.g. <c>null</c> for objects and nullable types; <c>0</c> for integers,
            decimals and floating point numbers; and <c>false</c> for booleans). The default value ignored can be changed by
            placing the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> on the property.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DefaultValueHandling.Populate">
            <summary>
            Members with a default value but no JSON will be set to their default value when deserializing.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DefaultValueHandling.IgnoreAndPopulate">
            <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            and set members to their default value when deserializing.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.FloatFormatHandling">
            <summary>
            Specifies float format handling options when writing special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" /> with <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.FloatFormatHandling.String">
            <summary>
            Write special floating point values as strings in JSON, e.g. <c>"NaN"</c>, <c>"Infinity"</c>, <c>"-Infinity"</c>.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.FloatFormatHandling.Symbol">
            <summary>
            Write special floating point values as symbols in JSON, e.g. <c>NaN</c>, <c>Infinity</c>, <c>-Infinity</c>.
            Note that this will produce non-valid JSON.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.FloatFormatHandling.DefaultValue">
            <summary>
            Write special floating point values as the property's default value in JSON, e.g. 0.0 for a <see cref="T:System.Double" /> property, <c>null</c> for a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> property.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.FloatParseHandling">
            <summary>
            Specifies how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.FloatParseHandling.Double">
            <summary>
            Floating point numbers are parsed to <see cref="F:Newtonsoft.Json.FloatParseHandling.Double" />.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.FloatParseHandling.Decimal">
            <summary>
            Floating point numbers are parsed to <see cref="F:Newtonsoft.Json.FloatParseHandling.Decimal" />.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Formatting">
            <summary>
            Specifies formatting options for the <see cref="T:Newtonsoft.Json.JsonTextWriter" />.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Formatting.None">
            <summary>
            No special formatting is applied. This is the default.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Formatting.Indented">
            <summary>
            Causes child objects to be indented according to the <see cref="P:Newtonsoft.Json.JsonTextWriter.Indentation" /> and <see cref="P:Newtonsoft.Json.JsonTextWriter.IndentChar" /> settings.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.IArrayPool`1">
            <summary>
            Provides an interface for using pooled arrays.
            </summary>
            <typeparam name="T">The array type content.</typeparam>
        </member>
        <member name="M:Newtonsoft.Json.IArrayPool`1.Rent(System.Int32)">
            <summary>
            Rent an array from the pool. This array must be returned when it is no longer needed.
            </summary>
            <param name="minimumLength">The minimum required length of the array. The returned array may be longer.</param>
            <returns>The rented array from the pool. This array must be returned when it is no longer needed.</returns>
        </member>
        <member name="M:Newtonsoft.Json.IArrayPool`1.Return(`0[])">
            <summary>
            Return an array to the pool.
            </summary>
            <param name="array">The array that is being returned.</param>
        </member>
        <member name="T:Newtonsoft.Json.IJsonLineInfo">
            <summary>
            Provides an interface to enable a class to return line and position information.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.IJsonLineInfo.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
            <returns>
                <c>true</c> if <see cref="P:Newtonsoft.Json.IJsonLineInfo.LineNumber" /> and <see cref="P:Newtonsoft.Json.IJsonLineInfo.LinePosition" /> can be provided; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.IJsonLineInfo.LineNumber">
            <summary>
            Gets the current line number.
            </summary>
            <value>The current line number or 0 if no line information is available (for example, when <see cref="M:Newtonsoft.Json.IJsonLineInfo.HasLineInfo" /> returns <c>false</c>).</value>
        </member>
        <member name="P:Newtonsoft.Json.IJsonLineInfo.LinePosition">
            <summary>
            Gets the current line position.
            </summary>
            <value>The current line position or 0 if no line information is available (for example, when <see cref="M:Newtonsoft.Json.IJsonLineInfo.HasLineInfo" /> returns <c>false</c>).</value>
        </member>
        <member name="T:Newtonsoft.Json.JsonArrayAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the collection.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonArrayAttribute.AllowNullItems">
            <summary>
            Gets or sets a value indicating whether null items are allowed in the collection.
            </summary>
            <value>
                <c>true</c> if null items are allowed in the collection; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonArrayAttribute" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with a flag indicating whether the array can contain null items.
            </summary>
            <param name="allowNullItems">A flag indicating whether the array can contain null items.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonArrayAttribute" /> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonConstructorAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to use the specified constructor when deserializing that object.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonContainerAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the object.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemConverterType">
            <summary>
            Gets or sets the collection's items converter.
            </summary>
            <value>The collection's items converter.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemConverterParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:Newtonsoft.Json.JsonConverter" /> described by <see cref="P:Newtonsoft.Json.JsonContainerAttribute.ItemConverterType" />.
            If <c>null</c>, the default constructor is used.
            When non-<c>null</c>, there must be a constructor defined in the <see cref="T:Newtonsoft.Json.JsonConverter" /> that exactly matches the number,
            order, and type of these parameters.
            </summary>
            <example>
                <code>
            [JsonContainer(ItemConverterType = typeof(MyContainerConverter), ItemConverterParameters = new object[] { 123, "Four" })]
            </code>
            </example>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.NamingStrategyType">
            <summary>
            Gets or sets the <see cref="T:System.Type" /> of the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" />.
            </summary>
            <value>The <see cref="T:System.Type" /> of the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" />.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.NamingStrategyParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" /> described by <see cref="P:Newtonsoft.Json.JsonContainerAttribute.NamingStrategyType" />.
            If <c>null</c>, the default constructor is used.
            When non-<c>null</c>, there must be a constructor defined in the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" /> that exactly matches the number,
            order, and type of these parameters.
            </summary>
            <example>
                <code>
            [JsonContainer(NamingStrategyType = typeof(MyNamingStrategy), NamingStrategyParameters = new object[] { 123, "Four" })]
            </code>
            </example>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.IsReference">
            <summary>
            Gets or sets a value that indicates whether to preserve object references.
            </summary>
            <value>
                <c>true</c> to keep object reference; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemIsReference">
            <summary>
            Gets or sets a value that indicates whether to preserve collection's items references.
            </summary>
            <value>
                <c>true</c> to keep collection's items object references; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing the collection's items.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemTypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing the collection's items.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonContainerAttribute" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonContainerAttribute" /> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonConvert">
            <summary>
            Provides methods for converting between .NET types and JSON types.
            </summary>
            <example>
                <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="SerializeObject" title="Serializing and Deserializing JSON with JsonConvert" />
            </example>
        </member>
        <member name="P:Newtonsoft.Json.JsonConvert.DefaultSettings">
            <summary>
            Gets or sets a function that creates default <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            Default settings are automatically used by serialization methods on <see cref="T:Newtonsoft.Json.JsonConvert" />,
            and <see cref="M:Newtonsoft.Json.Linq.JToken.ToObject``1" /> and <see cref="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object)" /> on <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            To serialize without using any default settings create a <see cref="T:Newtonsoft.Json.JsonSerializer" /> with
            <see cref="M:Newtonsoft.Json.JsonSerializer.Create" />.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.True">
            <summary>
            Represents JavaScript's boolean value <c>true</c> as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.False">
            <summary>
            Represents JavaScript's boolean value <c>false</c> as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.Null">
            <summary>
            Represents JavaScript's <c>null</c> as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.Undefined">
            <summary>
            Represents JavaScript's <c>undefined</c> as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.PositiveInfinity">
            <summary>
            Represents JavaScript's positive infinity as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.NegativeInfinity">
            <summary>
            Represents JavaScript's negative infinity as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.NaN">
            <summary>
            Represents JavaScript's <c>NaN</c> as a string. This field is read-only.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTime)">
            <summary>
            Converts the <see cref="T:System.DateTime" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTime" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTime,Newtonsoft.Json.DateFormatHandling,Newtonsoft.Json.DateTimeZoneHandling)">
            <summary>
            Converts the <see cref="T:System.DateTime" /> to its JSON string representation using the <see cref="T:Newtonsoft.Json.DateFormatHandling" /> specified.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">The format the date will be converted to.</param>
            <param name="timeZoneHandling">The time zone handling when the date is converted to a string.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTime" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset)">
            <summary>
            Converts the <see cref="T:System.DateTimeOffset" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset,Newtonsoft.Json.DateFormatHandling)">
            <summary>
            Converts the <see cref="T:System.DateTimeOffset" /> to its JSON string representation using the <see cref="T:Newtonsoft.Json.DateFormatHandling" /> specified.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">The format the date will be converted to.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Boolean)">
            <summary>
            Converts the <see cref="T:System.Boolean" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Boolean" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Char)">
            <summary>
            Converts the <see cref="T:System.Char" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Char" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Enum)">
            <summary>
            Converts the <see cref="T:System.Enum" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Enum" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int32)">
            <summary>
            Converts the <see cref="T:System.Int32" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int32" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int16)">
            <summary>
            Converts the <see cref="T:System.Int16" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int16" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt16)">
            <summary>
            Converts the <see cref="T:System.UInt16" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt16" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt32)">
            <summary>
            Converts the <see cref="T:System.UInt32" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt32" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int64)">
            <summary>
            Converts the <see cref="T:System.Int64" />  to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int64" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt64)">
            <summary>
            Converts the <see cref="T:System.UInt64" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt64" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Single)">
            <summary>
            Converts the <see cref="T:System.Single" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Single" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Double)">
            <summary>
            Converts the <see cref="T:System.Double" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Double" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Byte)">
            <summary>
            Converts the <see cref="T:System.Byte" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Byte" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.SByte)">
            <summary>
            Converts the <see cref="T:System.SByte" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.SByte" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Decimal)">
            <summary>
            Converts the <see cref="T:System.Decimal" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Decimal" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Guid)">
            <summary>
            Converts the <see cref="T:System.Guid" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Guid" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.TimeSpan)">
            <summary>
            Converts the <see cref="T:System.TimeSpan" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.TimeSpan" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Uri)">
            <summary>
            Converts the <see cref="T:System.Uri" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Uri" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String)">
            <summary>
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char)">
            <summary>
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="delimiter">The string delimiter character.</param>
            <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char,Newtonsoft.Json.StringEscapeHandling)">
            <summary>
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="delimiter">The string delimiter character.</param>
            <param name="stringEscapeHandling">The string escape handling.</param>
            <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Object)">
            <summary>
            Converts the <see cref="T:System.Object" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Object" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object)">
            <summary>
            Serializes the specified object to a JSON string.
            </summary>
            <param name="value">The object to serialize.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting)">
            <summary>
            Serializes the specified object to a JSON string using formatting.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="converters">A collection of converters used while serializing.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Serializes the specified object to a JSON string using formatting and a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <param name="converters">A collection of converters used while serializing.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.</param>
            <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> is <see cref="F:Newtonsoft.Json.TypeNameHandling.Auto" /> to write out the type name if the type of the value does not match.
            Specifying the type is optional.
            </param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using formatting and <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.</param>
            <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> is <see cref="F:Newtonsoft.Json.TypeNameHandling.Auto" /> to write out the type name if the type of the value does not match.
            Specifying the type is optional.
            </param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String)">
            <summary>
            Deserializes the JSON to a .NET object.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to a .NET object using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The <see cref="T:System.Type" /> of object being deserialized.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0)">
            <summary>
            Deserializes the JSON to the given anonymous type.
            </summary>
            <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be inferred from the anonymous type passed
            as a parameter.
            </typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="anonymousTypeObject">The anonymous type object.</param>
            <returns>The deserialized anonymous type from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the given anonymous type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be inferred from the anonymous type passed
            as a parameter.
            </typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="anonymousTypeObject">The anonymous type object.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
            <returns>The deserialized anonymous type from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The object to deserialize.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize to.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object)">
            <summary>
            Populates the object with values from the JSON string.
            </summary>
            <param name="value">The JSON to populate values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Populates the object with values from the JSON string using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="value">The JSON to populate values from.</param>
            <param name="target">The target object to populate values onto.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode)">
            <summary>
            Serializes the <see cref="T:System.Xml.XmlNode" /> to a JSON string.
            </summary>
            <param name="node">The node to serialize.</param>
            <returns>A JSON string of the <see cref="T:System.Xml.XmlNode" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Newtonsoft.Json.Formatting)">
            <summary>
            Serializes the <see cref="T:System.Xml.XmlNode" /> to a JSON string using formatting.
            </summary>
            <param name="node">The node to serialize.</param>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <returns>A JSON string of the <see cref="T:System.Xml.XmlNode" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Newtonsoft.Json.Formatting,System.Boolean)">
            <summary>
            Serializes the <see cref="T:System.Xml.XmlNode" /> to a JSON string using formatting and omits the root object if <paramref name="omitRootObject" /> is <c>true</c>.
            </summary>
            <param name="node">The node to serialize.</param>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <param name="omitRootObject">Omits writing the root object.</param>
            <returns>A JSON string of the <see cref="T:System.Xml.XmlNode" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String)">
            <summary>
            Deserializes the <see cref="T:System.Xml.XmlNode" /> from a JSON string.
            </summary>
            <param name="value">The JSON string.</param>
            <returns>The deserialized <see cref="T:System.Xml.XmlNode" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String)">
            <summary>
            Deserializes the <see cref="T:System.Xml.XmlNode" /> from a JSON string nested in a root element specified by <paramref name="deserializeRootElementName" />.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <returns>The deserialized <see cref="T:System.Xml.XmlNode" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String,System.Boolean)">
            <summary>
            Deserializes the <see cref="T:System.Xml.XmlNode" /> from a JSON string nested in a root element specified by <paramref name="deserializeRootElementName" />
            and writes a Json.NET array attribute for collections.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <param name="writeArrayAttribute">
            A value to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
            <returns>The deserialized <see cref="T:System.Xml.XmlNode" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Deserializes the <see cref="T:System.Xml.XmlNode" /> from a JSON string nested in a root element specified by <paramref name="deserializeRootElementName" />,
            writes a Json.NET array attribute for collections, and encodes special characters.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <param name="writeArrayAttribute">
            A value to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
            <param name="encodeSpecialCharacters">
            A value to indicate whether to encode special characters when converting JSON to XML.
            If <c>true</c>, special characters like ':', '@', '?', '#' and '$' in JSON property names aren't used to specify
            XML namespaces, attributes or processing directives. Instead special characters are encoded and written
            as part of the XML element name.
            </param>
            <returns>The deserialized <see cref="T:System.Xml.XmlNode" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject)">
            <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode" /> to a JSON string.
            </summary>
            <param name="node">The node to convert to JSON.</param>
            <returns>A JSON string of the <see cref="T:System.Xml.Linq.XNode" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Newtonsoft.Json.Formatting)">
            <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode" /> to a JSON string using formatting.
            </summary>
            <param name="node">The node to convert to JSON.</param>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <returns>A JSON string of the <see cref="T:System.Xml.Linq.XNode" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Newtonsoft.Json.Formatting,System.Boolean)">
            <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode" /> to a JSON string using formatting and omits the root object if <paramref name="omitRootObject" /> is <c>true</c>.
            </summary>
            <param name="node">The node to serialize.</param>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <param name="omitRootObject">Omits writing the root object.</param>
            <returns>A JSON string of the <see cref="T:System.Xml.Linq.XNode" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String)">
            <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string.
            </summary>
            <param name="value">The JSON string.</param>
            <returns>The deserialized <see cref="T:System.Xml.Linq.XNode" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String)">
            <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string nested in a root element specified by <paramref name="deserializeRootElementName" />.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <returns>The deserialized <see cref="T:System.Xml.Linq.XNode" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String,System.Boolean)">
            <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string nested in a root element specified by <paramref name="deserializeRootElementName" />
            and writes a Json.NET array attribute for collections.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <param name="writeArrayAttribute">
            A value to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
            <returns>The deserialized <see cref="T:System.Xml.Linq.XNode" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string nested in a root element specified by <paramref name="deserializeRootElementName" />,
            writes a Json.NET array attribute for collections, and encodes special characters.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <param name="writeArrayAttribute">
            A value to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
            <param name="encodeSpecialCharacters">
            A value to indicate whether to encode special characters when converting JSON to XML.
            If <c>true</c>, special characters like ':', '@', '?', '#' and '$' in JSON property names aren't used to specify
            XML namespaces, attributes or processing directives. Instead special characters are encoded and written
            as part of the XML element name.
            </param>
            <returns>The deserialized <see cref="T:System.Xml.Linq.XNode" />.</returns>
        </member>
        <member name="T:Newtonsoft.Json.JsonConverter">
            <summary>
            Converts an object to and from JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
                <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.JsonConverter.CanRead">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON.
            </summary>
            <value>
                <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
            <value>
                <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Newtonsoft.Json.JsonConverter`1">
            <summary>
            Converts an object to and from JSON.
            </summary>
            <typeparam name="T">The object type to convert.</typeparam>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,`0,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,`0,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read. If there is no existing value then <c>null</c> will be used.</param>
            <param name="hasExistingValue">The existing value has a value.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter`1.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
                <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.JsonConverterAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to use the specified <see cref="T:Newtonsoft.Json.JsonConverter" /> when serializing the member or class.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonConverterAttribute.ConverterType">
            <summary>
            Gets the <see cref="T:System.Type" /> of the <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
            <value>The <see cref="T:System.Type" /> of the <see cref="T:Newtonsoft.Json.JsonConverter" />.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonConverterAttribute.ConverterParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:Newtonsoft.Json.JsonConverter" /> described by <see cref="P:Newtonsoft.Json.JsonConverterAttribute.ConverterType" />.
            If <c>null</c>, the default constructor is used.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonConverterAttribute" /> class.
            </summary>
            <param name="converterType">Type of the <see cref="T:Newtonsoft.Json.JsonConverter" />.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonConverterAttribute" /> class.
            </summary>
            <param name="converterType">Type of the <see cref="T:Newtonsoft.Json.JsonConverter" />.</param>
            <param name="converterParameters">Parameter list to use when constructing the <see cref="T:Newtonsoft.Json.JsonConverter" />. Can be <c>null</c>.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonConverterCollection">
            <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonDictionaryAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the collection.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonDictionaryAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonDictionaryAttribute" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonDictionaryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonDictionaryAttribute" /> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonException">
            <summary>
            The exception thrown when an error occurs during JSON serialization or deserialization.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
        </member>
        <member name="T:Newtonsoft.Json.JsonExtensionDataAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to deserialize properties with no matching class member into the specified collection
            and write values during serialization.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonExtensionDataAttribute.WriteData">
            <summary>
            Gets or sets a value that indicates whether to write extension data when serializing the object.
            </summary>
            <value>
                <c>true</c> to write extension data when serializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonExtensionDataAttribute.ReadData">
            <summary>
            Gets or sets a value that indicates whether to read extension data when deserializing the object.
            </summary>
            <value>
                <c>true</c> to read extension data when deserializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.JsonExtensionDataAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonExtensionDataAttribute" /> class.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonIgnoreAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> not to serialize the public field or public read/write property value.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonNameTable">
            <summary>
            Base class for a table of atomized string objects.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonNameTable.Get(System.Char[],System.Int32,System.Int32)">
            <summary>
            Gets a string containing the same characters as the specified range of characters in the given array.
            </summary>
            <param name="key">The character array containing the name to find.</param>
            <param name="start">The zero-based index into the array specifying the first character of the name.</param>
            <param name="length">The number of characters in the name.</param>
            <returns>A string containing the same characters as the specified range of characters in the given array.</returns>
        </member>
        <member name="T:Newtonsoft.Json.JsonObjectAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the object.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonObjectAttribute.MemberSerialization">
            <summary>
            Gets or sets the member serialization.
            </summary>
            <value>The member serialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonObjectAttribute.MissingMemberHandling">
            <summary>
            Gets or sets the missing member handling used when deserializing this object.
            </summary>
            <value>The missing member handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonObjectAttribute.ItemNullValueHandling">
            <summary>
            Gets or sets how the object's properties with null values are handled during serialization and deserialization.
            </summary>
            <value>How the object's properties with null values are handled during serialization and deserialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonObjectAttribute.ItemRequired">
            <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
            <value>
            	A value indicating whether the object's properties are required.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(Newtonsoft.Json.MemberSerialization)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with the specified member serialization.
            </summary>
            <param name="memberSerialization">The member serialization.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonPropertyAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to always serialize the member with the specified name.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemConverterType">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.JsonConverter" /> type used when serializing the property's collection items.
            </summary>
            <value>The collection's items <see cref="T:Newtonsoft.Json.JsonConverter" /> type.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemConverterParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:Newtonsoft.Json.JsonConverter" /> described by <see cref="P:Newtonsoft.Json.JsonPropertyAttribute.ItemConverterType" />.
            If <c>null</c>, the default constructor is used.
            When non-<c>null</c>, there must be a constructor defined in the <see cref="T:Newtonsoft.Json.JsonConverter" /> that exactly matches the number,
            order, and type of these parameters.
            </summary>
            <example>
                <code>
            [JsonProperty(ItemConverterType = typeof(MyContainerConverter), ItemConverterParameters = new object[] { 123, "Four" })]
            </code>
            </example>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.NamingStrategyType">
            <summary>
            Gets or sets the <see cref="T:System.Type" /> of the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" />.
            </summary>
            <value>The <see cref="T:System.Type" /> of the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" />.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.NamingStrategyParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" /> described by <see cref="P:Newtonsoft.Json.JsonPropertyAttribute.NamingStrategyType" />.
            If <c>null</c>, the default constructor is used.
            When non-<c>null</c>, there must be a constructor defined in the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" /> that exactly matches the number,
            order, and type of these parameters.
            </summary>
            <example>
                <code>
            [JsonProperty(NamingStrategyType = typeof(MyNamingStrategy), NamingStrategyParameters = new object[] { 123, "Four" })]
            </code>
            </example>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.NullValueHandling">
            <summary>
            Gets or sets the null value handling used when serializing this property.
            </summary>
            <value>The null value handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.DefaultValueHandling">
            <summary>
            Gets or sets the default value handling used when serializing this property.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing this property.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ObjectCreationHandling">
            <summary>
            Gets or sets the object creation handling used when deserializing this property.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.TypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing this property.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.IsReference">
            <summary>
            Gets or sets whether this property's value is serialized as a reference.
            </summary>
            <value>Whether this property's value is serialized as a reference.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.Order">
            <summary>
            Gets or sets the order of serialization of a member.
            </summary>
            <value>The numeric order of serialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.Required">
            <summary>
            Gets or sets a value indicating whether this property is required.
            </summary>
            <value>
            	A value indicating whether this property is required.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items reference loop handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemTypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items type name handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemIsReference">
            <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
            <value>Whether this property's collection items are serialized as a reference.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> class with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized JSON data.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.SkipAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously skips the children of the current token.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsBooleanAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns the <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsBytesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Byte" />[].
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns the <see cref="T:System.Byte" />[]. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTimeAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns the <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTimeOffsetAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns the <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDecimalAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns the <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDoubleAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns the <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsInt32Async(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns the <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsStringAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.String" />.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns the <see cref="T:System.String" />. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="T:Newtonsoft.Json.JsonReader.State">
            <summary>
            Specifies the state of the reader.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Start">
            <summary>
            A <see cref="T:Newtonsoft.Json.JsonReader" /> read method has not been called.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Complete">
            <summary>
            The end of the file has been reached successfully.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Property">
            <summary>
            Reader is at a property.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.ObjectStart">
            <summary>
            Reader is at the start of an object.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Object">
            <summary>
            Reader is in an object.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.ArrayStart">
            <summary>
            Reader is at the start of an array.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Array">
            <summary>
            Reader is in an array.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Closed">
            <summary>
            The <see cref="M:Newtonsoft.Json.JsonReader.Close" /> method has been called.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.PostValue">
            <summary>
            Reader has just read a value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.ConstructorStart">
            <summary>
            Reader is at the start of a constructor.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Constructor">
            <summary>
            Reader is in a constructor.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Error">
            <summary>
            An error occurred that prevents the read operation from continuing.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Finished">
            <summary>
            The end of the file has been reached successfully.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.CurrentState">
            <summary>
            Gets the current reader state.
            </summary>
            <value>The current reader state.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.CloseInput">
            <summary>
            Gets or sets a value indicating whether the source should be closed when this reader is closed.
            </summary>
            <value>
                <c>true</c> to close the source when this reader is closed; otherwise <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.SupportMultipleContent">
            <summary>
            Gets or sets a value indicating whether multiple pieces of JSON content can
            be read from a continuous stream without erroring.
            </summary>
            <value>
                <c>true</c> to support reading multiple pieces of JSON content; otherwise <c>false</c>.
            The default is <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.DateTimeZoneHandling">
            <summary>
            Gets or sets how <see cref="T:System.DateTime" /> time zones are handled when reading JSON.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.DateParseHandling">
            <summary>
            Gets or sets how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.FloatParseHandling">
            <summary>
            Gets or sets how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.DateFormatString">
            <summary>
            Gets or sets how custom date formatted strings are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Newtonsoft.Json.JsonReaderException" />.
            A null value means there is no maximum. 
            The default value is <c>128</c>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.TokenType">
            <summary>
            Gets the type of the current JSON token. 
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.Value">
            <summary>
            Gets the text value of the current JSON token.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.ValueType">
            <summary>
            Gets the .NET type for the current JSON token.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.Depth">
            <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
            <value>The depth of the current token in the JSON document.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.Path">
            <summary>
            Gets the path of the current JSON token. 
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.Culture">
            <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReader" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Read">
            <summary>
            Reads the next JSON token from the source.
            </summary>
            <returns>
                <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsString">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.String" />.
            </summary>
            <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Byte" />[].
            </summary>
            <returns>A <see cref="T:System.Byte" />[] or <c>null</c> if the next JSON token is null. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDouble">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsBoolean">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Skip">
            <summary>
            Skips the children of the current token.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken)">
            <summary>
            Sets the current token.
            </summary>
            <param name="newToken">The new token.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken,System.Object)">
            <summary>
            Sets the current token and value.
            </summary>
            <param name="newToken">The new token.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken,System.Object,System.Boolean)">
            <summary>
            Sets the current token and value.
            </summary>
            <param name="newToken">The new token.</param>
            <param name="value">The value.</param>
            <param name="updateIndex">A flag indicating whether the position index inside an array should be updated.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.SetStateBasedOnCurrent">
            <summary>
            Sets the state based on current token type.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Close">
            <summary>
            Changes the reader's state to <see cref="F:Newtonsoft.Json.JsonReader.State.Closed" />.
            If <see cref="P:Newtonsoft.Json.JsonReader.CloseInput" /> is set to <c>true</c>, the source is also closed.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonReaderException">
            <summary>
            The exception thrown when an error occurs while reading JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReaderException.LineNumber">
            <summary>
            Gets the line number indicating where the error occurred.
            </summary>
            <value>The line number indicating where the error occurred.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReaderException.LinePosition">
            <summary>
            Gets the line position indicating where the error occurred.
            </summary>
            <value>The line position indicating where the error occurred.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReaderException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.String,System.Int32,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class
            with a specified error message, JSON path, line number, line position, and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="path">The path to the JSON where the error occurred.</param>
            <param name="lineNumber">The line number indicating where the error occurred.</param>
            <param name="linePosition">The line position indicating where the error occurred.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonRequiredAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to always serialize the member, and to require that the member has a value.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonSerializationException">
            <summary>
            The exception thrown when an error occurs during JSON serialization or deserialization.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializationException.LineNumber">
            <summary>
            Gets the line number indicating where the error occurred.
            </summary>
            <value>The line number indicating where the error occurred.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializationException.LinePosition">
            <summary>
            Gets the line position indicating where the error occurred.
            </summary>
            <value>The line position indicating where the error occurred.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializationException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String,System.String,System.Int32,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class
            with a specified error message, JSON path, line number, line position, and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="path">The path to the JSON where the error occurred.</param>
            <param name="lineNumber">The line number indicating where the error occurred.</param>
            <param name="linePosition">The line position indicating where the error occurred.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonSerializer">
            <summary>
            Serializes and deserializes objects into and from the JSON format.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> enables you to control how objects are encoded into JSON.
            </summary>
        </member>
        <member name="E:Newtonsoft.Json.JsonSerializer.Error">
            <summary>
            Occurs when the <see cref="T:Newtonsoft.Json.JsonSerializer" /> errors during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceResolver">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> used by the serializer when resolving references.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Binder">
            <summary>
            Gets or sets the <see cref="P:Newtonsoft.Json.JsonSerializer.SerializationBinder" /> used by the serializer when resolving type names.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.SerializationBinder">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.ISerializationBinder" /> used by the serializer when resolving type names.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.TraceWriter">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.ITraceWriter" /> used by the serializer when writing trace messages.
            </summary>
            <value>The trace writer.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.EqualityComparer">
            <summary>
            Gets or sets the equality comparer used by the serializer when comparing references.
            </summary>
            <value>The equality comparer.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling">
            <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            The default value is <see cref="F:Newtonsoft.Json.TypeNameHandling.None" />.
            </summary>
            <remarks>
                <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> should be used with caution when your application deserializes JSON from an external source.
            Incoming types should be validated with a custom <see cref="P:Newtonsoft.Json.JsonSerializer.SerializationBinder" />
            when deserializing with a value other than <see cref="F:Newtonsoft.Json.TypeNameHandling.None" />.
            </remarks>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameAssemblyFormat">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            The default value is <see cref="F:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle.Simple" />.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameAssemblyFormatHandling">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            The default value is <see cref="F:Newtonsoft.Json.TypeNameAssemblyFormatHandling.Simple" />.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.PreserveReferencesHandling">
            <summary>
            Gets or sets how object references are preserved by the serializer.
            The default value is <see cref="F:Newtonsoft.Json.PreserveReferencesHandling.None" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceLoopHandling">
            <summary>
            Gets or sets how reference loops (e.g. a class referencing itself) is handled.
            The default value is <see cref="F:Newtonsoft.Json.ReferenceLoopHandling.Error" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.MissingMemberHandling">
            <summary>
            Gets or sets how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            The default value is <see cref="F:Newtonsoft.Json.MissingMemberHandling.Ignore" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.NullValueHandling">
            <summary>
            Gets or sets how null values are handled during serialization and deserialization.
            The default value is <see cref="F:Newtonsoft.Json.NullValueHandling.Include" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.DefaultValueHandling">
            <summary>
            Gets or sets how default values are handled during serialization and deserialization.
            The default value is <see cref="F:Newtonsoft.Json.DefaultValueHandling.Include" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ObjectCreationHandling">
            <summary>
            Gets or sets how objects are created during deserialization.
            The default value is <see cref="F:Newtonsoft.Json.ObjectCreationHandling.Auto" />.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ConstructorHandling">
            <summary>
            Gets or sets how constructors are used during deserialization.
            The default value is <see cref="F:Newtonsoft.Json.ConstructorHandling.Default" />.
            </summary>
            <value>The constructor handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.MetadataPropertyHandling">
            <summary>
            Gets or sets how metadata properties are used during deserialization.
            The default value is <see cref="F:Newtonsoft.Json.MetadataPropertyHandling.Default" />.
            </summary>
            <value>The metadata properties handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Converters">
            <summary>
            Gets a collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.
            </summary>
            <value>Collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ContractResolver">
            <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Context">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" /> used by the serializer when invoking serialization callback methods.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Formatting">
            <summary>
            Indicates how JSON text output is formatted.
            The default value is <see cref="F:Newtonsoft.Json.Formatting.None" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.DateFormatHandling">
            <summary>
            Gets or sets how dates are written to JSON text.
            The default value is <see cref="F:Newtonsoft.Json.DateFormatHandling.IsoDateFormat" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.DateTimeZoneHandling">
            <summary>
            Gets or sets how <see cref="T:System.DateTime" /> time zones are handled during serialization and deserialization.
            The default value is <see cref="F:Newtonsoft.Json.DateTimeZoneHandling.RoundtripKind" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.DateParseHandling">
            <summary>
            Gets or sets how date formatted strings, e.g. <c>"\/Date(1198908717056)\/"</c> and <c>"2012-03-21T05:40Z"</c>, are parsed when reading JSON.
            The default value is <see cref="F:Newtonsoft.Json.DateParseHandling.DateTime" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.FloatParseHandling">
            <summary>
            Gets or sets how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            The default value is <see cref="F:Newtonsoft.Json.FloatParseHandling.Double" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.FloatFormatHandling">
            <summary>
            Gets or sets how special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" />,
            are written as JSON text.
            The default value is <see cref="F:Newtonsoft.Json.FloatFormatHandling.String" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.StringEscapeHandling">
            <summary>
            Gets or sets how strings are escaped when writing JSON text.
            The default value is <see cref="F:Newtonsoft.Json.StringEscapeHandling.Default" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.DateFormatString">
            <summary>
            Gets or sets how <see cref="T:System.DateTime" /> and <see cref="T:System.DateTimeOffset" /> values are formatted when writing JSON text,
            and the expected date format when reading JSON text.
            The default value is <c>"yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK"</c>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Culture">
            <summary>
            Gets or sets the culture used when reading JSON.
            The default value is <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Newtonsoft.Json.JsonReaderException" />.
            A null value means there is no maximum.
            The default value is <c>128</c>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.CheckAdditionalContent">
            <summary>
            Gets a value indicating whether there will be a check for additional JSON content after deserializing an object.
            The default value is <c>false</c>.
            </summary>
            <value>
                <c>true</c> if there will be a check for additional JSON content after deserializing an object; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializer" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Create">
            <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will not use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings" />.
            </summary>
            <returns>
            A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will not use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings" />.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Create(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will not use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings" />.
            </summary>
            <param name="settings">The settings to be applied to the <see cref="T:Newtonsoft.Json.JsonSerializer" />.</param>
            <returns>
            A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will not use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings" />.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.CreateDefault">
            <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings" />.
            </summary>
            <returns>
            A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings" />.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.CreateDefault(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings" /> as well as the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="settings">The settings to be applied to the <see cref="T:Newtonsoft.Json.JsonSerializer" />.</param>
            <returns>
            A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings" /> as well as the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Populate(System.IO.TextReader,System.Object)">
            <summary>
            Populates the JSON values onto the target object.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader" /> that contains the JSON structure to read values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Populate(Newtonsoft.Json.JsonReader,System.Object)">
            <summary>
            Populates the JSON values onto the target object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> that contains the JSON structure to read values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> that contains the JSON structure to deserialize.</param>
            <returns>The <see cref="T:System.Object" /> being deserialized.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(System.IO.TextReader,System.Type)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:System.IO.TextReader" />
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader" /> containing the object.</param>
            <param name="objectType">The <see cref="T:System.Type" /> of object being deserialized.</param>
            <returns>The instance of <paramref name="objectType" /> being deserialized.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize``1(Newtonsoft.Json.JsonReader)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the object.</param>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <returns>The instance of <typeparamref name="T" /> being deserialized.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader,System.Type)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the object.</param>
            <param name="objectType">The <see cref="T:System.Type" /> of object being deserialized.</param>
            <returns>The instance of <paramref name="objectType" /> being deserialized.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the JSON structure
            using the specified <see cref="T:System.IO.TextWriter" />.
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write the JSON structure.</param>
            <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object,System.Type)">
            <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the JSON structure
            using the specified <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
            <param name="jsonWriter">The <see cref="T:Newtonsoft.Json.JsonWriter" /> used to write the JSON structure.</param>
            <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
            <param name="objectType">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> is <see cref="F:Newtonsoft.Json.TypeNameHandling.Auto" /> to write out the type name if the type of the value does not match.
            Specifying the type is optional.
            </param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object,System.Type)">
            <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the JSON structure
            using the specified <see cref="T:System.IO.TextWriter" />.
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write the JSON structure.</param>
            <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
            <param name="objectType">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> is Auto to write out the type name if the type of the value does not match.
            Specifying the type is optional.
            </param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the JSON structure
            using the specified <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
            <param name="jsonWriter">The <see cref="T:Newtonsoft.Json.JsonWriter" /> used to write the JSON structure.</param>
            <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonSerializerSettings">
            <summary>
            Specifies the settings on a <see cref="T:Newtonsoft.Json.JsonSerializer" /> object.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceLoopHandling">
            <summary>
            Gets or sets how reference loops (e.g. a class referencing itself) are handled.
            The default value is <see cref="F:Newtonsoft.Json.ReferenceLoopHandling.Error" />.
            </summary>
            <value>Reference loop handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.MissingMemberHandling">
            <summary>
            Gets or sets how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            The default value is <see cref="F:Newtonsoft.Json.MissingMemberHandling.Ignore" />.
            </summary>
            <value>Missing member handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ObjectCreationHandling">
            <summary>
            Gets or sets how objects are created during deserialization.
            The default value is <see cref="F:Newtonsoft.Json.ObjectCreationHandling.Auto" />.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.NullValueHandling">
            <summary>
            Gets or sets how null values are handled during serialization and deserialization.
            The default value is <see cref="F:Newtonsoft.Json.NullValueHandling.Include" />.
            </summary>
            <value>Null value handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.DefaultValueHandling">
            <summary>
            Gets or sets how default values are handled during serialization and deserialization.
            The default value is <see cref="F:Newtonsoft.Json.DefaultValueHandling.Include" />.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Converters">
            <summary>
            Gets or sets a <see cref="T:Newtonsoft.Json.JsonConverter" /> collection that will be used during serialization.
            </summary>
            <value>The converters.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.PreserveReferencesHandling">
            <summary>
            Gets or sets how object references are preserved by the serializer.
            The default value is <see cref="F:Newtonsoft.Json.PreserveReferencesHandling.None" />.
            </summary>
            <value>The preserve references handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling">
            <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            The default value is <see cref="F:Newtonsoft.Json.TypeNameHandling.None" />.
            </summary>
            <remarks>
                <see cref="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling" /> should be used with caution when your application deserializes JSON from an external source.
            Incoming types should be validated with a custom <see cref="P:Newtonsoft.Json.JsonSerializerSettings.SerializationBinder" />
            when deserializing with a value other than <see cref="F:Newtonsoft.Json.TypeNameHandling.None" />.
            </remarks>
            <value>The type name handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.MetadataPropertyHandling">
            <summary>
            Gets or sets how metadata properties are used during deserialization.
            The default value is <see cref="F:Newtonsoft.Json.MetadataPropertyHandling.Default" />.
            </summary>
            <value>The metadata properties handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameAssemblyFormat">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            The default value is <see cref="F:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle.Simple" />.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameAssemblyFormatHandling">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            The default value is <see cref="F:Newtonsoft.Json.TypeNameAssemblyFormatHandling.Simple" />.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ConstructorHandling">
            <summary>
            Gets or sets how constructors are used during deserialization.
            The default value is <see cref="F:Newtonsoft.Json.ConstructorHandling.Default" />.
            </summary>
            <value>The constructor handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ContractResolver">
            <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
            <value>The contract resolver.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.EqualityComparer">
            <summary>
            Gets or sets the equality comparer used by the serializer when comparing references.
            </summary>
            <value>The equality comparer.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceResolver">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> used by the serializer when resolving references.
            </summary>
            <value>The reference resolver.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceResolverProvider">
            <summary>
            Gets or sets a function that creates the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> used by the serializer when resolving references.
            </summary>
            <value>A function that creates the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> used by the serializer when resolving references.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.TraceWriter">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.ITraceWriter" /> used by the serializer when writing trace messages.
            </summary>
            <value>The trace writer.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Binder">
            <summary>
            Gets or sets the <see cref="P:Newtonsoft.Json.JsonSerializerSettings.SerializationBinder" /> used by the serializer when resolving type names.
            </summary>
            <value>The binder.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.SerializationBinder">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.ISerializationBinder" /> used by the serializer when resolving type names.
            </summary>
            <value>The binder.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Error">
            <summary>
            Gets or sets the error handler called during serialization and deserialization.
            </summary>
            <value>The error handler called during serialization and deserialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Context">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" /> used by the serializer when invoking serialization callback methods.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateFormatString">
            <summary>
            Gets or sets how <see cref="T:System.DateTime" /> and <see cref="T:System.DateTimeOffset" /> values are formatted when writing JSON text,
            and the expected date format when reading JSON text.
            The default value is <c>"yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK"</c>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Newtonsoft.Json.JsonReaderException" />.
            A null value means there is no maximum.
            The default value is <c>128</c>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Formatting">
            <summary>
            Indicates how JSON text output is formatted.
            The default value is <see cref="F:Newtonsoft.Json.Formatting.None" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateFormatHandling">
            <summary>
            Gets or sets how dates are written to JSON text.
            The default value is <see cref="F:Newtonsoft.Json.DateFormatHandling.IsoDateFormat" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateTimeZoneHandling">
            <summary>
            Gets or sets how <see cref="T:System.DateTime" /> time zones are handled during serialization and deserialization.
            The default value is <see cref="F:Newtonsoft.Json.DateTimeZoneHandling.RoundtripKind" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateParseHandling">
            <summary>
            Gets or sets how date formatted strings, e.g. <c>"\/Date(1198908717056)\/"</c> and <c>"2012-03-21T05:40Z"</c>, are parsed when reading JSON.
            The default value is <see cref="F:Newtonsoft.Json.DateParseHandling.DateTime" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.FloatFormatHandling">
            <summary>
            Gets or sets how special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" />,
            are written as JSON.
            The default value is <see cref="F:Newtonsoft.Json.FloatFormatHandling.String" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.FloatParseHandling">
            <summary>
            Gets or sets how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            The default value is <see cref="F:Newtonsoft.Json.FloatParseHandling.Double" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.StringEscapeHandling">
            <summary>
            Gets or sets how strings are escaped when writing JSON text.
            The default value is <see cref="F:Newtonsoft.Json.StringEscapeHandling.Default" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Culture">
            <summary>
            Gets or sets the culture used when reading JSON.
            The default value is <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.CheckAdditionalContent">
            <summary>
            Gets a value indicating whether there will be a check for additional content after deserializing an object.
            The default value is <c>false</c>.
            </summary>
            <value>
                <c>true</c> if there will be a check for additional content after deserializing an object; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializerSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> class.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonTextReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to JSON text data.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsBooleanAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns the <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsBytesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Byte" />[].
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns the <see cref="T:System.Byte" />[]. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTimeAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns the <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTimeOffsetAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns the <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDecimalAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns the <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDoubleAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns the <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsInt32Async(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns the <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsStringAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.String" />.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns the <see cref="T:System.String" />. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonTextReader" /> class with the specified <see cref="T:System.IO.TextReader" />.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader" /> containing the JSON data to read.</param>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextReader.PropertyNameTable">
            <summary>
            Gets or sets the reader's property name table.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextReader.ArrayPool">
            <summary>
            Gets or sets the reader's character buffer pool.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.Read">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader" />.
            </summary>
            <returns>
                <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader" /> as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader" /> as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsString">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader" /> as a <see cref="T:System.String" />.
            </summary>
            <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader" /> as a <see cref="T:System.Byte" />[].
            </summary>
            <returns>A <see cref="T:System.Byte" />[] or <c>null</c> if the next JSON token is null. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsBoolean">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader" /> as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader" /> as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader" /> as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDouble">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader" /> as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.Close">
            <summary>
            Changes the reader's state to <see cref="F:Newtonsoft.Json.JsonReader.State.Closed" />.
            If <see cref="P:Newtonsoft.Json.JsonReader.CloseInput" /> is set to <c>true</c>, the underlying <see cref="T:System.IO.TextReader" /> is also closed.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
            <returns>
                <c>true</c> if <see cref="P:Newtonsoft.Json.JsonTextReader.LineNumber" /> and <see cref="P:Newtonsoft.Json.JsonTextReader.LinePosition" /> can be provided; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextReader.LineNumber">
            <summary>
            Gets the current line number.
            </summary>
            <value>
            The current line number or 0 if no line information is available (for example, <see cref="M:Newtonsoft.Json.JsonTextReader.HasLineInfo" /> returns <c>false</c>).
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextReader.LinePosition">
            <summary>
            Gets the current line position.
            </summary>
            <value>
            The current line position or 0 if no line information is available (for example, <see cref="M:Newtonsoft.Json.JsonTextReader.HasLineInfo" /> returns <c>false</c>).
            </value>
        </member>
        <member name="T:Newtonsoft.Json.JsonTextWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously flushes whatever is in the buffer to the destination and also flushes the destination.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueDelimiterAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the JSON value delimiter.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteEndAsync(Newtonsoft.Json.JsonToken,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the specified end token.
            </summary>
            <param name="token">The end token to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously closes this writer.
            If <see cref="P:Newtonsoft.Json.JsonWriter.CloseOutput" /> is set to <c>true</c>, the destination is also closed.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteEndAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the end of the current JSON object or array.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndentAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes indent characters.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndentSpaceAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes an indent space.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteRawAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes raw JSON without changing the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteNullAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a null value.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyNameAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the property name of a name/value pair of a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyNameAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the property name of a name/value pair of a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartArrayAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the beginning of a JSON array.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartObjectAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the beginning of a JSON object.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartConstructorAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteUndefinedAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes an undefined value.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteWhitespaceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Boolean" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Byte,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Byte" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Byte" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Byte" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Byte" />[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte" />[] value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Char,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Char" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Char" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Char},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Char" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Char" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.DateTime" /> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Decimal" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Double,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Double" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Double" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Single,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Single" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Single" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Single},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Guid" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Int32" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Int64" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Object" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.SByte,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.SByte" /> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.SByte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.SByte" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.SByte" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Int16,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Int16" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Int16},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int16" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int16" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.String" /> value.
            </summary>
            <param name="value">The <see cref="T:System.String" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.UInt32" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.UInt32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.UInt64,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.UInt64" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.UInt64},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Uri" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.UInt16,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.UInt16" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.UInt16},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt16" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt16" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteCommentAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a comment <c>/*...*/</c> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteEndArrayAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the end of an array.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteEndConstructorAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the end of a constructor.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteEndObjectAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the end of a JSON object.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteRawValueAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.ArrayPool">
            <summary>
            Gets or sets the writer's character array pool.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.Indentation">
            <summary>
            Gets or sets how many <see cref="P:Newtonsoft.Json.JsonTextWriter.IndentChar" />s to write for each level in the hierarchy when <see cref="P:Newtonsoft.Json.JsonWriter.Formatting" /> is set to <see cref="F:Newtonsoft.Json.Formatting.Indented" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteChar">
            <summary>
            Gets or sets which character to use to quote attribute values.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.IndentChar">
            <summary>
            Gets or sets which character to use for indenting when <see cref="P:Newtonsoft.Json.JsonWriter.Formatting" /> is set to <see cref="F:Newtonsoft.Json.Formatting.Indented" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteName">
            <summary>
            Gets or sets a value indicating whether object names will be surrounded with quotes.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonTextWriter" /> class using the specified <see cref="T:System.IO.TextWriter" />.
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> to write to.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying <see cref="T:System.IO.TextWriter" /> and also flushes the underlying <see cref="T:System.IO.TextWriter" />.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.Close">
            <summary>
            Closes this writer.
            If <see cref="P:Newtonsoft.Json.JsonWriter.CloseOutput" /> is set to <c>true</c>, the underlying <see cref="T:System.IO.TextWriter" /> is also closed.
            If <see cref="P:Newtonsoft.Json.JsonWriter.AutoCompleteOnClose" /> is set to <c>true</c>, the JSON is auto-completed.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the specified end token.
            </summary>
            <param name="token">The end token to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndent">
            <summary>
            Writes indent characters.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueDelimiter">
            <summary>
            Writes the JSON value delimiter.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndentSpace">
            <summary>
            Writes an indent space.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
            <param name="value">The <see cref="T:System.String" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Single" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Single})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Double" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Double})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Char" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte" />[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte" />[] value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteComment(System.String)">
            <summary>
            Writes a comment <c>/*...*/</c> containing the specified text. 
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteWhitespace(System.String)">
            <summary>
            Writes the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonToken">
            <summary>
            Specifies the type of JSON token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.None">
            <summary>
            This is returned by the <see cref="T:Newtonsoft.Json.JsonReader" /> if a read method has not been called.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.StartObject">
            <summary>
            An object start token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.StartArray">
            <summary>
            An array start token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.StartConstructor">
            <summary>
            A constructor start token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.PropertyName">
            <summary>
            An object property name.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Raw">
            <summary>
            Raw JSON.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Integer">
            <summary>
            An integer.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Float">
            <summary>
            A float.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.String">
            <summary>
            A string.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Boolean">
            <summary>
            A boolean.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Null">
            <summary>
            A null token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Undefined">
            <summary>
            An undefined token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.EndObject">
            <summary>
            An object end token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.EndArray">
            <summary>
            An array end token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.EndConstructor">
            <summary>
            A constructor end token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Date">
            <summary>
            A Date.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Bytes">
            <summary>
            Byte data.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonValidatingReader">
            <summary>
                <para>
            Represents a reader that provides <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> validation.
            </para>
                <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="E:Newtonsoft.Json.JsonValidatingReader.ValidationEventHandler">
            <summary>
            Sets an event handler for receiving schema validation errors.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Value">
            <summary>
            Gets the text value of the current JSON token.
            </summary>
            <value />
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Depth">
            <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
            <value>The depth of the current token in the JSON document.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Path">
            <summary>
            Gets the path of the current JSON token. 
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
            <value />
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.TokenType">
            <summary>
            Gets the type of the current JSON token.
            </summary>
            <value />
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.ValueType">
            <summary>
            Gets the .NET type for the current JSON token.
            </summary>
            <value />
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.#ctor(Newtonsoft.Json.JsonReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonValidatingReader" /> class that
            validates the content returned from the given <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from while validating.</param>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Schema">
            <summary>
            Gets or sets the schema.
            </summary>
            <value>The schema.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Reader">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.JsonReader" /> used to construct this <see cref="T:Newtonsoft.Json.JsonValidatingReader" />.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.JsonReader" /> specified in the constructor.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.Close">
            <summary>
            Changes the reader's state to <see cref="F:Newtonsoft.Json.JsonReader.State.Closed" />.
            If <see cref="P:Newtonsoft.Json.JsonReader.CloseInput" /> is set to <c>true</c>, the underlying <see cref="T:Newtonsoft.Json.JsonReader" /> is also closed.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:Newtonsoft.Json.JsonReader" /> as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:Newtonsoft.Json.JsonReader" /> as a <see cref="T:System.Byte" />[].
            </summary>
            <returns>
            A <see cref="T:System.Byte" />[] or <c>null</c> if the next JSON token is null.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:Newtonsoft.Json.JsonReader" /> as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDouble">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:Newtonsoft.Json.JsonReader" /> as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsBoolean">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:Newtonsoft.Json.JsonReader" /> as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsString">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:Newtonsoft.Json.JsonReader" /> as a <see cref="T:System.String" />.
            </summary>
            <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:Newtonsoft.Json.JsonReader" /> as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:Newtonsoft.Json.JsonReader" /> as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.Read">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <returns>
                <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.JsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously closes this writer.
            If <see cref="P:Newtonsoft.Json.JsonWriter.CloseOutput" /> is set to <c>true</c>, the destination is also closed.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously flushes whatever is in the buffer to the destination and also flushes the destination.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndAsync(Newtonsoft.Json.JsonToken,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the specified end token.
            </summary>
            <param name="token">The end token to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteIndentAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes indent characters.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueDelimiterAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the JSON value delimiter.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteIndentSpaceAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes an indent space.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteRawAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes raw JSON without changing the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the end of the current JSON object or array.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndArrayAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the end of an array.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndConstructorAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the end of a constructor.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndObjectAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the end of a JSON object.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteNullAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a null value.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyNameAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the property name of a name/value pair of a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyNameAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the property name of a name/value pair of a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartArrayAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the beginning of a JSON array.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteCommentAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a comment <c>/*...*/</c> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteRawValueAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartConstructorAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartObjectAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the beginning of a JSON object.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteTokenAsync(Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the current <see cref="T:Newtonsoft.Json.JsonReader" /> token.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read the token from.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteTokenAsync(Newtonsoft.Json.JsonReader,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the current <see cref="T:Newtonsoft.Json.JsonReader" /> token.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read the token from.</param>
            <param name="writeChildren">A flag indicating whether the current token's children should be written.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteTokenAsync(Newtonsoft.Json.JsonToken,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the <see cref="T:Newtonsoft.Json.JsonToken" /> token and its value.
            </summary>
            <param name="token">The <see cref="T:Newtonsoft.Json.JsonToken" /> to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteTokenAsync(Newtonsoft.Json.JsonToken,System.Object,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the <see cref="T:Newtonsoft.Json.JsonToken" /> token and its value.
            </summary>
            <param name="token">The <see cref="T:Newtonsoft.Json.JsonToken" /> to write.</param>
            <param name="value">
            The value to write.
            A value is only required for tokens that have an associated value, e.g. the <see cref="T:System.String" /> property name for <see cref="F:Newtonsoft.Json.JsonToken.PropertyName" />.
            <c>null</c> can be passed to the method for tokens that don't have a value, e.g. <see cref="F:Newtonsoft.Json.JsonToken.StartObject" />.
            </param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Boolean" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Byte,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Byte" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Byte" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Byte" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Byte" />[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte" />[] value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Char,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Char" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Char" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Char},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Char" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Char" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.DateTime" /> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Decimal" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Double,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Double" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Double" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Single,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Single" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Single" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Single},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Guid" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Int32" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Int64" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Object" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.SByte,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.SByte" /> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.SByte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.SByte" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.SByte" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Int16,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Int16" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Int16},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int16" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int16" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.String" /> value.
            </summary>
            <param name="value">The <see cref="T:System.String" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.UInt32" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.UInt32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.UInt64,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.UInt64" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.UInt64},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Uri" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.UInt16,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.UInt16" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.UInt16},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt16" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt16" /> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteUndefinedAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes an undefined value.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteWhitespaceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.SetWriteStateAsync(Newtonsoft.Json.JsonToken,System.Object,System.Threading.CancellationToken)">
            <summary>
            Asynchronously ets the state of the <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
            <param name="token">The <see cref="T:Newtonsoft.Json.JsonToken" /> being written.</param>
            <param name="value">The value being written.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.CloseOutput">
            <summary>
            Gets or sets a value indicating whether the destination should be closed when this writer is closed.
            </summary>
            <value>
                <c>true</c> to close the destination when this writer is closed; otherwise <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.AutoCompleteOnClose">
            <summary>
            Gets or sets a value indicating whether the JSON should be auto-completed when this writer is closed.
            </summary>
            <value>
                <c>true</c> to auto-complete the JSON when this writer is closed; otherwise <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Top">
            <summary>
            Gets the top.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.WriteState">
            <summary>
            Gets the state of the writer.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Path">
            <summary>
            Gets the path of the writer. 
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Formatting">
            <summary>
            Gets or sets a value indicating how JSON text output should be formatted.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.DateFormatHandling">
            <summary>
            Gets or sets how dates are written to JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.DateTimeZoneHandling">
            <summary>
            Gets or sets how <see cref="T:System.DateTime" /> time zones are handled when writing JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.StringEscapeHandling">
            <summary>
            Gets or sets how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.FloatFormatHandling">
            <summary>
            Gets or sets how special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" />,
            are written to JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.DateFormatString">
            <summary>
            Gets or sets how <see cref="T:System.DateTime" /> and <see cref="T:System.DateTimeOffset" /> values are formatted when writing JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Culture">
            <summary>
            Gets or sets the culture used when writing JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriter" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the destination and also flushes the destination.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.Close">
            <summary>
            Closes this writer.
            If <see cref="P:Newtonsoft.Json.JsonWriter.CloseOutput" /> is set to <c>true</c>, the destination is also closed.
            If <see cref="P:Newtonsoft.Json.JsonWriter.AutoCompleteOnClose" /> is set to <c>true</c>, the JSON is auto-completed.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndObject">
            <summary>
            Writes the end of a JSON object.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndArray">
            <summary>
            Writes the end of an array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndConstructor">
            <summary>
            Writes the end constructor.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair of a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>
            Writes the property name of a name/value pair of a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd">
            <summary>
            Writes the end of the current JSON object or array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader)">
            <summary>
            Writes the current <see cref="T:Newtonsoft.Json.JsonReader" /> token and its children.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read the token from.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader,System.Boolean)">
            <summary>
            Writes the current <see cref="T:Newtonsoft.Json.JsonReader" /> token.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read the token from.</param>
            <param name="writeChildren">A flag indicating whether the current token's children should be written.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonToken,System.Object)">
            <summary>
            Writes the <see cref="T:Newtonsoft.Json.JsonToken" /> token and its value.
            </summary>
            <param name="token">The <see cref="T:Newtonsoft.Json.JsonToken" /> to write.</param>
            <param name="value">
            The value to write.
            A value is only required for tokens that have an associated value, e.g. the <see cref="T:System.String" /> property name for <see cref="F:Newtonsoft.Json.JsonToken.PropertyName" />.
            <c>null</c> can be passed to the method for tokens that don't have a value, e.g. <see cref="F:Newtonsoft.Json.JsonToken.StartObject" />.
            </param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the <see cref="T:Newtonsoft.Json.JsonToken" /> token.
            </summary>
            <param name="token">The <see cref="T:Newtonsoft.Json.JsonToken" /> to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the specified end token.
            </summary>
            <param name="token">The end token to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteIndent">
            <summary>
            Writes indent characters.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueDelimiter">
            <summary>
            Writes the JSON value delimiter.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteIndentSpace">
            <summary>
            Writes an indent space.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON without changing the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteRawValue(System.String)">
            <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
            <param name="value">The <see cref="T:System.String" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Single" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Double" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Char" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int32})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt32})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int64})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt64})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Single})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Double})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Boolean})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int16})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int16" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int16" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt16})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt16" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt16" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Char})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Char" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Char" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Byte})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Byte" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Byte" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.SByte})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.SByte" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.SByte" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Decimal})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTime})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTimeOffset})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Guid})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.TimeSpan})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte" />[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte" />[] value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteComment(System.String)">
            <summary>
            Writes a comment <c>/*...*/</c> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteWhitespace(System.String)">
            <summary>
            Writes the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.SetWriteState(Newtonsoft.Json.JsonToken,System.Object)">
            <summary>
            Sets the state of the <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
            <param name="token">The <see cref="T:Newtonsoft.Json.JsonToken" /> being written.</param>
            <param name="value">The value being written.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonWriterException">
            <summary>
            The exception thrown when an error occurs while writing JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriterException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class
            with a specified error message, JSON path and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="path">The path to the JSON where the error occurred.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="T:Newtonsoft.Json.Linq.CommentHandling">
            <summary>
            Specifies how JSON comments are handled when loading JSON.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.CommentHandling.Ignore">
            <summary>
            Ignore comments.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.CommentHandling.Load">
            <summary>
            Load comments as a <see cref="T:Newtonsoft.Json.Linq.JValue" /> with type <see cref="F:Newtonsoft.Json.Linq.JTokenType.Comment" />.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.DuplicatePropertyNameHandling">
            <summary>
            Specifies how duplicate property names are handled when loading JSON.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.DuplicatePropertyNameHandling.Replace">
            <summary>
            Replace the existing value when there is a duplicate property. The value of the last property in the JSON object will be used.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.DuplicatePropertyNameHandling.Ignore">
            <summary>
            Ignore the new value when there is a duplicate property. The value of the first property in the JSON object will be used.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.DuplicatePropertyNameHandling.Error">
            <summary>
            Throw a <see cref="T:Newtonsoft.Json.JsonReaderException" /> when a duplicate property is encountered.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Extensions">
            <summary>
            Contains the LINQ to JSON extension methods.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains the ancestors of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JToken" />.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the ancestors of every token in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.AncestorsAndSelf``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains every token in the source collection, and the ancestors of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JToken" />.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains every token in the source collection, the ancestors of every token in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains the descendants of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JContainer" />.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the descendants of every token in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.DescendantsAndSelf``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains every token in the source collection, and the descendants of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JContainer" />.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains every token in the source collection, and the descendants of every token in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Properties(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JObject})">
            <summary>
            Returns a collection of child properties of every object in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JProperty" /> that contains the properties of every object in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)">
            <summary>
            Returns a collection of child values of every object in the source collection with the given key.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
            <param name="key">The token key.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every token in the source collection with the given key.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>
            Returns a collection of child values of every object in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every token in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)">
            <summary>
            Returns a collection of converted child values of every object in the source collection with the given key.
            </summary>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
            <param name="key">The token key.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every token in the source collection with the given key.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>
            Returns a collection of converted child values of every object in the source collection.
            </summary>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every token in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Value``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>
            Converts the value.
            </summary>
            <typeparam name="U">The type to convert the value to.</typeparam>
            <param name="value">A <see cref="T:Newtonsoft.Json.Linq.JToken" /> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Value``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the value.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <typeparam name="U">The type to convert the value to.</typeparam>
            <param name="value">A <see cref="T:Newtonsoft.Json.Linq.JToken" /> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Children``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of child tokens of every array in the source collection.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every token in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Children``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of converted child tokens of every array in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <typeparam name="T">The source collection type.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every token in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>
            Returns the input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
            <returns>The input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
            <returns>The input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.IJEnumerable`1">
            <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
            <typeparam name="T">The type of token.</typeparam>
        </member>
        <member name="P:Newtonsoft.Json.Linq.IJEnumerable`1.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
            <value />
        </member>
        <member name="T:Newtonsoft.Json.Linq.JArray">
            <summary>
            Represents a JSON array.
            </summary>
            <example>
                <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
            </example>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.WriteToAsync(Newtonsoft.Json.JsonWriter,System.Threading.CancellationToken,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" /> asynchronously.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.LoadAsync(Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JArray" />.
            If this is <c>null</c>, default load settings will be used.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the asynchronous load. The <see cref="P:System.Threading.Tasks.Task`1.Result" /> property contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.LoadAsync(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings,System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the asynchronous load. The <see cref="P:System.Threading.Tasks.Task`1.Result" /> property contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.Type">
            <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(Newtonsoft.Json.Linq.JArray)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class from another <see cref="T:Newtonsoft.Json.Linq.JArray" /> object.
            </summary>
            <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JArray" /> object to copy from.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class with the specified content.
            </summary>
            <param name="content">The contents of the array.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class with the specified content.
            </summary>
            <param name="content">The contents of the array.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Load(Newtonsoft.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Parse(System.String)">
            <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> populated from the string that contains JSON.</returns>
            <example>
                <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
            </example>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Parse(System.String,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> populated from the string that contains JSON.</returns>
            <example>
                <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
            </example>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> with the values of the specified object.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
            <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used to read the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> with the values of the specified object.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> at the specified index.
            </summary>
            <value />
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.IndexOf(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Determines the index of a specific item in the <see cref="T:Newtonsoft.Json.Linq.JArray" />.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
            <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Insert(System.Int32,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Inserts an item to the <see cref="T:Newtonsoft.Json.Linq.JArray" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index" /> is not a valid index in the <see cref="T:Newtonsoft.Json.Linq.JArray" />.
            </exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Newtonsoft.Json.Linq.JArray" /> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index" /> is not a valid index in the <see cref="T:Newtonsoft.Json.Linq.JArray" />.
            </exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Add(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Adds an item to the <see cref="T:Newtonsoft.Json.Linq.JArray" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Clear">
            <summary>
            Removes all items from the <see cref="T:Newtonsoft.Json.Linq.JArray" />.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Contains(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Determines whether the <see cref="T:Newtonsoft.Json.Linq.JArray" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
            <returns>
                <c>true</c> if <paramref name="item" /> is found in the <see cref="T:Newtonsoft.Json.Linq.JArray" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.CopyTo(Newtonsoft.Json.Linq.JToken[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> to an array, starting at a particular array index.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Newtonsoft.Json.Linq.JArray" /> is read-only.
            </summary>
            <returns>
                <c>true</c> if the <see cref="T:Newtonsoft.Json.Linq.JArray" /> is read-only; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Remove(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Newtonsoft.Json.Linq.JArray" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
            <returns>
                <c>true</c> if <paramref name="item" /> was successfully removed from the <see cref="T:Newtonsoft.Json.Linq.JArray" />; otherwise, <c>false</c>. This method also returns <c>false</c> if <paramref name="item" /> is not found in the original <see cref="T:Newtonsoft.Json.Linq.JArray" />.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JConstructor">
            <summary>
            Represents a JSON constructor.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.WriteToAsync(Newtonsoft.Json.JsonWriter,System.Threading.CancellationToken,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" /> asynchronously.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.LoadAsync(Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads a <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" />.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous load. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns a <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.LoadAsync(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings,System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads a <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" />.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous load. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns a <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JConstructor.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JConstructor.Name">
            <summary>
            Gets or sets the name of this constructor.
            </summary>
            <value>The constructor name.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JConstructor.Type">
            <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(Newtonsoft.Json.Linq.JConstructor)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class from another <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> object.
            </summary>
            <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> object to copy from.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name and content.
            </summary>
            <param name="name">The constructor name.</param>
            <param name="content">The contents of the constructor.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name and content.
            </summary>
            <param name="name">The constructor name.</param>
            <param name="content">The contents of the constructor.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name.
            </summary>
            <param name="name">The constructor name.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JConstructor.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.Load(Newtonsoft.Json.JsonReader)">
            <summary>
            Loads a <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" />.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Loads a <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" />.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JContainer">
            <summary>
            Represents a token that can contain other tokens.
            </summary>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JContainer.ListChanged">
            <summary>
            Occurs when the list changes or an item in the list changes.
            </summary>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JContainer.AddingNew">
            <summary>
            Occurs before an item is added to the collection.
            </summary>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JContainer.CollectionChanged">
            <summary>
            Occurs when the items list of the collection has changed, or the collection is reset.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
            <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.AddingNew" /> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.AddingNewEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.ListChanged" /> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.ListChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.CollectionChanged" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
            <value>
                <c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.First">
            <summary>
            Get the first child token of this token.
            </summary>
            <value>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the first child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.Last">
            <summary>
            Get the last child token of this token.
            </summary>
            <value>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the last child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Children">
            <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Values``1">
            <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
            <typeparam name="T">The type to convert the values to.</typeparam>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the child values of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Descendants">
            <summary>
            Returns a collection of the descendant tokens for this token in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the descendant tokens of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.DescendantsAndSelf">
            <summary>
            Returns a collection of the tokens that contain this token, and all descendant tokens of this token, in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing this token, and all the descendant tokens of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Add(System.Object)">
            <summary>
            Adds the specified content as children of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="content">The content to be added.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.AddFirst(System.Object)">
            <summary>
            Adds the specified content as the first children of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="content">The content to be added.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.CreateWriter">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.JsonWriter" /> that can be used to add tokens to the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <returns>A <see cref="T:Newtonsoft.Json.JsonWriter" /> that is ready to have content written to it.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.ReplaceAll(System.Object)">
            <summary>
            Replaces the child nodes of this token with the specified content.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.RemoveAll">
            <summary>
            Removes the child nodes from this token.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Merge(System.Object)">
            <summary>
            Merge the specified content into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="content">The content to be merged.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Merge(System.Object,Newtonsoft.Json.Linq.JsonMergeSettings)">
            <summary>
            Merge the specified content into this <see cref="T:Newtonsoft.Json.Linq.JToken" /> using <see cref="T:Newtonsoft.Json.Linq.JsonMergeSettings" />.
            </summary>
            <param name="content">The content to be merged.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonMergeSettings" /> used to merge the content.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.Count">
            <summary>
            Gets the count of child JSON tokens.
            </summary>
            <value>The count of child JSON tokens.</value>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JEnumerable`1">
            <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
            <typeparam name="T">The type of token.</typeparam>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JEnumerable`1.Empty">
            <summary>
            An empty collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> struct.
            </summary>
            <param name="enumerable">The enumerable.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that can be used to iterate through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JEnumerable`1.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
            <value />
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.Equals(Newtonsoft.Json.Linq.JEnumerable{`0})">
            <summary>
            Determines whether the specified <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JObject">
            <summary>
            Represents a JSON object.
            </summary>
            <example>
                <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
            </example>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.WriteToAsync(Newtonsoft.Json.JsonWriter,System.Threading.CancellationToken,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" /> asynchronously.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.LoadAsync(Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous load. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns a <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.LoadAsync(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings,System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous load. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns a <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JObject.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanging">
            <summary>
            Occurs when a property value is changing.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class from another <see cref="T:Newtonsoft.Json.Linq.JObject" /> object.
            </summary>
            <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JObject" /> object to copy from.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class with the specified content.
            </summary>
            <param name="content">The contents of the object.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class with the specified content.
            </summary>
            <param name="content">The contents of the object.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JObject.Type">
            <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Properties">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JProperty" /> of this object's properties.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JProperty" /> of this object's properties.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Property(System.String)">
            <summary>
            Gets a <see cref="T:Newtonsoft.Json.Linq.JProperty" /> with the specified name.
            </summary>
            <param name="name">The property name.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> with the specified name or <c>null</c>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Property(System.String,System.StringComparison)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> with the specified name.
            The exact name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison" /> will be used to match a property.
            </summary>
            <param name="name">The property name.</param>
            <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> matched with the specified name or <c>null</c>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.PropertyValues">
            <summary>
            Gets a <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> of this object's property values.
            </summary>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> of this object's property values.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            </summary>
            <value />
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Load(Newtonsoft.Json.JsonReader)">
            <summary>
            Loads a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
            <exception cref="T:Newtonsoft.Json.JsonReaderException">
                <paramref name="reader" /> is not valid JSON.
            </exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Loads a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
            <exception cref="T:Newtonsoft.Json.JsonReaderException">
                <paramref name="reader" /> is not valid JSON.
            </exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Parse(System.String)">
            <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> populated from the string that contains JSON.</returns>
            <exception cref="T:Newtonsoft.Json.JsonReaderException">
                <paramref name="json" /> is not valid JSON.
            </exception>
            <example>
                <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
            </example>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Parse(System.String,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> populated from the string that contains JSON.</returns>
            <exception cref="T:Newtonsoft.Json.JsonReaderException">
                <paramref name="json" /> is not valid JSON.
            </exception>
            <example>
                <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
            </example>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> with the values of the specified object.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
            <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used to read the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> with the values of the specified object.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.GetValue(System.String)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.GetValue(System.String,System.StringComparison)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison" /> will be used to match a property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,System.StringComparison,Newtonsoft.Json.Linq.JToken@)">
            <summary>
            Tries to get the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison" /> will be used to match a property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns>
                <c>true</c> if a value was successfully retrieved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Add(System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Adds the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.ContainsKey(System.String)">
            <summary>
            Determines whether the JSON object has the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>
                <c>true</c> if the JSON object has the specified property name; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Remove(System.String)">
            <summary>
            Removes the property with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>
                <c>true</c> if item was successfully removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,Newtonsoft.Json.Linq.JToken@)">
            <summary>
            Tries to get the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <returns>
                <c>true</c> if a value was successfully retrieved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.GetEnumerator">
            <summary>
            Returns an enumerator that can be used to iterate through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanged" /> event with the provided arguments.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanging(System.String)">
            <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanging" /> event with the provided arguments.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JProperty">
            <summary>
            Represents a JSON property.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.WriteToAsync(Newtonsoft.Json.JsonWriter,System.Threading.CancellationToken,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" /> asynchronously.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.LoadAsync(Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads a <see cref="T:Newtonsoft.Json.Linq.JProperty" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JProperty" />.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the asynchronous creation. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns a <see cref="T:Newtonsoft.Json.Linq.JProperty" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.LoadAsync(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings,System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads a <see cref="T:Newtonsoft.Json.Linq.JProperty" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JProperty" />.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the asynchronous creation. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns a <see cref="T:Newtonsoft.Json.Linq.JProperty" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JProperty.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JProperty.Name">
            <summary>
            Gets the property name.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JProperty.Value">
            <summary>
            Gets or sets the property value.
            </summary>
            <value>The property value.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(Newtonsoft.Json.Linq.JProperty)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class from another <see cref="T:Newtonsoft.Json.Linq.JProperty" /> object.
            </summary>
            <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> object to copy from.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JProperty.Type">
            <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class.
            </summary>
            <param name="name">The property name.</param>
            <param name="content">The property content.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class.
            </summary>
            <param name="name">The property name.</param>
            <param name="content">The property content.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.Load(Newtonsoft.Json.JsonReader)">
            <summary>
            Loads a <see cref="T:Newtonsoft.Json.Linq.JProperty" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JProperty" />.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Loads a <see cref="T:Newtonsoft.Json.Linq.JProperty" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JProperty" />.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JPropertyDescriptor">
            <summary>
            Represents a view of a <see cref="T:Newtonsoft.Json.Linq.JProperty" />.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JPropertyDescriptor" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            When overridden in a derived class, returns whether resetting an object changes its value.
            </summary>
            <returns>
                <c>true</c> if resetting the component changes its value; otherwise, <c>false</c>.
            </returns>
            <param name="component">The component to test for reset capability.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.GetValue(System.Object)">
            <summary>
            When overridden in a derived class, gets the current value of the property on a component.
            </summary>
            <returns>
            The value of a property for a given component.
            </returns>
            <param name="component">The component with the property for which to retrieve the value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            When overridden in a derived class, resets the value for this property of the component to the default value.
            </summary>
            <param name="component">The component with the property value that is to be reset to the default value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            When overridden in a derived class, sets the value of the component to a different value.
            </summary>
            <param name="component">The component with the property value that is to be set.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.
            </summary>
            <returns>
                <c>true</c> if the property should be persisted; otherwise, <c>false</c>.
            </returns>
            <param name="component">The component with the property to be examined for persistence.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.ComponentType">
            <summary>
            When overridden in a derived class, gets the type of the component this property is bound to.
            </summary>
            <returns>
            A <see cref="T:System.Type" /> that represents the type of component this property is bound to.
            When the <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> or
            <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" />
            methods are invoked, the object specified might be an instance of this type.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.IsReadOnly">
            <summary>
            When overridden in a derived class, gets a value indicating whether this property is read-only.
            </summary>
            <returns>
                <c>true</c> if the property is read-only; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.PropertyType">
            <summary>
            When overridden in a derived class, gets the type of the property.
            </summary>
            <returns>
            A <see cref="T:System.Type" /> that represents the type of the property.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.NameHashCode">
            <summary>
            Gets the hash code for the name of the member.
            </summary>
            <value />
            <returns>
            The hash code for the name of the member.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JRaw">
            <summary>
            Represents a raw JSON string.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JRaw.CreateAsync(Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates an instance of <see cref="T:Newtonsoft.Json.Linq.JRaw" /> with the content of the reader's current token.
            </summary>
            <param name="reader">The reader.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the asynchronous creation. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns an instance of <see cref="T:Newtonsoft.Json.Linq.JRaw" /> with the content of the reader's current token.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(Newtonsoft.Json.Linq.JRaw)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JRaw" /> class from another <see cref="T:Newtonsoft.Json.Linq.JRaw" /> object.
            </summary>
            <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JRaw" /> object to copy from.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JRaw" /> class.
            </summary>
            <param name="rawJson">The raw json.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JRaw.Create(Newtonsoft.Json.JsonReader)">
            <summary>
            Creates an instance of <see cref="T:Newtonsoft.Json.Linq.JRaw" /> with the content of the reader's current token.
            </summary>
            <param name="reader">The reader.</param>
            <returns>An instance of <see cref="T:Newtonsoft.Json.Linq.JRaw" /> with the content of the reader's current token.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JsonLoadSettings">
            <summary>
            Specifies the settings used when loading JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JsonLoadSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> class.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JsonLoadSettings.CommentHandling">
            <summary>
            Gets or sets how JSON comments are handled when loading JSON.
            The default value is <see cref="F:Newtonsoft.Json.Linq.CommentHandling.Ignore" />.
            </summary>
            <value>The JSON comment handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JsonLoadSettings.LineInfoHandling">
            <summary>
            Gets or sets how JSON line info is handled when loading JSON.
            The default value is <see cref="F:Newtonsoft.Json.Linq.LineInfoHandling.Load" />.
            </summary>
            <value>The JSON line info handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JsonLoadSettings.DuplicatePropertyNameHandling">
            <summary>
            Gets or sets how duplicate property names in JSON objects are handled when loading JSON.
            The default value is <see cref="F:Newtonsoft.Json.Linq.DuplicatePropertyNameHandling.Replace" />.
            </summary>
            <value>The JSON duplicate property name handling.</value>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JsonMergeSettings">
            <summary>
            Specifies the settings used when merging JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JsonMergeSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JsonMergeSettings" /> class.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JsonMergeSettings.MergeArrayHandling">
            <summary>
            Gets or sets the method used when merging JSON arrays.
            </summary>
            <value>The method used when merging JSON arrays.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JsonMergeSettings.MergeNullValueHandling">
            <summary>
            Gets or sets how null value properties are merged.
            </summary>
            <value>How null value properties are merged.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JsonMergeSettings.PropertyNameComparison">
            <summary>
            Gets or sets the comparison used to match property names while merging.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison" /> will be used to match a property.
            </summary>
            <value>The comparison used to match property names while merging.</value>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JsonSelectSettings">
            <summary>
            Specifies the settings used when selecting JSON.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JsonSelectSettings.RegexMatchTimeout">
            <summary>
            Gets or sets a timeout that will be used when executing regular expressions.
            </summary>
            <value>The timeout that will be used when executing regular expressions.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JsonSelectSettings.ErrorWhenNoMatch">
            <summary>
            Gets or sets a flag that indicates whether an error should be thrown if
            no tokens are found when evaluating part of the expression.
            </summary>
            <value>
            A flag that indicates whether an error should be thrown if
            no tokens are found when evaluating part of the expression.
            </value>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JToken">
            <summary>
            Represents an abstract JSON token.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.WriteToAsync(Newtonsoft.Json.JsonWriter,System.Threading.CancellationToken,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" /> asynchronously.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.WriteToAsync(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" /> asynchronously.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ReadFromAsync(Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous creation. The
            <see cref="P:System.Threading.Tasks.Task`1.Result" /> property returns a <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains 
            the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ReadFromAsync(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous creation. The
            <see cref="P:System.Threading.Tasks.Task`1.Result" /> property returns a <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains 
            the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.LoadAsync(Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous creation. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns a <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.LoadAsync(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous creation. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns a <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.EqualityComparer">
            <summary>
            Gets a comparer that can compare two tokens for value equality.
            </summary>
            <value>A <see cref="T:Newtonsoft.Json.Linq.JTokenEqualityComparer" /> that can compare two nodes for value equality.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Root">
            <summary>
            Gets the root <see cref="T:Newtonsoft.Json.Linq.JToken" /> of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <value>The root <see cref="T:Newtonsoft.Json.Linq.JToken" /> of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Type">
            <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
            <value>
                <c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Compares the values of two tokens, including the values of all descendant tokens.
            </summary>
            <param name="t1">The first <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
            <param name="t2">The second <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
            <returns>
                <c>true</c> if the tokens are equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Next">
            <summary>
            Gets the next sibling token of this node.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the next sibling token.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Previous">
            <summary>
            Gets the previous sibling token of this node.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the previous sibling token.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Path">
            <summary>
            Gets the path of the JSON token. 
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AddAfterSelf(System.Object)">
            <summary>
            Adds the specified content immediately after this token.
            </summary>
            <param name="content">A content object that contains simple content or a collection of content objects to be added after this token.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AddBeforeSelf(System.Object)">
            <summary>
            Adds the specified content immediately before this token.
            </summary>
            <param name="content">A content object that contains simple content or a collection of content objects to be added before this token.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Ancestors">
            <summary>
            Returns a collection of the ancestor tokens of this token.
            </summary>
            <returns>A collection of the ancestor tokens of this token.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AncestorsAndSelf">
            <summary>
            Returns a collection of tokens that contain this token, and the ancestors of this token.
            </summary>
            <returns>A collection of tokens that contain this token, and the ancestors of this token.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AfterSelf">
            <summary>
            Returns a collection of the sibling tokens after this token, in document order.
            </summary>
            <returns>A collection of the sibling tokens after this tokens, in document order.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.BeforeSelf">
            <summary>
            Returns a collection of the sibling tokens before this token, in document order.
            </summary>
            <returns>A collection of the sibling tokens before this token, in document order.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Value``1(System.Object)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key converted to the specified type.
            </summary>
            <typeparam name="T">The type to convert the token to.</typeparam>
            <param name="key">The token key.</param>
            <returns>The converted token value.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.First">
            <summary>
            Get the first child token of this token.
            </summary>
            <value>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the first child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Last">
            <summary>
            Get the last child token of this token.
            </summary>
            <value>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the last child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Children">
            <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Children``1">
            <summary>
            Returns a collection of the child tokens of this token, in document order, filtered by the specified type.
            </summary>
            <typeparam name="T">The type to filter the child tokens on.</typeparam>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Values``1">
            <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
            <typeparam name="T">The type to convert the values to.</typeparam>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the child values of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Remove">
            <summary>
            Removes this token from its parent.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Replace(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Replaces this token with the specified token.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToString">
            <summary>
            Returns the indented JSON for this token.
            </summary>
            <remarks>
                <c>ToString()</c> returns a non-JSON string value for tokens with a type of <see cref="F:Newtonsoft.Json.Linq.JTokenType.String" />.
            If you want the JSON for all token types then you should use <see cref="M:Newtonsoft.Json.Linq.JToken.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])" />.
            </remarks>
            <returns>
            The indented JSON for this token.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToString(Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Returns the JSON for this token using the given formatting and converters.
            </summary>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" />s which will be used when writing the token.</param>
            <returns>The JSON for this token using the given formatting and converters.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Boolean">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Boolean" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTimeOffset">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.DateTimeOffset" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Boolean}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int64">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTime}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTimeOffset}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Decimal}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Double}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Char}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Char" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int32">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int32" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int16">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int16" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt16">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt16" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Char">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Char" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Byte">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Byte" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.SByte">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.SByte" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int32}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> .
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int16}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int16" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt16}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt16" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Byte}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Byte" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.SByte}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.SByte" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTime">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int64}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Single}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Decimal">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Decimal" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt32}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt64}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Double">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Double" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Single">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Single" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.String" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt32">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt32" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt64">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt64" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Byte[]">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Byte" />[].
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Guid">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Guid" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Guid}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> .
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.TimeSpan">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.TimeSpan" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.TimeSpan}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Uri">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Uri" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Boolean)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTimeOffset)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTimeOffset" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Byte})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Byte" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.SByte)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.SByte" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.SByte})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.SByte" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Boolean})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int64)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTime})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTimeOffset})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Decimal})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Double})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int16)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int16" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt16)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt16" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int32)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int32})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTime)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTime" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int64})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Single})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Decimal)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Decimal" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int16})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int16" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt16})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt16" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt32})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt64})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Double)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Single)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Single" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.String)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt32)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt64)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte[])~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte" />[] to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Uri)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Uri" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.TimeSpan)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.TimeSpan" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.TimeSpan})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Guid)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Guid" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Guid})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.CreateReader">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.JsonReader" /> for this token.
            </summary>
            <returns>A <see cref="T:Newtonsoft.Json.JsonReader" /> that can be used to read this token and its descendants.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the value of the specified object.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from an object using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
            <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when reading the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the value of the specified object.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToObject``1">
            <summary>
            Creates an instance of the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToObject(System.Type)">
            <summary>
            Creates an instance of the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="objectType">The object type that the token will be deserialized to.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToObject``1(Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates an instance of the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" /> using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
            <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
            <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when creating the object.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToObject(System.Type,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates an instance of the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" /> using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
            <param name="objectType">The object type that the token will be deserialized to.</param>
            <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when creating the object.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
            <returns>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Parse(System.String)">
            <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Parse(System.String,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Load(Newtonsoft.Json.JsonReader)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
            <returns>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String)">
            <summary>
            Selects a <see cref="T:Newtonsoft.Json.Linq.JToken" /> using a JSONPath expression. Selects the token that matches the object path.
            </summary>
            <param name="path">
            A <see cref="T:System.String" /> that contains a JSONPath expression.
            </param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" />, or <c>null</c>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String,System.Boolean)">
            <summary>
            Selects a <see cref="T:Newtonsoft.Json.Linq.JToken" /> using a JSONPath expression. Selects the token that matches the object path.
            </summary>
            <param name="path">
            A <see cref="T:System.String" /> that contains a JSONPath expression.
            </param>
            <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no tokens are found when evaluating part of the expression.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String,Newtonsoft.Json.Linq.JsonSelectSettings)">
            <summary>
            Selects a <see cref="T:Newtonsoft.Json.Linq.JToken" /> using a JSONPath expression. Selects the token that matches the object path.
            </summary>
            <param name="path">
            A <see cref="T:System.String" /> that contains a JSONPath expression.
            </param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonSelectSettings" /> used to select tokens.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.SelectTokens(System.String)">
            <summary>
            Selects a collection of elements using a JSONPath expression.
            </summary>
            <param name="path">
            A <see cref="T:System.String" /> that contains a JSONPath expression.
            </param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the selected elements.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.SelectTokens(System.String,System.Boolean)">
            <summary>
            Selects a collection of elements using a JSONPath expression.
            </summary>
            <param name="path">
            A <see cref="T:System.String" /> that contains a JSONPath expression.
            </param>
            <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no tokens are found when evaluating part of the expression.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the selected elements.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.SelectTokens(System.String,Newtonsoft.Json.Linq.JsonSelectSettings)">
            <summary>
            Selects a collection of elements using a JSONPath expression.
            </summary>
            <param name="path">
            A <see cref="T:System.String" /> that contains a JSONPath expression.
            </param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonSelectSettings" /> used to select tokens.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the selected elements.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.DeepClone">
            <summary>
            Creates a new instance of the <see cref="T:Newtonsoft.Json.Linq.JToken" />. All child tokens are recursively cloned.
            </summary>
            <returns>A new instance of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AddAnnotation(System.Object)">
            <summary>
            Adds an object to the annotation list of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="annotation">The annotation to add.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Annotation``1">
            <summary>
            Get the first annotation object of the specified type from this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <typeparam name="T">The type of the annotation to retrieve.</typeparam>
            <returns>The first annotation object that matches the specified type, or <c>null</c> if no annotation is of the specified type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Annotation(System.Type)">
            <summary>
            Gets the first annotation object of the specified type from this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="type">The <see cref="P:Newtonsoft.Json.Linq.JToken.Type" /> of the annotation to retrieve.</param>
            <returns>The first annotation object that matches the specified type, or <c>null</c> if no annotation is of the specified type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Annotations``1">
            <summary>
            Gets a collection of annotations of the specified type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <typeparam name="T">The type of the annotations to retrieve.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the annotations for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Annotations(System.Type)">
            <summary>
            Gets a collection of annotations of the specified type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="type">The <see cref="P:Newtonsoft.Json.Linq.JToken.Type" /> of the annotations to retrieve.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Object" /> that contains the annotations that match the specified type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.RemoveAnnotations``1">
            <summary>
            Removes the annotations of the specified type from this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <typeparam name="T">The type of annotations to remove.</typeparam>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.RemoveAnnotations(System.Type)">
            <summary>
            Removes the annotations of the specified type from this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="type">The <see cref="P:Newtonsoft.Json.Linq.JToken.Type" /> of annotations to remove.</param>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JTokenEqualityComparer">
            <summary>
            Compares tokens to determine whether they are equal.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.Equals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
            <param name="y">The second object of type <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
            <returns>
                <c>true</c> if the specified objects are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.GetHashCode(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is <c>null</c>.</exception>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JTokenReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized JSON data.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JTokenReader.CurrentToken">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> at the reader's current position.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenReader.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenReader" /> class.
            </summary>
            <param name="token">The token to read from.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenReader.#ctor(Newtonsoft.Json.Linq.JToken,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenReader" /> class.
            </summary>
            <param name="token">The token to read from.</param>
            <param name="initialPath">The initial path of the token. It is prepended to the returned <see cref="P:Newtonsoft.Json.Linq.JTokenReader.Path" />.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenReader.Read">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <returns>
                <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JTokenReader.Path">
            <summary>
            Gets the path of the current JSON token. 
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JTokenType">
            <summary>
            Specifies the type of token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.None">
            <summary>
            No token type has been set.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Object">
            <summary>
            A JSON object.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Array">
            <summary>
            A JSON array.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Constructor">
            <summary>
            A JSON constructor.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Property">
            <summary>
            A JSON object property.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Integer">
            <summary>
            An integer value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Float">
            <summary>
            A float value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.String">
            <summary>
            A string value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Boolean">
            <summary>
            A boolean value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Null">
            <summary>
            A null value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Undefined">
            <summary>
            An undefined value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Date">
            <summary>
            A date value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Raw">
            <summary>
            A raw JSON value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Bytes">
            <summary>
            A collection of bytes value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Guid">
            <summary>
            A Guid value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Uri">
            <summary>
            A Uri value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.TimeSpan">
            <summary>
            A TimeSpan value.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JTokenWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JTokenWriter.CurrentToken">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> at the writer's current position.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JTokenWriter.Token">
            <summary>
            Gets the token being written.
            </summary>
            <value>The token being written.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor(Newtonsoft.Json.Linq.JContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenWriter" /> class writing to the given <see cref="T:Newtonsoft.Json.Linq.JContainer" />.
            </summary>
            <param name="container">The container being written to.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenWriter" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying <see cref="T:Newtonsoft.Json.Linq.JContainer" />.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Close">
            <summary>
            Closes this writer.
            If <see cref="P:Newtonsoft.Json.JsonWriter.AutoCompleteOnClose" /> is set to <c>true</c>, the JSON is auto-completed.
            </summary>
            <remarks>
            Setting <see cref="P:Newtonsoft.Json.JsonWriter.CloseOutput" /> to <c>true</c> has no additional effect, since the underlying <see cref="T:Newtonsoft.Json.Linq.JContainer" /> is a type that cannot be closed.
            </remarks>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the end.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will be raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteComment(System.String)">
            <summary>
            Writes a comment <c>/*...*/</c> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
            <param name="value">The <see cref="T:System.String" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Single" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Double" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Char" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte" />[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte" />[] value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JValue">
            <summary>
            Represents a value in JSON (string, integer, date, etc).
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.WriteToAsync(Newtonsoft.Json.JsonWriter,System.Threading.CancellationToken,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" /> asynchronously.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(Newtonsoft.Json.Linq.JValue)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class from another <see cref="T:Newtonsoft.Json.Linq.JValue" /> object.
            </summary>
            <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JValue" /> object to copy from.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JValue.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
            <value>
                <c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CreateComment(System.String)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> comment with the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> comment with the given value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CreateString(System.String)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> string with the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> string with the given value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CreateNull">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> null value.
            </summary>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> null value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CreateUndefined">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> undefined value.
            </summary>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> undefined value.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JValue.Type">
            <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JValue.Value">
            <summary>
            Gets or sets the underlying token value.
            </summary>
            <value>The underlying token value.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" />s which will be used when writing the token.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.Equals(Newtonsoft.Json.Linq.JValue)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                <c>true</c> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <c>false</c>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <remarks>
                <c>ToString()</c> returns a non-JSON string value for tokens with a type of <see cref="F:Newtonsoft.Json.Linq.JTokenType.String" />.
            If you want the JSON for all token types then you should use <see cref="M:Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])" />.
            </remarks>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CompareTo(Newtonsoft.Json.Linq.JValue)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than <paramref name="obj" />.
            Zero
            This instance is equal to <paramref name="obj" />.
            Greater than zero
            This instance is greater than <paramref name="obj" />.
            </returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="obj" /> is not of the same type as this instance.
            </exception>
        </member>
        <member name="T:Newtonsoft.Json.Linq.LineInfoHandling">
            <summary>
            Specifies how line information is handled when loading JSON.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.LineInfoHandling.Ignore">
            <summary>
            Ignore line information.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.LineInfoHandling.Load">
            <summary>
            Load line information.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.MergeArrayHandling">
            <summary>
            Specifies how JSON arrays are merged together.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Concat">
            <summary>Concatenate arrays.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Union">
            <summary>Union arrays, skipping items that already exist.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Replace">
            <summary>Replace all array items.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Merge">
            <summary>Merge array items together, matched by index.</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.MergeNullValueHandling">
            <summary>
            Specifies how null value properties are merged.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeNullValueHandling.Ignore">
            <summary>
            The content's null value properties will be ignored during merging.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeNullValueHandling.Merge">
            <summary>
            The content's null value properties will be merged.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.MemberSerialization">
            <summary>
            Specifies the member serialization options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.MemberSerialization.OptOut">
            <summary>
            All public members are serialized by default. Members can be excluded using <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute" /> or <see cref="T:System.NonSerializedAttribute" />.
            This is the default member serialization mode.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.MemberSerialization.OptIn">
            <summary>
            Only members marked with <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> or <see cref="T:System.Runtime.Serialization.DataMemberAttribute" /> are serialized.
            This member serialization mode can also be set by marking the class with <see cref="T:System.Runtime.Serialization.DataContractAttribute" />.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.MemberSerialization.Fields">
            <summary>
            All public and private fields are serialized. Members can be excluded using <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute" /> or <see cref="T:System.NonSerializedAttribute" />.
            This member serialization mode can also be set by marking the class with <see cref="T:System.SerializableAttribute" />
            and setting IgnoreSerializableAttribute on <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> to <c>false</c>.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.MetadataPropertyHandling">
            <summary>
            Specifies metadata property handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.MetadataPropertyHandling.Default">
            <summary>
            Read metadata properties located at the start of a JSON object.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.MetadataPropertyHandling.ReadAhead">
            <summary>
            Read metadata properties located anywhere in a JSON object. Note that this setting will impact performance.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.MetadataPropertyHandling.Ignore">
            <summary>
            Do not try to read metadata properties.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.MissingMemberHandling">
            <summary>
            Specifies missing member handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.MissingMemberHandling.Ignore">
            <summary>
            Ignore a missing member and do not attempt to deserialize it.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.MissingMemberHandling.Error">
            <summary>
            Throw a <see cref="T:Newtonsoft.Json.JsonSerializationException" /> when a missing member is encountered during deserialization.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.NullValueHandling">
            <summary>
            Specifies null value handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
            <example>
                <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingObject" title="NullValueHandling Class" />
                <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingExample" title="NullValueHandling Ignore Example" />
            </example>
        </member>
        <member name="F:Newtonsoft.Json.NullValueHandling.Include">
            <summary>
            Include null values when serializing and deserializing objects.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.NullValueHandling.Ignore">
            <summary>
            Ignore null values when serializing and deserializing objects.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.ObjectCreationHandling">
            <summary>
            Specifies how object creation is handled by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ObjectCreationHandling.Auto">
            <summary>
            Reuse existing objects, create new objects when needed.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ObjectCreationHandling.Reuse">
            <summary>
            Only reuse existing objects.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ObjectCreationHandling.Replace">
            <summary>
            Always create new objects.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.PreserveReferencesHandling">
            <summary>
            Specifies reference handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            Note that references cannot be preserved when a value is set via a non-default constructor such as types that implement <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
            <example>
                <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="PreservingObjectReferencesOn" title="Preserve Object References" />
            </example>
        </member>
        <member name="F:Newtonsoft.Json.PreserveReferencesHandling.None">
            <summary>
            Do not preserve references when serializing types.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Objects">
            <summary>
            Preserve references when serializing into a JSON object structure.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Arrays">
            <summary>
            Preserve references when serializing into a JSON array structure.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.PreserveReferencesHandling.All">
            <summary>
            Preserve references when serializing.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.ReferenceLoopHandling">
            <summary>
            Specifies reference loop handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Error">
            <summary>
            Throw a <see cref="T:Newtonsoft.Json.JsonSerializationException" /> when a loop is encountered.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Ignore">
            <summary>
            Ignore loop references and do not serialize.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Serialize">
            <summary>
            Serialize loop references.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Required">
            <summary>
            Indicating whether a property is required.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Required.Default">
            <summary>
            The property is not required. The default state.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Required.AllowNull">
            <summary>
            The property must be defined in JSON but can be a null value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Required.Always">
            <summary>
            The property must be defined in JSON and cannot be a null value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Required.DisallowNull">
            <summary>
            The property is not required but it cannot be a null value.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.Extensions">
            <summary>
                <para>
            Contains the JSON schema extension methods.
            </para>
                <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Extensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)">
            <summary>
                <para>
            Determines whether the <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid.
            </para>
                <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
            <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
            <param name="schema">The schema to test with.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Extensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema,System.Collections.Generic.IList{System.String}@)">
            <summary>
                <para>
            Determines whether the <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid.
            </para>
                <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
            <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
            <param name="schema">The schema to test with.</param>
            <param name="errorMessages">When this method returns, contains any error messages generated while validating. </param>
            <returns>
                <c>true</c> if the specified <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)">
            <summary>
                <para>
            Validates the specified <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para>
                <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
            <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
            <param name="schema">The schema to test with.</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema,Newtonsoft.Json.Schema.ValidationEventHandler)">
            <summary>
                <para>
            Validates the specified <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para>
                <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
            <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
            <param name="schema">The schema to test with.</param>
            <param name="validationEventHandler">The validation event handler.</param>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchema">
            <summary>
                <para>
            An in-memory representation of a JSON Schema.
            </para>
                <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Required">
            <summary>
            Gets or sets whether the object is required.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.ReadOnly">
            <summary>
            Gets or sets whether the object is read-only.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Hidden">
            <summary>
            Gets or sets whether the object is visible to users.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Transient">
            <summary>
            Gets or sets whether the object is transient.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Description">
            <summary>
            Gets or sets the description of the object.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Type">
            <summary>
            Gets or sets the types of values allowed by the object.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Pattern">
            <summary>
            Gets or sets the pattern.
            </summary>
            <value>The pattern.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumLength">
            <summary>
            Gets or sets the minimum length.
            </summary>
            <value>The minimum length.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumLength">
            <summary>
            Gets or sets the maximum length.
            </summary>
            <value>The maximum length.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.DivisibleBy">
            <summary>
            Gets or sets a number that the value should be divisible by.
            </summary>
            <value>A number that the value should be divisible by.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Minimum">
            <summary>
            Gets or sets the minimum.
            </summary>
            <value>The minimum.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Maximum">
            <summary>
            Gets or sets the maximum.
            </summary>
            <value>The maximum.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.ExclusiveMinimum">
            <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the <c>minimum</c> attribute (<see cref="P:Newtonsoft.Json.Schema.JsonSchema.Minimum" />).
            </summary>
            <value>A flag indicating whether the value can not equal the number defined by the <c>minimum</c> attribute (<see cref="P:Newtonsoft.Json.Schema.JsonSchema.Minimum" />).</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.ExclusiveMaximum">
            <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the <c>maximum</c> attribute (<see cref="P:Newtonsoft.Json.Schema.JsonSchema.Maximum" />).
            </summary>
            <value>A flag indicating whether the value can not equal the number defined by the <c>maximum</c> attribute (<see cref="P:Newtonsoft.Json.Schema.JsonSchema.Maximum" />).</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumItems">
            <summary>
            Gets or sets the minimum number of items.
            </summary>
            <value>The minimum number of items.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumItems">
            <summary>
            Gets or sets the maximum number of items.
            </summary>
            <value>The maximum number of items.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Items">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of items.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of items.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.PositionalItemsValidation">
            <summary>
            Gets or sets a value indicating whether items in an array are validated using the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> instance at their array position from <see cref="P:Newtonsoft.Json.Schema.JsonSchema.Items" />.
            </summary>
            <value>
                <c>true</c> if items are validated using their array position; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.AdditionalItems">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional items.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional items.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalItems">
            <summary>
            Gets or sets a value indicating whether additional items are allowed.
            </summary>
            <value>
                <c>true</c> if additional items are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.UniqueItems">
            <summary>
            Gets or sets whether the array items must be unique.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Properties">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of properties.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of properties.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.AdditionalProperties">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional properties.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional properties.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.PatternProperties">
            <summary>
            Gets or sets the pattern properties.
            </summary>
            <value>The pattern properties.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalProperties">
            <summary>
            Gets or sets a value indicating whether additional properties are allowed.
            </summary>
            <value>
                <c>true</c> if additional properties are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Requires">
            <summary>
            Gets or sets the required property if this property is present.
            </summary>
            <value>The required property if this property is present.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Enum">
            <summary>
            Gets or sets the a collection of valid enum values allowed.
            </summary>
            <value>A collection of valid enum values allowed.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Disallow">
            <summary>
            Gets or sets disallowed types.
            </summary>
            <value>The disallowed types.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Default">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Extends">
            <summary>
            Gets or sets the collection of <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> that this schema extends.
            </summary>
            <value>The collection of <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> that this schema extends.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Format">
            <summary>
            Gets or sets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader)">
            <summary>
            Reads a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the JSON Schema to read.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> object representing the JSON Schema.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Reads a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the JSON Schema to read.</param>
            <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> to use when resolving schema references.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> object representing the JSON Schema.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String)">
            <summary>
            Load a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from a string that contains JSON Schema.
            </summary>
            <param name="json">A <see cref="T:System.String" /> that contains JSON Schema.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> populated from the string that contains JSON Schema.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String,Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Load a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from a string that contains JSON Schema using the specified <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" />.
            </summary>
            <param name="json">A <see cref="T:System.String" /> that contains JSON Schema.</param>
            <param name="resolver">The resolver.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> populated from the string that contains JSON Schema.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes this schema to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Writes this schema to a <see cref="T:Newtonsoft.Json.JsonWriter" /> using the specified <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" />.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
            <param name="resolver">The resolver used.</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchemaException">
            <summary>
                <para>
            Returns detailed information about the schema exception.
            </para>
                <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LineNumber">
            <summary>
            Gets the line number indicating where the error occurred.
            </summary>
            <value>The line number indicating where the error occurred.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LinePosition">
            <summary>
            Gets the line position indicating where the error occurred.
            </summary>
            <value>The line position indicating where the error occurred.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchemaGenerator">
            <summary>
                <para>
            Generates a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from a specified <see cref="T:System.Type" />.
            </para>
                <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.UndefinedSchemaIdHandling">
            <summary>
            Gets or sets how undefined schemas are handled by the serializer.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.ContractResolver">
            <summary>
            Gets or sets the contract resolver.
            </summary>
            <value>The contract resolver.</value>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type)">
            <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
            <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> used to resolve schema references.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,System.Boolean)">
            <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
            <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> will be nullable.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver,System.Boolean)">
            <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
            <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> used to resolve schema references.</param>
            <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> will be nullable.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchemaResolver">
            <summary>
                <para>
            Resolves <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from an id.
            </para>
                <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaResolver.LoadedSchemas">
            <summary>
            Gets or sets the loaded schemas.
            </summary>
            <value>The loaded schemas.</value>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(System.String)">
            <summary>
            Gets a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> for the specified reference.
            </summary>
            <param name="reference">The id.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> for the specified reference.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchemaType">
            <summary>
                <para>
            The value types allowed by the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" />.
            </para>
                <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.None">
            <summary>
            No type specified.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.String">
            <summary>
            String type.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Float">
            <summary>
            Float type.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Integer">
            <summary>
            Integer type.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Boolean">
            <summary>
            Boolean type.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Object">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Array">
            <summary>
            Array type.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Null">
            <summary>
            Null type.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Any">
            <summary>
            Any type.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling">
            <summary>
                <para>
            Specifies undefined schema Id handling options for the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaGenerator" />.
            </para>
                <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.None">
            <summary>
            Do not infer a schema Id.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseTypeName">
            <summary>
            Use the .NET type name as the schema Id.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseAssemblyQualifiedName">
            <summary>
            Use the assembly qualified .NET type name as the schema Id.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.ValidationEventArgs">
            <summary>
                <para>
            Returns detailed information related to the <see cref="T:Newtonsoft.Json.Schema.ValidationEventHandler" />.
            </para>
                <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Exception">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> associated with the validation error.
            </summary>
            <value>The JsonSchemaException associated with the validation error.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Path">
            <summary>
            Gets the path of the JSON location where the validation error occurred.
            </summary>
            <value>The path of the JSON location where the validation error occurred.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Message">
            <summary>
            Gets the text description corresponding to the validation error.
            </summary>
            <value>The text description.</value>
        </member>
        <member name="T:Newtonsoft.Json.Schema.ValidationEventHandler">
            <summary>
                <para>
            Represents the callback method that will handle JSON schema validation events and the <see cref="T:Newtonsoft.Json.Schema.ValidationEventArgs" />.
            </para>
                <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy">
            <summary>
            A camel case naming strategy.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy" /> class.
            </summary>
            <param name="processDictionaryKeys">
            A flag indicating whether dictionary keys should be processed.
            </param>
            <param name="overrideSpecifiedNames">
            A flag indicating whether explicitly specified property names should be processed,
            e.g. a property name customized with a <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" />.
            </param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy" /> class.
            </summary>
            <param name="processDictionaryKeys">
            A flag indicating whether dictionary keys should be processed.
            </param>
            <param name="overrideSpecifiedNames">
            A flag indicating whether explicitly specified property names should be processed,
            e.g. a property name customized with a <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" />.
            </param>
            <param name="processExtensionDataNames">
            A flag indicating whether extension data names should be processed.
            </param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
            <param name="name">The property name to resolve.</param>
            <returns>The resolved property name.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver">
            <summary>
            Resolves member mappings for a type, camel casing property names.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DefaultContractResolver">
            <summary>
            Used by <see cref="T:Newtonsoft.Json.JsonSerializer" /> to resolve a <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for a given <see cref="T:System.Type" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DynamicCodeGeneration">
            <summary>
            Gets a value indicating whether members are being get and set using dynamic code generation.
            This value is determined by the runtime permissions available.
            </summary>
            <value>
                <c>true</c> if using dynamic code generation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultMembersSearchFlags">
            <summary>
            Gets or sets the default members search flags.
            </summary>
            <value>The default members search flags.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.SerializeCompilerGeneratedMembers">
            <summary>
            Gets or sets a value indicating whether compiler generated members should be serialized.
            </summary>
            <value>
                <c>true</c> if serialized compiler generated members; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableInterface">
            <summary>
            Gets or sets a value indicating whether to ignore the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface when serializing and deserializing types.
            </summary>
            <value>
                <c>true</c> if the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableAttribute">
            <summary>
            Gets or sets a value indicating whether to ignore the <see cref="T:System.SerializableAttribute" /> attribute when serializing and deserializing types.
            </summary>
            <value>
                <c>true</c> if the <see cref="T:System.SerializableAttribute" /> attribute will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreIsSpecifiedMembers">
            <summary>
            Gets or sets a value indicating whether to ignore IsSpecified members when serializing and deserializing types.
            </summary>
            <value>
                <c>true</c> if the IsSpecified members will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreShouldSerializeMembers">
            <summary>
            Gets or sets a value indicating whether to ignore ShouldSerialize members when serializing and deserializing types.
            </summary>
            <value>
                <c>true</c> if the ShouldSerialize members will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.NamingStrategy">
            <summary>
            Gets or sets the naming strategy used to resolve how property names and dictionary keys are serialized.
            </summary>
            <value>The naming strategy used to resolve how property names and dictionary keys are serialized.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)">
            <summary>
            Gets the serializable members for the type.
            </summary>
            <param name="objectType">The type to get serializable members for.</param>
            <returns>The serializable members for the type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo,Newtonsoft.Json.Serialization.JsonPropertyCollection)">
            <summary>
            Creates the constructor parameters.
            </summary>
            <param name="constructor">The constructor to create properties for.</param>
            <param name="memberProperties">The type's member properties.</param>
            <returns>Properties for the given <see cref="T:System.Reflection.ConstructorInfo" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty,System.Reflection.ParameterInfo)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.ParameterInfo" />.
            </summary>
            <param name="matchingMemberProperty">The matching member property.</param>
            <param name="parameterInfo">The constructor parameter.</param>
            <returns>A created <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.ParameterInfo" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)">
            <summary>
            Resolves the default <see cref="T:Newtonsoft.Json.JsonConverter" /> for the contract.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>The contract's default <see cref="T:Newtonsoft.Json.JsonConverter" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateISerializableContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDynamicContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract" /> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract" /> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)">
            <summary>
            Determines which contract type is created for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
            <summary>
            Creates properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract" />.
            </summary>
            <param name="type">The type to create properties for.</param>
            /// <param name="memberSerialization">The member serialization mode for the type.</param><returns>Properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract" />.</returns></member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
            <summary>
            Creates the <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> used by the serializer to get and set values from a member.
            </summary>
            <param name="member">The member.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> used by the serializer to get and set values from a member.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.MemberInfo" />.
            </summary>
            <param name="memberSerialization">The member's parent <see cref="T:Newtonsoft.Json.MemberSerialization" />.</param>
            <param name="member">The member to create a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for.</param>
            <returns>A created <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.MemberInfo" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)">
            <summary>
            Resolves the name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Resolved name of the property.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveExtensionDataName(System.String)">
            <summary>
            Resolves the name of the extension data. By default no changes are made to extension data names.
            </summary>
            <param name="extensionDataName">Name of the extension data.</param>
            <returns>Resolved name of the extension data.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveDictionaryKey(System.String)">
            <summary>
            Resolves the key of the dictionary. By default <see cref="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)" /> is used to resolve dictionary keys.
            </summary>
            <param name="dictionaryKey">Key of the dictionary.</param>
            <returns>Resolved key of the dictionary.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetResolvedPropertyName(System.String)">
            <summary>
            Gets the resolved name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Name of the property.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DefaultNamingStrategy">
            <summary>
            The default naming strategy. Property names and dictionary keys are unchanged.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultNamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
            <param name="name">The property name to resolve.</param>
            <returns>The resolved property name.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DefaultSerializationBinder">
            <summary>
            The default serialization binder used when resolving and loading classes from type names.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DefaultSerializationBinder" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(System.String,System.String)">
            <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly" /> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type" /> name of the serialized object.</param>
            <returns>
            The type of the object the formatter creates a new instance of.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToName(System.Type,System.String@,System.String@)">
            <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
            <param name="serializedType">The type of the object the formatter creates a new instance of.</param>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly" /> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type" /> name of the serialized object.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter">
            <summary>
            Represents a trace writer that writes to the application's <see cref="T:System.Diagnostics.TraceListener" /> instances.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter.LevelFilter">
            <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <see cref="F:System.Diagnostics.TraceLevel.Info" /> will exclude <see cref="F:System.Diagnostics.TraceLevel.Verbose" /> messages and include <see cref="F:System.Diagnostics.TraceLevel.Info" />,
            <see cref="F:System.Diagnostics.TraceLevel.Warning" /> and <see cref="F:System.Diagnostics.TraceLevel.Error" /> messages.
            </summary>
            <value>
            The <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
            <param name="level">The <see cref="T:System.Diagnostics.TraceLevel" /> at which to write this trace.</param>
            <param name="message">The trace message.</param>
            <param name="ex">The trace exception. This parameter is optional.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DynamicValueProvider">
            <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo" /> using dynamic methods.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DynamicValueProvider" /> class.
            </summary>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ErrorContext">
            <summary>
            Provides information surrounding an error.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Error">
            <summary>
            Gets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.OriginalObject">
            <summary>
            Gets the original object that caused the error.
            </summary>
            <value>The original object that caused the error.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Member">
            <summary>
            Gets the member that caused the error.
            </summary>
            <value>The member that caused the error.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Path">
            <summary>
            Gets the path of the JSON location where the error occurred.
            </summary>
            <value>The path of the JSON location where the error occurred.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Handled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.ErrorContext" /> is handled.
            </summary>
            <value>
                <c>true</c> if handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ErrorEventArgs">
            <summary>
            Provides data for the Error event.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.CurrentObject">
            <summary>
            Gets the current object the error event is being raised against.
            </summary>
            <value>The current object the error event is being raised against.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.ErrorContext">
            <summary>
            Gets the error context.
            </summary>
            <value>The error context.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ErrorEventArgs.#ctor(System.Object,Newtonsoft.Json.Serialization.ErrorContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ErrorEventArgs" /> class.
            </summary>
            <param name="currentObject">The current object.</param>
            <param name="errorContext">The error context.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ExpressionValueProvider">
            <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo" /> using dynamic methods.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ExpressionValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ExpressionValueProvider" /> class.
            </summary>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ExpressionValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ExpressionValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.IAttributeProvider">
            <summary>
            Provides methods to get attributes.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IAttributeProvider.GetAttributes(System.Boolean)">
            <summary>
            Returns a collection of all of the attributes, or an empty collection if there are no attributes.
            </summary>
            <param name="inherit">When <c>true</c>, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>A collection of <see cref="T:System.Attribute" />s, or an empty collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IAttributeProvider.GetAttributes(System.Type,System.Boolean)">
            <summary>
            Returns a collection of attributes, identified by type, or an empty collection if there are no attributes.
            </summary>
            <param name="attributeType">The type of the attributes.</param>
            <param name="inherit">When <c>true</c>, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>A collection of <see cref="T:System.Attribute" />s, or an empty collection.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.IContractResolver">
            <summary>
            Used by <see cref="T:Newtonsoft.Json.JsonSerializer" /> to resolve a <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for a given <see cref="T:System.Type" />.
            </summary>
            <example>
                <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverObject" title="IContractResolver Class" />
                <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverExample" title="IContractResolver Example" />
            </example>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.IReferenceResolver">
            <summary>
            Used to resolve references when serializing and deserializing JSON by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.ResolveReference(System.Object,System.String)">
            <summary>
            Resolves a reference to its object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="reference">The reference to resolve.</param>
            <returns>The object that was resolved from the reference.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.GetReference(System.Object,System.Object)">
            <summary>
            Gets the reference for the specified object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="value">The object to get a reference for.</param>
            <returns>The reference to the object.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.IsReferenced(System.Object,System.Object)">
            <summary>
            Determines whether the specified object is referenced.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="value">The object to test for a reference.</param>
            <returns>
                <c>true</c> if the specified object is referenced; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.AddReference(System.Object,System.String,System.Object)">
            <summary>
            Adds a reference to the specified object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="reference">The reference.</param>
            <param name="value">The object to reference.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ISerializationBinder">
            <summary>
            Allows users to control class loading and mandate what class to load.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ISerializationBinder.BindToType(System.String,System.String)">
            <summary>
            When implemented, controls the binding of a serialized object to a type.
            </summary>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly" /> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type" /> name of the serialized object</param>
            <returns>The type of the object the formatter creates a new instance of.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ISerializationBinder.BindToName(System.Type,System.String@,System.String@)">
            <summary>
            When implemented, controls the binding of a serialized object to a type.
            </summary>
            <param name="serializedType">The type of the object the formatter creates a new instance of.</param>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly" /> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type" /> name of the serialized object.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ITraceWriter">
            <summary>
            Represents a trace writer.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ITraceWriter.LevelFilter">
            <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <see cref="F:System.Diagnostics.TraceLevel.Info" /> will exclude <see cref="F:System.Diagnostics.TraceLevel.Verbose" /> messages and include <see cref="F:System.Diagnostics.TraceLevel.Info" />,
            <see cref="F:System.Diagnostics.TraceLevel.Warning" /> and <see cref="F:System.Diagnostics.TraceLevel.Error" /> messages.
            </summary>
            <value>The <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ITraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
            <param name="level">The <see cref="T:System.Diagnostics.TraceLevel" /> at which to write this trace.</param>
            <param name="message">The trace message.</param>
            <param name="ex">The trace exception. This parameter is optional.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.IValueProvider">
            <summary>
            Provides methods to get and set values.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonArrayContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.CollectionItemType">
            <summary>
            Gets the <see cref="T:System.Type" /> of the collection items.
            </summary>
            <value>The <see cref="T:System.Type" /> of the collection items.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.IsMultidimensionalArray">
            <summary>
            Gets a value indicating whether the collection type is a multidimensional array.
            </summary>
            <value>
                <c>true</c> if the collection type is a multidimensional array; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.OverrideCreator">
            <summary>
            Gets or sets the function used to create the object. When set this function will override <see cref="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator" />.
            </summary>
            <value>The function used to create the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.HasParameterizedCreator">
            <summary>
            Gets a value indicating whether the creator has a parameter with the collection values.
            </summary>
            <value>
                <c>true</c> if the creator has a parameter with the collection values; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonArrayContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonContainerContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemConverter">
            <summary>
            Gets or sets the default collection items <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemIsReference">
            <summary>
            Gets or sets a value indicating whether the collection items preserve object references.
            </summary>
            <value>
                <c>true</c> if collection items preserve object references; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the collection item reference loop handling.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemTypeNameHandling">
            <summary>
            Gets or sets the collection item type name handling.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonContainerContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonContainerContract" /> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.SerializationCallback">
            <summary>
            Handles <see cref="T:Newtonsoft.Json.JsonSerializer" /> serialization callback events.
            </summary>
            <param name="o">The object that raised the callback event.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.SerializationErrorCallback">
            <summary>
            Handles <see cref="T:Newtonsoft.Json.JsonSerializer" /> serialization error callback events.
            </summary>
            <param name="o">The object that raised the callback event.</param>
            <param name="context">The streaming context.</param>
            <param name="errorContext">The error context.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ExtensionDataSetter">
            <summary>
            Sets extension data for an object during deserialization.
            </summary>
            <param name="o">The object to set extension data on.</param>
            <param name="key">The extension data key.</param>
            <param name="value">The extension data value.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ExtensionDataGetter">
            <summary>
            Gets extension data for an object during serialization.
            </summary>
            <param name="o">The object to set extension data on.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.UnderlyingType">
            <summary>
            Gets the underlying type for the contract.
            </summary>
            <value>The underlying type for the contract.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.CreatedType">
            <summary>
            Gets or sets the type created during deserialization.
            </summary>
            <value>The type created during deserialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.IsReference">
            <summary>
            Gets or sets whether this type contract is serialized as a reference.
            </summary>
            <value>Whether this type contract is serialized as a reference.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.Converter">
            <summary>
            Gets or sets the default <see cref="T:Newtonsoft.Json.JsonConverter" /> for this contract.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.InternalConverter">
            <summary>
            Gets the internally resolved <see cref="T:Newtonsoft.Json.JsonConverter" /> for the contract's type.
            This converter is used as a fallback converter when no other converter is resolved.
            Setting <see cref="P:Newtonsoft.Json.Serialization.JsonContract.Converter" /> will always override this converter.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializedCallbacks">
            <summary>
            Gets or sets all methods called immediately after deserialization of the object.
            </summary>
            <value>The methods called immediately after deserialization of the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializingCallbacks">
            <summary>
            Gets or sets all methods called during deserialization of the object.
            </summary>
            <value>The methods called during deserialization of the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializedCallbacks">
            <summary>
            Gets or sets all methods called after serialization of the object graph.
            </summary>
            <value>The methods called after serialization of the object graph.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializingCallbacks">
            <summary>
            Gets or sets all methods called before serialization of the object.
            </summary>
            <value>The methods called before serialization of the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnErrorCallbacks">
            <summary>
            Gets or sets all method called when an error is thrown during the serialization of the object.
            </summary>
            <value>The methods called when an error is thrown during the serialization of the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator">
            <summary>
            Gets or sets the default creator method used to create the object.
            </summary>
            <value>The default creator method used to create the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreatorNonPublic">
            <summary>
            Gets or sets a value indicating whether the default creator is non-public.
            </summary>
            <value>
                <c>true</c> if the default object creator is non-public; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonDictionaryContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryKeyResolver">
            <summary>
            Gets or sets the dictionary key resolver.
            </summary>
            <value>The dictionary key resolver.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryKeyType">
            <summary>
            Gets the <see cref="T:System.Type" /> of the dictionary keys.
            </summary>
            <value>The <see cref="T:System.Type" /> of the dictionary keys.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryValueType">
            <summary>
            Gets the <see cref="T:System.Type" /> of the dictionary values.
            </summary>
            <value>The <see cref="T:System.Type" /> of the dictionary values.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.OverrideCreator">
            <summary>
            Gets or sets the function used to create the object. When set this function will override <see cref="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator" />.
            </summary>
            <value>The function used to create the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.HasParameterizedCreator">
            <summary>
            Gets a value indicating whether the creator has a parameter with the dictionary values.
            </summary>
            <value>
                <c>true</c> if the creator has a parameter with the dictionary values; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonDictionaryContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonDynamicContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDynamicContract.Properties">
            <summary>
            Gets the object's properties.
            </summary>
            <value>The object's properties.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDynamicContract.PropertyNameResolver">
            <summary>
            Gets or sets the property name resolver.
            </summary>
            <value>The property name resolver.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonDynamicContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract" /> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonISerializableContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonISerializableContract.ISerializableCreator">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.ISerializable" /> object constructor.
            </summary>
            <value>The <see cref="T:System.Runtime.Serialization.ISerializable" /> object constructor.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonISerializableContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonLinqContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonLinqContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonObjectContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.MemberSerialization">
            <summary>
            Gets or sets the object member serialization.
            </summary>
            <value>The member object serialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.MissingMemberHandling">
            <summary>
            Gets or sets the missing member handling used when deserializing this object.
            </summary>
            <value>The missing member handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ItemRequired">
            <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
            <value>
            	A value indicating whether the object's properties are required.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ItemNullValueHandling">
            <summary>
            Gets or sets how the object's properties with null values are handled during serialization and deserialization.
            </summary>
            <value>How the object's properties with null values are handled during serialization and deserialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.Properties">
            <summary>
            Gets the object's properties.
            </summary>
            <value>The object's properties.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.CreatorParameters">
            <summary>
            Gets a collection of <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> instances that define the parameters used with <see cref="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideCreator" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideCreator">
            <summary>
            Gets or sets the function used to create the object. When set this function will override <see cref="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator" />.
            This function is called with a collection of arguments which are defined by the <see cref="P:Newtonsoft.Json.Serialization.JsonObjectContract.CreatorParameters" /> collection.
            </summary>
            <value>The function used to create the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataSetter">
            <summary>
            Gets or sets the extension data setter.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataGetter">
            <summary>
            Gets or sets the extension data getter.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataValueType">
            <summary>
            Gets or sets the extension data value type.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataNameResolver">
            <summary>
            Gets or sets the extension data name resolver.
            </summary>
            <value>The extension data name resolver.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonObjectContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPrimitiveContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonProperty">
            <summary>
            Maps a JSON property to a .NET member or constructor parameter.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DeclaringType">
            <summary>
            Gets or sets the type that declared this property.
            </summary>
            <value>The type that declared this property.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Order">
            <summary>
            Gets or sets the order of serialization of a member.
            </summary>
            <value>The numeric order of serialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.UnderlyingName">
            <summary>
            Gets or sets the name of the underlying member or parameter.
            </summary>
            <value>The name of the underlying member or parameter.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ValueProvider">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> that will get and set the <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> during serialization.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> that will get and set the <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> during serialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.AttributeProvider">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IAttributeProvider" /> for this property.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Serialization.IAttributeProvider" /> for this property.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyType">
            <summary>
            Gets or sets the type of the property.
            </summary>
            <value>The type of the property.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Converter">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.JsonConverter" /> for the property.
            If set this converter takes precedence over the contract converter for the property type.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.MemberConverter">
            <summary>
            Gets or sets the member converter.
            </summary>
            <value>The member converter.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Ignored">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is ignored.
            </summary>
            <value>
                <c>true</c> if ignored; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Readable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is readable.
            </summary>
            <value>
                <c>true</c> if readable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Writable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is writable.
            </summary>
            <value>
                <c>true</c> if writable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.HasMemberAttribute">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> has a member attribute.
            </summary>
            <value>
                <c>true</c> if has a member attribute; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is required.
            </summary>
            <value>A value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is required.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.IsRequiredSpecified">
            <summary>
            Gets a value indicating whether <see cref="P:Newtonsoft.Json.Serialization.JsonProperty.Required" /> has a value specified.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.IsReference">
            <summary>
            Gets or sets a value indicating whether this property preserves object references.
            </summary>
            <value>
                <c>true</c> if this instance is reference; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.NullValueHandling">
            <summary>
            Gets or sets the property null value handling.
            </summary>
            <value>The null value handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValueHandling">
            <summary>
            Gets or sets the property default value handling.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ReferenceLoopHandling">
            <summary>
            Gets or sets the property reference loop handling.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ObjectCreationHandling">
            <summary>
            Gets or sets the property object creation handling.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.TypeNameHandling">
            <summary>
            Gets or sets or sets the type name handling.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ShouldSerialize">
            <summary>
            Gets or sets a predicate used to determine whether the property should be serialized.
            </summary>
            <value>A predicate used to determine whether the property should be serialized.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ShouldDeserialize">
            <summary>
            Gets or sets a predicate used to determine whether the property should be deserialized.
            </summary>
            <value>A predicate used to determine whether the property should be deserialized.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.GetIsSpecified">
            <summary>
            Gets or sets a predicate used to determine whether the property should be serialized.
            </summary>
            <value>A predicate used to determine whether the property should be serialized.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.SetIsSpecified">
            <summary>
            Gets or sets an action used to set whether the property has been deserialized.
            </summary>
            <value>An action used to set whether the property has been deserialized.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonProperty.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemConverter">
            <summary>
            Gets or sets the converter used when serializing the property's collection items.
            </summary>
            <value>The collection's items converter.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemIsReference">
            <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
            <value>Whether this property's collection items are serialized as a reference.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemTypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items type name handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items reference loop handling.</value>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonPropertyCollection">
            <summary>
            A collection of <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> objects.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonPropertyCollection" /> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetKeyForItem(Newtonsoft.Json.Serialization.JsonProperty)">
            <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
            <param name="item">The element from which to extract the key.</param>
            <returns>The key for the specified element.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.AddProperty(Newtonsoft.Json.Serialization.JsonProperty)">
            <summary>
            Adds a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> object.
            </summary>
            <param name="property">The property to add to the collection.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetClosestMatchProperty(System.String)">
            <summary>
            Gets the closest matching <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> object.
            First attempts to get an exact case match of <paramref name="propertyName" /> and then
            a case insensitive match.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>A matching property if found.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetProperty(System.String,System.StringComparison)">
            <summary>
            Gets a property by property name.
            </summary>
            <param name="propertyName">The name of the property to get.</param>
            <param name="comparisonType">Type property name string comparison.</param>
            <returns>A matching property if found.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonStringContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonStringContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonTypeReflector.CreateJsonConverterInstance(System.Type,System.Object[])">
            <summary>
            Lookup and create an instance of the <see cref="T:Newtonsoft.Json.JsonConverter" /> type described by the argument.
            </summary>
            <param name="converterType">The <see cref="T:Newtonsoft.Json.JsonConverter" /> type to create.</param>
            <param name="args">Optional arguments to pass to an initializing constructor of the JsonConverter.
            If <c>null</c>, the default constructor is used.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.KebabCaseNamingStrategy">
            <summary>
            A kebab case naming strategy.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.KebabCaseNamingStrategy.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.KebabCaseNamingStrategy" /> class.
            </summary>
            <param name="processDictionaryKeys">
            A flag indicating whether dictionary keys should be processed.
            </param>
            <param name="overrideSpecifiedNames">
            A flag indicating whether explicitly specified property names should be processed,
            e.g. a property name customized with a <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" />.
            </param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.KebabCaseNamingStrategy.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.KebabCaseNamingStrategy" /> class.
            </summary>
            <param name="processDictionaryKeys">
            A flag indicating whether dictionary keys should be processed.
            </param>
            <param name="overrideSpecifiedNames">
            A flag indicating whether explicitly specified property names should be processed,
            e.g. a property name customized with a <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" />.
            </param>
            <param name="processExtensionDataNames">
            A flag indicating whether extension data names should be processed.
            </param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.KebabCaseNamingStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.KebabCaseNamingStrategy" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.KebabCaseNamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
            <param name="name">The property name to resolve.</param>
            <returns>The resolved property name.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.MemoryTraceWriter">
            <summary>
            Represents a trace writer that writes to memory. When the trace message limit is
            reached then old trace messages will be removed as new messages are added.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.MemoryTraceWriter.LevelFilter">
            <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <see cref="F:System.Diagnostics.TraceLevel.Info" /> will exclude <see cref="F:System.Diagnostics.TraceLevel.Verbose" /> messages and include <see cref="F:System.Diagnostics.TraceLevel.Info" />,
            <see cref="F:System.Diagnostics.TraceLevel.Warning" /> and <see cref="F:System.Diagnostics.TraceLevel.Error" /> messages.
            </summary>
            <value>
            The <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.MemoryTraceWriter" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
            <param name="level">The <see cref="T:System.Diagnostics.TraceLevel" /> at which to write this trace.</param>
            <param name="message">The trace message.</param>
            <param name="ex">The trace exception. This parameter is optional.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.GetTraceMessages">
            <summary>
            Returns an enumeration of the most recent trace messages.
            </summary>
            <returns>An enumeration of the most recent trace messages.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> of the most recent trace messages.
            </summary>
            <returns>
            A <see cref="T:System.String" /> of the most recent trace messages.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.NamingStrategy">
            <summary>
            A base class for resolving how property names and dictionary keys are serialized.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.NamingStrategy.ProcessDictionaryKeys">
            <summary>
            A flag indicating whether dictionary keys should be processed.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.NamingStrategy.ProcessExtensionDataNames">
            <summary>
            A flag indicating whether extension data names should be processed.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.NamingStrategy.OverrideSpecifiedNames">
            <summary>
            A flag indicating whether explicitly specified property names,
            e.g. a property name customized with a <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" />, should be processed.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.NamingStrategy.GetPropertyName(System.String,System.Boolean)">
            <summary>
            Gets the serialized name for a given property name.
            </summary>
            <param name="name">The initial property name.</param>
            <param name="hasSpecifiedName">A flag indicating whether the property has had a name explicitly specified.</param>
            <returns>The serialized property name.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.NamingStrategy.GetExtensionDataName(System.String)">
            <summary>
            Gets the serialized name for a given extension data name.
            </summary>
            <param name="name">The initial extension data name.</param>
            <returns>The serialized extension data name.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.NamingStrategy.GetDictionaryKey(System.String)">
            <summary>
            Gets the serialized key for a given dictionary key.
            </summary>
            <param name="key">The initial dictionary key.</param>
            <returns>The serialized dictionary key.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.NamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
            <param name="name">The property name to resolve.</param>
            <returns>The resolved property name.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.NamingStrategy.GetHashCode">
            <summary>
            Hash code calculation
            </summary>
            <returns />
        </member>
        <member name="M:Newtonsoft.Json.Serialization.NamingStrategy.Equals(System.Object)">
            <summary>
            Object equality implementation
            </summary>
            <param name="obj" />
            <returns />
        </member>
        <member name="M:Newtonsoft.Json.Serialization.NamingStrategy.Equals(Newtonsoft.Json.Serialization.NamingStrategy)">
            <summary>
            Compare to another NamingStrategy
            </summary>
            <param name="other" />
            <returns />
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ObjectConstructor`1">
            <summary>
            Represents a method that constructs an object.
            </summary>
            <typeparam name="T">The object type to create.</typeparam>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.OnErrorAttribute">
            <summary>
            When applied to a method, specifies that the method is called when an error occurs serializing an object.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ReflectionAttributeProvider">
            <summary>
            Provides methods to get attributes from a <see cref="T:System.Type" />, <see cref="T:System.Reflection.MemberInfo" />, <see cref="T:System.Reflection.ParameterInfo" /> or <see cref="T:System.Reflection.Assembly" />.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionAttributeProvider.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ReflectionAttributeProvider" /> class.
            </summary>
            <param name="attributeProvider">The instance to get attributes for. This parameter should be a <see cref="T:System.Type" />, <see cref="T:System.Reflection.MemberInfo" />, <see cref="T:System.Reflection.ParameterInfo" /> or <see cref="T:System.Reflection.Assembly" />.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionAttributeProvider.GetAttributes(System.Boolean)">
            <summary>
            Returns a collection of all of the attributes, or an empty collection if there are no attributes.
            </summary>
            <param name="inherit">When <c>true</c>, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>A collection of <see cref="T:System.Attribute" />s, or an empty collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionAttributeProvider.GetAttributes(System.Type,System.Boolean)">
            <summary>
            Returns a collection of attributes, identified by type, or an empty collection if there are no attributes.
            </summary>
            <param name="attributeType">The type of the attributes.</param>
            <param name="inherit">When <c>true</c>, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>A collection of <see cref="T:System.Attribute" />s, or an empty collection.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ReflectionValueProvider">
            <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo" /> using reflection.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ReflectionValueProvider" /> class.
            </summary>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy">
            <summary>
            A snake case naming strategy.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy" /> class.
            </summary>
            <param name="processDictionaryKeys">
            A flag indicating whether dictionary keys should be processed.
            </param>
            <param name="overrideSpecifiedNames">
            A flag indicating whether explicitly specified property names should be processed,
            e.g. a property name customized with a <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" />.
            </param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy" /> class.
            </summary>
            <param name="processDictionaryKeys">
            A flag indicating whether dictionary keys should be processed.
            </param>
            <param name="overrideSpecifiedNames">
            A flag indicating whether explicitly specified property names should be processed,
            e.g. a property name customized with a <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" />.
            </param>
            <param name="processExtensionDataNames">
            A flag indicating whether extension data names should be processed.
            </param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
            <param name="name">The property name to resolve.</param>
            <returns>The resolved property name.</returns>
        </member>
        <member name="T:Newtonsoft.Json.StringEscapeHandling">
            <summary>
            Specifies how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.StringEscapeHandling.Default">
            <summary>
            Only control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.StringEscapeHandling.EscapeNonAscii">
            <summary>
            All non-ASCII and control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.StringEscapeHandling.EscapeHtml">
            <summary>
            HTML (&lt;, &gt;, &amp;, ', ") and control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.TypeNameAssemblyFormatHandling">
            <summary>
            Indicates the method that will be used during deserialization for locating and loading assemblies.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameAssemblyFormatHandling.Simple">
            <summary>
            In simple mode, the assembly used during deserialization need not match exactly the assembly used during serialization. Specifically, the version numbers need not match as the <c>LoadWithPartialName</c> method of the <see cref="T:System.Reflection.Assembly" /> class is used to load the assembly.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameAssemblyFormatHandling.Full">
            <summary>
            In full mode, the assembly used during deserialization must match exactly the assembly used during serialization. The <c>Load</c> method of the <see cref="T:System.Reflection.Assembly" /> class is used to load the assembly.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.TypeNameHandling">
            <summary>
            Specifies type name handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
            <remarks>
                <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> should be used with caution when your application deserializes JSON from an external source.
            Incoming types should be validated with a custom <see cref="P:Newtonsoft.Json.JsonSerializer.SerializationBinder" />
            when deserializing with a value other than <see cref="F:Newtonsoft.Json.TypeNameHandling.None" />.
            </remarks>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.None">
            <summary>
            Do not include the .NET type name when serializing types.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.Objects">
            <summary>
            Include the .NET type name when serializing into a JSON object structure.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.Arrays">
            <summary>
            Include the .NET type name when serializing into a JSON array structure.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.All">
            <summary>
            Always include the .NET type name when serializing.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.Auto">
            <summary>
            Include the .NET type name when the type of the object being serialized is not the same as its declared type.
            Note that this doesn't include the root serialized object by default. To include the root object's type name in JSON
            you must specify a root type object with <see cref="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft.Json.JsonSerializerSettings)" />
            or <see cref="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object,System.Type)" />.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Determines whether the collection is <c>null</c> or empty.
            </summary>
            <param name="collection">The collection.</param>
            <returns>
                <c>true</c> if the collection is <c>null</c> or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified collection to the specified generic <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="initial">The list to add to.</param>
            <param name="collection">The collection of elements to add.</param>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(System.Object,System.Globalization.CultureInfo,System.Type)">
            <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
            <param name="initialValue">The value to convert.</param>
            <param name="culture">The culture to use when converting.</param>
            <param name="targetType">The type to convert or cast the value to.</param>
            <returns>
            The converted type. If conversion was unsuccessful, the initial value
            is returned if assignable to the target type.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodWithResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback,Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic that returns a result
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodReturnLast(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodNoResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.GetRestrictions">
            <summary>
            Returns a Restrictions object which includes our current restrictions merged
            with a restriction limiting our type
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Utilities.ImmutableCollectionsUtils">
            <summary>
            Helper class for serializing immutable collections.
            Note that this is used by all builds, even those that don't support immutable collections, in case the DLL is GACed
            https://github.com/JamesNK/Newtonsoft.Json/issues/652
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)">
            <summary>
            Gets the type of the typed collection's items.
            </summary>
            <param name="type">The type.</param>
            <returns>The type of the typed collection's items.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)">
            <summary>
            Gets the member's underlying type.
            </summary>
            <param name="member">The member.</param>
            <returns>The underlying type of the member.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the property is an indexed property.
            </summary>
            <param name="property">The property.</param>
            <returns>
                <c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Gets the member's value on the object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target object.</param>
            <returns>The member's value on the object.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Sets the member's value on the target object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Determines whether the specified MemberInfo can be read.
            </summary>
            <param name="member">The MemberInfo to determine whether can be read.</param>
            /// <param name="nonPublic">if set to <c>true</c> then allow the member to be gotten non-publicly.</param><returns><c>true</c> if the specified MemberInfo can be read; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo,System.Boolean,System.Boolean)">
            <summary>
            Determines whether the specified MemberInfo can be set.
            </summary>
            <param name="member">The MemberInfo to determine whether can be set.</param>
            <param name="nonPublic">if set to <c>true</c> then allow the member to be set non-publicly.</param>
            <param name="canSetReadOnly">if set to <c>true</c> then allow the member to be set if read-only.</param>
            <returns>
                <c>true</c> if the specified MemberInfo can be set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Utilities.StringBuffer">
            <summary>
            Builds a string. Unlike <see cref="T:System.Text.StringBuilder" /> this class lets you reuse its internal buffer.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.IsWhiteSpace(System.String)">
            <summary>
            Determines whether the string is all white space. Empty string will return <c>false</c>.
            </summary>
            <param name="s">The string to test whether it is all white space.</param>
            <returns>
                <c>true</c> if the string is all white space; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.WriteState">
            <summary>
            Specifies the state of the <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Error">
            <summary>
            An exception has been thrown, which has left the <see cref="T:Newtonsoft.Json.JsonWriter" /> in an invalid state.
            You may call the <see cref="M:Newtonsoft.Json.JsonWriter.Close" /> method to put the <see cref="T:Newtonsoft.Json.JsonWriter" /> in the <c>Closed</c> state.
            Any other <see cref="T:Newtonsoft.Json.JsonWriter" /> method calls result in an <see cref="T:System.InvalidOperationException" /> being thrown.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Closed">
            <summary>
            The <see cref="M:Newtonsoft.Json.JsonWriter.Close" /> method has been called.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Object">
            <summary>
            An object is being written. 
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Array">
            <summary>
            An array is being written.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Constructor">
            <summary>
            A constructor is being written.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Property">
            <summary>
            A property is being written.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Start">
            <summary>
            A <see cref="T:Newtonsoft.Json.JsonWriter" /> write method has not been called.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue" />, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Specifies that the method will not return if the associated Boolean parameter is passed the specified value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute" /> class.
            </summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
    </members>
</doc>